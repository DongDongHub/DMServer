// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Poker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Poker_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserExtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserExtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Online_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Online_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyAllInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyAllInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyBaseInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyBaseInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyAllInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyAllInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User_role_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ONLINE_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_User_2eproto() {
  protobuf_AddDesc_User_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "User.proto");
  GOOGLE_CHECK(file != NULL);
  Poker_descriptor_ = file->message_type(0);
  static const int Poker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, point_),
  };
  Poker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Poker_descriptor_,
      Poker::default_instance_,
      Poker_offsets_,
      -1,
      -1,
      -1,
      sizeof(Poker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Poker, _is_default_instance_));
  UserExtInfo_descriptor_ = file->message_type(1);
  static const int UserExtInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_out_roochips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_exp_upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_charlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_charm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_charupgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_max_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_max_winpot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_escape_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_best_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_mtt_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_sng_wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_bank_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_have_new_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, user_total_bankrupt_times_),
  };
  UserExtInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserExtInfo_descriptor_,
      UserExtInfo::default_instance_,
      UserExtInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserExtInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserExtInfo, _is_default_instance_));
  Online_Info_descriptor_ = file->message_type(2);
  static const int Online_Info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online_Info, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online_Info, game_host_svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online_Info, cur_rooid_),
  };
  Online_Info_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Online_Info_descriptor_,
      Online_Info::default_instance_,
      Online_Info_offsets_,
      -1,
      -1,
      -1,
      sizeof(Online_Info),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online_Info, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Online_Info, _is_default_instance_));
  UserBaseInfo_descriptor_ = file->message_type(3);
  static const int UserBaseInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_img_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_head_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_total_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_total_coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_total_win_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_total_lost_rounds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, giftimg_onuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, giftimg_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, chat_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, user_is_admin_),
  };
  UserBaseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserBaseInfo_descriptor_,
      UserBaseInfo::default_instance_,
      UserBaseInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserBaseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBaseInfo, _is_default_instance_));
  MyBaseInfo_descriptor_ = file->message_type(4);
  static const int MyBaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfo, onlineinfo_),
  };
  MyBaseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyBaseInfo_descriptor_,
      MyBaseInfo::default_instance_,
      MyBaseInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyBaseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfo, _is_default_instance_));
  MyAllInfo_descriptor_ = file->message_type(5);
  static const int MyAllInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfo, onlineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfo, extinfo_),
  };
  MyAllInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyAllInfo_descriptor_,
      MyAllInfo::default_instance_,
      MyAllInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyAllInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfo, _is_default_instance_));
  FriendBaseInfo_descriptor_ = file->message_type(6);
  static const int FriendBaseInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBaseInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBaseInfo, onlineinfo_),
  };
  FriendBaseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FriendBaseInfo_descriptor_,
      FriendBaseInfo::default_instance_,
      FriendBaseInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(FriendBaseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBaseInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendBaseInfo, _is_default_instance_));
  StatusResponse_descriptor_ = file->message_type(7);
  static const int StatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, ext1_),
  };
  StatusResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _is_default_instance_));
  MyBaseInfoResponse_descriptor_ = file->message_type(8);
  static const int MyBaseInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfoResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfoResponse, info_),
  };
  MyBaseInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyBaseInfoResponse_descriptor_,
      MyBaseInfoResponse::default_instance_,
      MyBaseInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyBaseInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyBaseInfoResponse, _is_default_instance_));
  MyAllInfoResponse_descriptor_ = file->message_type(9);
  static const int MyAllInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfoResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfoResponse, info_),
  };
  MyAllInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyAllInfoResponse_descriptor_,
      MyAllInfoResponse::default_instance_,
      MyAllInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyAllInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyAllInfoResponse, _is_default_instance_));
  PlayerInfoRequest_descriptor_ = file->message_type(10);
  static const int PlayerInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, basic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, playeruid_),
  };
  PlayerInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfoRequest_descriptor_,
      PlayerInfoRequest::default_instance_,
      PlayerInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoRequest, _is_default_instance_));
  PlayerInfoResponse_descriptor_ = file->message_type(11);
  static const int PlayerInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, info_),
  };
  PlayerInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfoResponse_descriptor_,
      PlayerInfoResponse::default_instance_,
      PlayerInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoResponse, _is_default_instance_));
  User_role_descriptor_ = file->enum_type(0);
  ONLINE_STATUS_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_User_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Poker_descriptor_, &Poker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserExtInfo_descriptor_, &UserExtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Online_Info_descriptor_, &Online_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserBaseInfo_descriptor_, &UserBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyBaseInfo_descriptor_, &MyBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyAllInfo_descriptor_, &MyAllInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FriendBaseInfo_descriptor_, &FriendBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusResponse_descriptor_, &StatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyBaseInfoResponse_descriptor_, &MyBaseInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyAllInfoResponse_descriptor_, &MyAllInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfoRequest_descriptor_, &PlayerInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfoResponse_descriptor_, &PlayerInfoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_User_2eproto() {
  delete Poker::default_instance_;
  delete Poker_reflection_;
  delete UserExtInfo::default_instance_;
  delete UserExtInfo_reflection_;
  delete Online_Info::default_instance_;
  delete Online_Info_reflection_;
  delete UserBaseInfo::default_instance_;
  delete UserBaseInfo_reflection_;
  delete MyBaseInfo::default_instance_;
  delete MyBaseInfo_reflection_;
  delete MyAllInfo::default_instance_;
  delete MyAllInfo_reflection_;
  delete FriendBaseInfo::default_instance_;
  delete FriendBaseInfo_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
  delete MyBaseInfoResponse::default_instance_;
  delete MyBaseInfoResponse_reflection_;
  delete MyAllInfoResponse::default_instance_;
  delete MyAllInfoResponse_reflection_;
  delete PlayerInfoRequest::default_instance_;
  delete PlayerInfoRequest_reflection_;
  delete PlayerInfoResponse::default_instance_;
  delete PlayerInfoResponse_reflection_;
}

void protobuf_AddDesc_User_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Basic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUser.proto\032\013Basic.proto\"%\n\005Poker\022\r\n\005co"
    "lor\030\001 \001(\014\022\r\n\005point\030\002 \001(\014\"\321\003\n\013UserExtInfo"
    "\022\r\n\005email\030\005 \001(\t\022\031\n\021user_out_roochips\030\t \001"
    "(\004\022\020\n\010user_exp\030\014 \001(\004\022\030\n\020user_exp_upgrade"
    "\030\r \001(\004\022\026\n\016user_vip_level\030\016 \001(\014\022\026\n\016user_c"
    "harlevel\030\017 \001(\r\022\022\n\nuser_charm\030\020 \001(\004\022\030\n\020us"
    "er_charupgrade\030\021 \001(\004\022\026\n\016user_max_chips\030\026"
    " \001(\004\022\027\n\017user_max_winpot\030\027 \001(\004\022\031\n\021user_es"
    "cape_count\030\030 \001(\004\022\037\n\017user_best_cards\030\031 \003("
    "\0132\006.Poker\022\025\n\ruser_mtt_wins\030\032 \001(\r\022\025\n\ruser"
    "_sng_wins\030\033 \001(\r\022\027\n\017user_bank_chips\030\034 \001(\004"
    "\022\034\n\024user_last_login_time\030\035 \001(\004\022\031\n\021user_h"
    "ave_new_msg\030\036 \001(\010\022!\n\031user_total_bankrupt"
    "_times\030\037 \001(\r\"`\n\013Online_Info\022%\n\ronline_st"
    "atus\030\001 \001(\0162\016.ONLINE_STATUS\022\027\n\017game_host_"
    "svrid\030\002 \001(\t\022\021\n\tcur_rooid\030\003 \001(\005\"\370\002\n\014UserB"
    "aseInfo\022\017\n\007user_id\030\001 \001(\r\022\021\n\tuser_type\030\002 "
    "\001(\014\022\021\n\tuser_name\030\004 \001(\t\022\032\n\010user_sex\030\007 \001(\016"
    "2\010.UserSex\022\023\n\013user_img_id\030\006 \001(\005\022\025\n\ruser_"
    "head_url\030# \001(\t\022\030\n\020user_total_chips\030\010 \001(\004"
    "\022\030\n\020user_total_coins\030\n \001(\004\022\022\n\nuser_level"
    "\030\013 \001(\014\022\035\n\025user_total_win_rounds\030\022 \001(\r\022\036\n"
    "\026user_total_lost_rounds\030\023 \001(\r\022\025\n\rgiftimg"
    "_onuse\030\024 \001(\r\022\023\n\013giftImg_url\030\025 \001(\t\022\023\n\013cha"
    "t_enable\030$ \001(\010\022!\n\ruser_is_admin\030& \001(\0162\n."
    "User_role\"O\n\nMyBaseInfo\022\037\n\010baseInfo\030\001 \001("
    "\0132\r.UserBaseInfo\022 \n\nonlineInfo\030\002 \001(\0132\014.O"
    "nline_Info\"m\n\tMyAllInfo\022\037\n\010baseInfo\030\001 \001("
    "\0132\r.UserBaseInfo\022 \n\nonlineInfo\030\002 \001(\0132\014.O"
    "nline_Info\022\035\n\007extInfo\030\003 \001(\0132\014.UserExtInf"
    "o\"S\n\016FriendBaseInfo\022\037\n\010baseInfo\030\001 \001(\0132\r."
    "UserBaseInfo\022 \n\nonlineInfo\030\002 \001(\0132\014.Onlin"
    "e_Info\"M\n\016StatusResponse\022\035\n\004head\030\001 \001(\0132\017"
    ".ResponseHeader\022\016\n\006status\030\002 \001(\014\022\014\n\004ext1\030"
    "\003 \001(\t\"N\n\022MyBaseInfoResponse\022\035\n\004head\030\001 \001("
    "\0132\017.ResponseHeader\022\031\n\004info\030\002 \001(\0132\013.MyBas"
    "eInfo\"L\n\021MyAllInfoResponse\022\035\n\004head\030\001 \001(\013"
    "2\017.ResponseHeader\022\030\n\004info\030\002 \001(\0132\n.MyAllI"
    "nfo\"E\n\021PlayerInfoRequest\022\035\n\005basic\030\001 \001(\0132"
    "\016.CommonRequest\022\021\n\tplayeruid\030\002 \001(\r\"P\n\022Pl"
    "ayerInfoResponse\022\035\n\004head\030\001 \001(\0132\017.Respons"
    "eHeader\022\033\n\004info\030\002 \001(\0132\r.UserBaseInfo*/\n\t"
    "User_role\022\013\n\007unkwown\020\000\022\n\n\006player\020\001\022\t\n\005ad"
    "min\020\002*Y\n\rONLINE_STATUS\022\021\n\rUSER_OFF_LINE\020"
    "\000\022\020\n\014USER_ON_LINE\020\001\022\020\n\014USER_IN_GAME\020\002\022\021\n"
    "\rUSER_IN_WATCH\020\003b\006proto3", 1824);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  Poker::default_instance_ = new Poker();
  UserExtInfo::default_instance_ = new UserExtInfo();
  Online_Info::default_instance_ = new Online_Info();
  UserBaseInfo::default_instance_ = new UserBaseInfo();
  MyBaseInfo::default_instance_ = new MyBaseInfo();
  MyAllInfo::default_instance_ = new MyAllInfo();
  FriendBaseInfo::default_instance_ = new FriendBaseInfo();
  StatusResponse::default_instance_ = new StatusResponse();
  MyBaseInfoResponse::default_instance_ = new MyBaseInfoResponse();
  MyAllInfoResponse::default_instance_ = new MyAllInfoResponse();
  PlayerInfoRequest::default_instance_ = new PlayerInfoRequest();
  PlayerInfoResponse::default_instance_ = new PlayerInfoResponse();
  Poker::default_instance_->InitAsDefaultInstance();
  UserExtInfo::default_instance_->InitAsDefaultInstance();
  Online_Info::default_instance_->InitAsDefaultInstance();
  UserBaseInfo::default_instance_->InitAsDefaultInstance();
  MyBaseInfo::default_instance_->InitAsDefaultInstance();
  MyAllInfo::default_instance_->InitAsDefaultInstance();
  FriendBaseInfo::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  MyBaseInfoResponse::default_instance_->InitAsDefaultInstance();
  MyAllInfoResponse::default_instance_->InitAsDefaultInstance();
  PlayerInfoRequest::default_instance_->InitAsDefaultInstance();
  PlayerInfoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_User_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_User_2eproto {
  StaticDescriptorInitializer_User_2eproto() {
    protobuf_AddDesc_User_2eproto();
  }
} static_descriptor_initializer_User_2eproto_;
const ::google::protobuf::EnumDescriptor* User_role_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_role_descriptor_;
}
bool User_role_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ONLINE_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ONLINE_STATUS_descriptor_;
}
bool ONLINE_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Poker::kColorFieldNumber;
const int Poker::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Poker::Poker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Poker)
}

void Poker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Poker::Poker(const Poker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Poker)
}

void Poker::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Poker::~Poker() {
  // @@protoc_insertion_point(destructor:Poker)
  SharedDtor();
}

void Poker::SharedDtor() {
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Poker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Poker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Poker_descriptor_;
}

const Poker& Poker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Poker* Poker::default_instance_ = NULL;

Poker* Poker::New(::google::protobuf::Arena* arena) const {
  Poker* n = new Poker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Poker::Clear() {
// @@protoc_insertion_point(message_clear_start:Poker)
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Poker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Poker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // optional bytes point = 2;
      case 2: {
        if (tag == 18) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Poker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Poker)
  return false;
#undef DO_
}

void Poker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Poker)
  // optional bytes color = 1;
  if (this->color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->color(), output);
  }

  // optional bytes point = 2;
  if (this->point().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->point(), output);
  }

  // @@protoc_insertion_point(serialize_end:Poker)
}

::google::protobuf::uint8* Poker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Poker)
  // optional bytes color = 1;
  if (this->color().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->color(), target);
  }

  // optional bytes point = 2;
  if (this->point().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->point(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Poker)
  return target;
}

int Poker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Poker)
  int total_size = 0;

  // optional bytes color = 1;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->color());
  }

  // optional bytes point = 2;
  if (this->point().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->point());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Poker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Poker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Poker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Poker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Poker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Poker)
    MergeFrom(*source);
  }
}

void Poker::MergeFrom(const Poker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Poker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.point().size() > 0) {

    point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.point_);
  }
}

void Poker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Poker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Poker::CopyFrom(const Poker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Poker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Poker::IsInitialized() const {

  return true;
}

void Poker::Swap(Poker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Poker::InternalSwap(Poker* other) {
  color_.Swap(&other->color_);
  point_.Swap(&other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Poker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Poker_descriptor_;
  metadata.reflection = Poker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Poker

// optional bytes color = 1;
void Poker::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Poker::color() const {
  // @@protoc_insertion_point(field_get:Poker.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poker::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Poker.color)
}
 void Poker::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Poker.color)
}
 void Poker::set_color(const void* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Poker.color)
}
 ::std::string* Poker::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:Poker.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Poker::release_color() {
  // @@protoc_insertion_point(field_release:Poker.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poker::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:Poker.color)
}

// optional bytes point = 2;
void Poker::clear_point() {
  point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Poker::point() const {
  // @@protoc_insertion_point(field_get:Poker.point)
  return point_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poker::set_point(const ::std::string& value) {
  
  point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Poker.point)
}
 void Poker::set_point(const char* value) {
  
  point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Poker.point)
}
 void Poker::set_point(const void* value, size_t size) {
  
  point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Poker.point)
}
 ::std::string* Poker::mutable_point() {
  
  // @@protoc_insertion_point(field_mutable:Poker.point)
  return point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Poker::release_point() {
  // @@protoc_insertion_point(field_release:Poker.point)
  
  return point_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Poker::set_allocated_point(::std::string* point) {
  if (point != NULL) {
    
  } else {
    
  }
  point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point);
  // @@protoc_insertion_point(field_set_allocated:Poker.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserExtInfo::kEmailFieldNumber;
const int UserExtInfo::kUserOutRoochipsFieldNumber;
const int UserExtInfo::kUserExpFieldNumber;
const int UserExtInfo::kUserExpUpgradeFieldNumber;
const int UserExtInfo::kUserVipLevelFieldNumber;
const int UserExtInfo::kUserCharlevelFieldNumber;
const int UserExtInfo::kUserCharmFieldNumber;
const int UserExtInfo::kUserCharupgradeFieldNumber;
const int UserExtInfo::kUserMaxChipsFieldNumber;
const int UserExtInfo::kUserMaxWinpotFieldNumber;
const int UserExtInfo::kUserEscapeCountFieldNumber;
const int UserExtInfo::kUserBestCardsFieldNumber;
const int UserExtInfo::kUserMttWinsFieldNumber;
const int UserExtInfo::kUserSngWinsFieldNumber;
const int UserExtInfo::kUserBankChipsFieldNumber;
const int UserExtInfo::kUserLastLoginTimeFieldNumber;
const int UserExtInfo::kUserHaveNewMsgFieldNumber;
const int UserExtInfo::kUserTotalBankruptTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserExtInfo::UserExtInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserExtInfo)
}

void UserExtInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserExtInfo::UserExtInfo(const UserExtInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserExtInfo)
}

void UserExtInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_out_roochips_ = GOOGLE_ULONGLONG(0);
  user_exp_ = GOOGLE_ULONGLONG(0);
  user_exp_upgrade_ = GOOGLE_ULONGLONG(0);
  user_vip_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_charlevel_ = 0u;
  user_charm_ = GOOGLE_ULONGLONG(0);
  user_charupgrade_ = GOOGLE_ULONGLONG(0);
  user_max_chips_ = GOOGLE_ULONGLONG(0);
  user_max_winpot_ = GOOGLE_ULONGLONG(0);
  user_escape_count_ = GOOGLE_ULONGLONG(0);
  user_mtt_wins_ = 0u;
  user_sng_wins_ = 0u;
  user_bank_chips_ = GOOGLE_ULONGLONG(0);
  user_last_login_time_ = GOOGLE_ULONGLONG(0);
  user_have_new_msg_ = false;
  user_total_bankrupt_times_ = 0u;
}

UserExtInfo::~UserExtInfo() {
  // @@protoc_insertion_point(destructor:UserExtInfo)
  SharedDtor();
}

void UserExtInfo::SharedDtor() {
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_vip_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserExtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserExtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserExtInfo_descriptor_;
}

const UserExtInfo& UserExtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UserExtInfo* UserExtInfo::default_instance_ = NULL;

UserExtInfo* UserExtInfo::New(::google::protobuf::Arena* arena) const {
  UserExtInfo* n = new UserExtInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserExtInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserExtInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserExtInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserExtInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_out_roochips_, user_exp_upgrade_);
  ZR_(user_charm_, user_charupgrade_);
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_vip_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_charlevel_ = 0u;
  ZR_(user_mtt_wins_, user_escape_count_);
  ZR_(user_bank_chips_, user_sng_wins_);
  user_max_chips_ = GOOGLE_ULONGLONG(0);
  user_last_login_time_ = GOOGLE_ULONGLONG(0);
  user_have_new_msg_ = false;
  user_total_bankrupt_times_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  user_best_cards_.Clear();
}

bool UserExtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserExtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string email = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UserExtInfo.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_user_out_roochips;
        break;
      }

      // optional uint64 user_out_roochips = 9;
      case 9: {
        if (tag == 72) {
         parse_user_out_roochips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_out_roochips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_user_exp;
        break;
      }

      // optional uint64 user_exp = 12;
      case 12: {
        if (tag == 96) {
         parse_user_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_exp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_user_exp_upgrade;
        break;
      }

      // optional uint64 user_exp_upgrade = 13;
      case 13: {
        if (tag == 104) {
         parse_user_exp_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_exp_upgrade_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_user_vip_level;
        break;
      }

      // optional bytes user_vip_level = 14;
      case 14: {
        if (tag == 114) {
         parse_user_vip_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_vip_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_user_charlevel;
        break;
      }

      // optional uint32 user_charlevel = 15;
      case 15: {
        if (tag == 120) {
         parse_user_charlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_charlevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_user_charm;
        break;
      }

      // optional uint64 user_charm = 16;
      case 16: {
        if (tag == 128) {
         parse_user_charm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_charm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_user_charupgrade;
        break;
      }

      // optional uint64 user_charupgrade = 17;
      case 17: {
        if (tag == 136) {
         parse_user_charupgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_charupgrade_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_user_max_chips;
        break;
      }

      // optional uint64 user_max_chips = 22;
      case 22: {
        if (tag == 176) {
         parse_user_max_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_max_chips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_user_max_winpot;
        break;
      }

      // optional uint64 user_max_winpot = 23;
      case 23: {
        if (tag == 184) {
         parse_user_max_winpot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_max_winpot_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_user_escape_count;
        break;
      }

      // optional uint64 user_escape_count = 24;
      case 24: {
        if (tag == 192) {
         parse_user_escape_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_escape_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_user_best_cards;
        break;
      }

      // repeated .Poker user_best_cards = 25;
      case 25: {
        if (tag == 202) {
         parse_user_best_cards:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_best_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_best_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_loop_user_best_cards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(208)) goto parse_user_mtt_wins;
        break;
      }

      // optional uint32 user_mtt_wins = 26;
      case 26: {
        if (tag == 208) {
         parse_user_mtt_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_mtt_wins_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_user_sng_wins;
        break;
      }

      // optional uint32 user_sng_wins = 27;
      case 27: {
        if (tag == 216) {
         parse_user_sng_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_sng_wins_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_user_bank_chips;
        break;
      }

      // optional uint64 user_bank_chips = 28;
      case 28: {
        if (tag == 224) {
         parse_user_bank_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_bank_chips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_user_last_login_time;
        break;
      }

      // optional uint64 user_last_login_time = 29;
      case 29: {
        if (tag == 232) {
         parse_user_last_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_last_login_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_user_have_new_msg;
        break;
      }

      // optional bool user_have_new_msg = 30;
      case 30: {
        if (tag == 240) {
         parse_user_have_new_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_have_new_msg_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_user_total_bankrupt_times;
        break;
      }

      // optional uint32 user_total_bankrupt_times = 31;
      case 31: {
        if (tag == 248) {
         parse_user_total_bankrupt_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_total_bankrupt_times_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserExtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserExtInfo)
  return false;
#undef DO_
}

void UserExtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserExtInfo)
  // optional string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserExtInfo.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // optional uint64 user_out_roochips = 9;
  if (this->user_out_roochips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->user_out_roochips(), output);
  }

  // optional uint64 user_exp = 12;
  if (this->user_exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->user_exp(), output);
  }

  // optional uint64 user_exp_upgrade = 13;
  if (this->user_exp_upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->user_exp_upgrade(), output);
  }

  // optional bytes user_vip_level = 14;
  if (this->user_vip_level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->user_vip_level(), output);
  }

  // optional uint32 user_charlevel = 15;
  if (this->user_charlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->user_charlevel(), output);
  }

  // optional uint64 user_charm = 16;
  if (this->user_charm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->user_charm(), output);
  }

  // optional uint64 user_charupgrade = 17;
  if (this->user_charupgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->user_charupgrade(), output);
  }

  // optional uint64 user_max_chips = 22;
  if (this->user_max_chips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->user_max_chips(), output);
  }

  // optional uint64 user_max_winpot = 23;
  if (this->user_max_winpot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->user_max_winpot(), output);
  }

  // optional uint64 user_escape_count = 24;
  if (this->user_escape_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->user_escape_count(), output);
  }

  // repeated .Poker user_best_cards = 25;
  for (unsigned int i = 0, n = this->user_best_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->user_best_cards(i), output);
  }

  // optional uint32 user_mtt_wins = 26;
  if (this->user_mtt_wins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->user_mtt_wins(), output);
  }

  // optional uint32 user_sng_wins = 27;
  if (this->user_sng_wins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->user_sng_wins(), output);
  }

  // optional uint64 user_bank_chips = 28;
  if (this->user_bank_chips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->user_bank_chips(), output);
  }

  // optional uint64 user_last_login_time = 29;
  if (this->user_last_login_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->user_last_login_time(), output);
  }

  // optional bool user_have_new_msg = 30;
  if (this->user_have_new_msg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->user_have_new_msg(), output);
  }

  // optional uint32 user_total_bankrupt_times = 31;
  if (this->user_total_bankrupt_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->user_total_bankrupt_times(), output);
  }

  // @@protoc_insertion_point(serialize_end:UserExtInfo)
}

::google::protobuf::uint8* UserExtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserExtInfo)
  // optional string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserExtInfo.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // optional uint64 user_out_roochips = 9;
  if (this->user_out_roochips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->user_out_roochips(), target);
  }

  // optional uint64 user_exp = 12;
  if (this->user_exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->user_exp(), target);
  }

  // optional uint64 user_exp_upgrade = 13;
  if (this->user_exp_upgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->user_exp_upgrade(), target);
  }

  // optional bytes user_vip_level = 14;
  if (this->user_vip_level().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->user_vip_level(), target);
  }

  // optional uint32 user_charlevel = 15;
  if (this->user_charlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->user_charlevel(), target);
  }

  // optional uint64 user_charm = 16;
  if (this->user_charm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->user_charm(), target);
  }

  // optional uint64 user_charupgrade = 17;
  if (this->user_charupgrade() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->user_charupgrade(), target);
  }

  // optional uint64 user_max_chips = 22;
  if (this->user_max_chips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->user_max_chips(), target);
  }

  // optional uint64 user_max_winpot = 23;
  if (this->user_max_winpot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->user_max_winpot(), target);
  }

  // optional uint64 user_escape_count = 24;
  if (this->user_escape_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->user_escape_count(), target);
  }

  // repeated .Poker user_best_cards = 25;
  for (unsigned int i = 0, n = this->user_best_cards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->user_best_cards(i), target);
  }

  // optional uint32 user_mtt_wins = 26;
  if (this->user_mtt_wins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->user_mtt_wins(), target);
  }

  // optional uint32 user_sng_wins = 27;
  if (this->user_sng_wins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->user_sng_wins(), target);
  }

  // optional uint64 user_bank_chips = 28;
  if (this->user_bank_chips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->user_bank_chips(), target);
  }

  // optional uint64 user_last_login_time = 29;
  if (this->user_last_login_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->user_last_login_time(), target);
  }

  // optional bool user_have_new_msg = 30;
  if (this->user_have_new_msg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->user_have_new_msg(), target);
  }

  // optional uint32 user_total_bankrupt_times = 31;
  if (this->user_total_bankrupt_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->user_total_bankrupt_times(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UserExtInfo)
  return target;
}

int UserExtInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UserExtInfo)
  int total_size = 0;

  // optional string email = 5;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional uint64 user_out_roochips = 9;
  if (this->user_out_roochips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_out_roochips());
  }

  // optional uint64 user_exp = 12;
  if (this->user_exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_exp());
  }

  // optional uint64 user_exp_upgrade = 13;
  if (this->user_exp_upgrade() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_exp_upgrade());
  }

  // optional bytes user_vip_level = 14;
  if (this->user_vip_level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_vip_level());
  }

  // optional uint32 user_charlevel = 15;
  if (this->user_charlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_charlevel());
  }

  // optional uint64 user_charm = 16;
  if (this->user_charm() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_charm());
  }

  // optional uint64 user_charupgrade = 17;
  if (this->user_charupgrade() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_charupgrade());
  }

  // optional uint64 user_max_chips = 22;
  if (this->user_max_chips() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_max_chips());
  }

  // optional uint64 user_max_winpot = 23;
  if (this->user_max_winpot() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_max_winpot());
  }

  // optional uint64 user_escape_count = 24;
  if (this->user_escape_count() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_escape_count());
  }

  // optional uint32 user_mtt_wins = 26;
  if (this->user_mtt_wins() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_mtt_wins());
  }

  // optional uint32 user_sng_wins = 27;
  if (this->user_sng_wins() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_sng_wins());
  }

  // optional uint64 user_bank_chips = 28;
  if (this->user_bank_chips() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_bank_chips());
  }

  // optional uint64 user_last_login_time = 29;
  if (this->user_last_login_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_last_login_time());
  }

  // optional bool user_have_new_msg = 30;
  if (this->user_have_new_msg() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 user_total_bankrupt_times = 31;
  if (this->user_total_bankrupt_times() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_total_bankrupt_times());
  }

  // repeated .Poker user_best_cards = 25;
  total_size += 2 * this->user_best_cards_size();
  for (int i = 0; i < this->user_best_cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_best_cards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserExtInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserExtInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserExtInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserExtInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserExtInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserExtInfo)
    MergeFrom(*source);
  }
}

void UserExtInfo::MergeFrom(const UserExtInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserExtInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_best_cards_.MergeFrom(from.user_best_cards_);
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.user_out_roochips() != 0) {
    set_user_out_roochips(from.user_out_roochips());
  }
  if (from.user_exp() != 0) {
    set_user_exp(from.user_exp());
  }
  if (from.user_exp_upgrade() != 0) {
    set_user_exp_upgrade(from.user_exp_upgrade());
  }
  if (from.user_vip_level().size() > 0) {

    user_vip_level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_vip_level_);
  }
  if (from.user_charlevel() != 0) {
    set_user_charlevel(from.user_charlevel());
  }
  if (from.user_charm() != 0) {
    set_user_charm(from.user_charm());
  }
  if (from.user_charupgrade() != 0) {
    set_user_charupgrade(from.user_charupgrade());
  }
  if (from.user_max_chips() != 0) {
    set_user_max_chips(from.user_max_chips());
  }
  if (from.user_max_winpot() != 0) {
    set_user_max_winpot(from.user_max_winpot());
  }
  if (from.user_escape_count() != 0) {
    set_user_escape_count(from.user_escape_count());
  }
  if (from.user_mtt_wins() != 0) {
    set_user_mtt_wins(from.user_mtt_wins());
  }
  if (from.user_sng_wins() != 0) {
    set_user_sng_wins(from.user_sng_wins());
  }
  if (from.user_bank_chips() != 0) {
    set_user_bank_chips(from.user_bank_chips());
  }
  if (from.user_last_login_time() != 0) {
    set_user_last_login_time(from.user_last_login_time());
  }
  if (from.user_have_new_msg() != 0) {
    set_user_have_new_msg(from.user_have_new_msg());
  }
  if (from.user_total_bankrupt_times() != 0) {
    set_user_total_bankrupt_times(from.user_total_bankrupt_times());
  }
}

void UserExtInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserExtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserExtInfo::CopyFrom(const UserExtInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserExtInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExtInfo::IsInitialized() const {

  return true;
}

void UserExtInfo::Swap(UserExtInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserExtInfo::InternalSwap(UserExtInfo* other) {
  email_.Swap(&other->email_);
  std::swap(user_out_roochips_, other->user_out_roochips_);
  std::swap(user_exp_, other->user_exp_);
  std::swap(user_exp_upgrade_, other->user_exp_upgrade_);
  user_vip_level_.Swap(&other->user_vip_level_);
  std::swap(user_charlevel_, other->user_charlevel_);
  std::swap(user_charm_, other->user_charm_);
  std::swap(user_charupgrade_, other->user_charupgrade_);
  std::swap(user_max_chips_, other->user_max_chips_);
  std::swap(user_max_winpot_, other->user_max_winpot_);
  std::swap(user_escape_count_, other->user_escape_count_);
  user_best_cards_.UnsafeArenaSwap(&other->user_best_cards_);
  std::swap(user_mtt_wins_, other->user_mtt_wins_);
  std::swap(user_sng_wins_, other->user_sng_wins_);
  std::swap(user_bank_chips_, other->user_bank_chips_);
  std::swap(user_last_login_time_, other->user_last_login_time_);
  std::swap(user_have_new_msg_, other->user_have_new_msg_);
  std::swap(user_total_bankrupt_times_, other->user_total_bankrupt_times_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserExtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserExtInfo_descriptor_;
  metadata.reflection = UserExtInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserExtInfo

// optional string email = 5;
void UserExtInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserExtInfo::email() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserExtInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserExtInfo.email)
}
 void UserExtInfo::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserExtInfo.email)
}
 void UserExtInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserExtInfo.email)
}
 ::std::string* UserExtInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:UserExtInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserExtInfo::release_email() {
  // @@protoc_insertion_point(field_release:UserExtInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserExtInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:UserExtInfo.email)
}

// optional uint64 user_out_roochips = 9;
void UserExtInfo::clear_user_out_roochips() {
  user_out_roochips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_out_roochips() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_out_roochips)
  return user_out_roochips_;
}
 void UserExtInfo::set_user_out_roochips(::google::protobuf::uint64 value) {
  
  user_out_roochips_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_out_roochips)
}

// optional uint64 user_exp = 12;
void UserExtInfo::clear_user_exp() {
  user_exp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_exp() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_exp)
  return user_exp_;
}
 void UserExtInfo::set_user_exp(::google::protobuf::uint64 value) {
  
  user_exp_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_exp)
}

// optional uint64 user_exp_upgrade = 13;
void UserExtInfo::clear_user_exp_upgrade() {
  user_exp_upgrade_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_exp_upgrade() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_exp_upgrade)
  return user_exp_upgrade_;
}
 void UserExtInfo::set_user_exp_upgrade(::google::protobuf::uint64 value) {
  
  user_exp_upgrade_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_exp_upgrade)
}

// optional bytes user_vip_level = 14;
void UserExtInfo::clear_user_vip_level() {
  user_vip_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserExtInfo::user_vip_level() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_vip_level)
  return user_vip_level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserExtInfo::set_user_vip_level(const ::std::string& value) {
  
  user_vip_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserExtInfo.user_vip_level)
}
 void UserExtInfo::set_user_vip_level(const char* value) {
  
  user_vip_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserExtInfo.user_vip_level)
}
 void UserExtInfo::set_user_vip_level(const void* value, size_t size) {
  
  user_vip_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserExtInfo.user_vip_level)
}
 ::std::string* UserExtInfo::mutable_user_vip_level() {
  
  // @@protoc_insertion_point(field_mutable:UserExtInfo.user_vip_level)
  return user_vip_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserExtInfo::release_user_vip_level() {
  // @@protoc_insertion_point(field_release:UserExtInfo.user_vip_level)
  
  return user_vip_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserExtInfo::set_allocated_user_vip_level(::std::string* user_vip_level) {
  if (user_vip_level != NULL) {
    
  } else {
    
  }
  user_vip_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_vip_level);
  // @@protoc_insertion_point(field_set_allocated:UserExtInfo.user_vip_level)
}

// optional uint32 user_charlevel = 15;
void UserExtInfo::clear_user_charlevel() {
  user_charlevel_ = 0u;
}
 ::google::protobuf::uint32 UserExtInfo::user_charlevel() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_charlevel)
  return user_charlevel_;
}
 void UserExtInfo::set_user_charlevel(::google::protobuf::uint32 value) {
  
  user_charlevel_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_charlevel)
}

// optional uint64 user_charm = 16;
void UserExtInfo::clear_user_charm() {
  user_charm_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_charm() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_charm)
  return user_charm_;
}
 void UserExtInfo::set_user_charm(::google::protobuf::uint64 value) {
  
  user_charm_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_charm)
}

// optional uint64 user_charupgrade = 17;
void UserExtInfo::clear_user_charupgrade() {
  user_charupgrade_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_charupgrade() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_charupgrade)
  return user_charupgrade_;
}
 void UserExtInfo::set_user_charupgrade(::google::protobuf::uint64 value) {
  
  user_charupgrade_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_charupgrade)
}

// optional uint64 user_max_chips = 22;
void UserExtInfo::clear_user_max_chips() {
  user_max_chips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_max_chips() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_max_chips)
  return user_max_chips_;
}
 void UserExtInfo::set_user_max_chips(::google::protobuf::uint64 value) {
  
  user_max_chips_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_max_chips)
}

// optional uint64 user_max_winpot = 23;
void UserExtInfo::clear_user_max_winpot() {
  user_max_winpot_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_max_winpot() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_max_winpot)
  return user_max_winpot_;
}
 void UserExtInfo::set_user_max_winpot(::google::protobuf::uint64 value) {
  
  user_max_winpot_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_max_winpot)
}

// optional uint64 user_escape_count = 24;
void UserExtInfo::clear_user_escape_count() {
  user_escape_count_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_escape_count() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_escape_count)
  return user_escape_count_;
}
 void UserExtInfo::set_user_escape_count(::google::protobuf::uint64 value) {
  
  user_escape_count_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_escape_count)
}

// repeated .Poker user_best_cards = 25;
int UserExtInfo::user_best_cards_size() const {
  return user_best_cards_.size();
}
void UserExtInfo::clear_user_best_cards() {
  user_best_cards_.Clear();
}
const ::Poker& UserExtInfo::user_best_cards(int index) const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_best_cards)
  return user_best_cards_.Get(index);
}
::Poker* UserExtInfo::mutable_user_best_cards(int index) {
  // @@protoc_insertion_point(field_mutable:UserExtInfo.user_best_cards)
  return user_best_cards_.Mutable(index);
}
::Poker* UserExtInfo::add_user_best_cards() {
  // @@protoc_insertion_point(field_add:UserExtInfo.user_best_cards)
  return user_best_cards_.Add();
}
::google::protobuf::RepeatedPtrField< ::Poker >*
UserExtInfo::mutable_user_best_cards() {
  // @@protoc_insertion_point(field_mutable_list:UserExtInfo.user_best_cards)
  return &user_best_cards_;
}
const ::google::protobuf::RepeatedPtrField< ::Poker >&
UserExtInfo::user_best_cards() const {
  // @@protoc_insertion_point(field_list:UserExtInfo.user_best_cards)
  return user_best_cards_;
}

// optional uint32 user_mtt_wins = 26;
void UserExtInfo::clear_user_mtt_wins() {
  user_mtt_wins_ = 0u;
}
 ::google::protobuf::uint32 UserExtInfo::user_mtt_wins() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_mtt_wins)
  return user_mtt_wins_;
}
 void UserExtInfo::set_user_mtt_wins(::google::protobuf::uint32 value) {
  
  user_mtt_wins_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_mtt_wins)
}

// optional uint32 user_sng_wins = 27;
void UserExtInfo::clear_user_sng_wins() {
  user_sng_wins_ = 0u;
}
 ::google::protobuf::uint32 UserExtInfo::user_sng_wins() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_sng_wins)
  return user_sng_wins_;
}
 void UserExtInfo::set_user_sng_wins(::google::protobuf::uint32 value) {
  
  user_sng_wins_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_sng_wins)
}

// optional uint64 user_bank_chips = 28;
void UserExtInfo::clear_user_bank_chips() {
  user_bank_chips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_bank_chips() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_bank_chips)
  return user_bank_chips_;
}
 void UserExtInfo::set_user_bank_chips(::google::protobuf::uint64 value) {
  
  user_bank_chips_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_bank_chips)
}

// optional uint64 user_last_login_time = 29;
void UserExtInfo::clear_user_last_login_time() {
  user_last_login_time_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserExtInfo::user_last_login_time() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_last_login_time)
  return user_last_login_time_;
}
 void UserExtInfo::set_user_last_login_time(::google::protobuf::uint64 value) {
  
  user_last_login_time_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_last_login_time)
}

// optional bool user_have_new_msg = 30;
void UserExtInfo::clear_user_have_new_msg() {
  user_have_new_msg_ = false;
}
 bool UserExtInfo::user_have_new_msg() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_have_new_msg)
  return user_have_new_msg_;
}
 void UserExtInfo::set_user_have_new_msg(bool value) {
  
  user_have_new_msg_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_have_new_msg)
}

// optional uint32 user_total_bankrupt_times = 31;
void UserExtInfo::clear_user_total_bankrupt_times() {
  user_total_bankrupt_times_ = 0u;
}
 ::google::protobuf::uint32 UserExtInfo::user_total_bankrupt_times() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_total_bankrupt_times)
  return user_total_bankrupt_times_;
}
 void UserExtInfo::set_user_total_bankrupt_times(::google::protobuf::uint32 value) {
  
  user_total_bankrupt_times_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_total_bankrupt_times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Online_Info::kOnlineStatusFieldNumber;
const int Online_Info::kGameHostSvridFieldNumber;
const int Online_Info::kCurRooidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Online_Info::Online_Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Online_Info)
}

void Online_Info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Online_Info::Online_Info(const Online_Info& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Online_Info)
}

void Online_Info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_status_ = 0;
  game_host_svrid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_rooid_ = 0;
}

Online_Info::~Online_Info() {
  // @@protoc_insertion_point(destructor:Online_Info)
  SharedDtor();
}

void Online_Info::SharedDtor() {
  game_host_svrid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Online_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Online_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Online_Info_descriptor_;
}

const Online_Info& Online_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Online_Info* Online_Info::default_instance_ = NULL;

Online_Info* Online_Info::New(::google::protobuf::Arena* arena) const {
  Online_Info* n = new Online_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Online_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Online_Info)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Online_Info, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Online_Info*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(online_status_, cur_rooid_);
  game_host_svrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Online_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Online_Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ONLINE_STATUS online_status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::ONLINE_STATUS >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_game_host_svrid;
        break;
      }

      // optional string game_host_svrid = 2;
      case 2: {
        if (tag == 18) {
         parse_game_host_svrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_host_svrid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_host_svrid().data(), this->game_host_svrid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Online_Info.game_host_svrid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cur_rooid;
        break;
      }

      // optional int32 cur_rooid = 3;
      case 3: {
        if (tag == 24) {
         parse_cur_rooid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_rooid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Online_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Online_Info)
  return false;
#undef DO_
}

void Online_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Online_Info)
  // optional .ONLINE_STATUS online_status = 1;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->online_status(), output);
  }

  // optional string game_host_svrid = 2;
  if (this->game_host_svrid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_host_svrid().data(), this->game_host_svrid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Online_Info.game_host_svrid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_host_svrid(), output);
  }

  // optional int32 cur_rooid = 3;
  if (this->cur_rooid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_rooid(), output);
  }

  // @@protoc_insertion_point(serialize_end:Online_Info)
}

::google::protobuf::uint8* Online_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Online_Info)
  // optional .ONLINE_STATUS online_status = 1;
  if (this->online_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->online_status(), target);
  }

  // optional string game_host_svrid = 2;
  if (this->game_host_svrid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_host_svrid().data(), this->game_host_svrid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Online_Info.game_host_svrid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_host_svrid(), target);
  }

  // optional int32 cur_rooid = 3;
  if (this->cur_rooid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_rooid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Online_Info)
  return target;
}

int Online_Info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Online_Info)
  int total_size = 0;

  // optional .ONLINE_STATUS online_status = 1;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  // optional string game_host_svrid = 2;
  if (this->game_host_svrid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_host_svrid());
  }

  // optional int32 cur_rooid = 3;
  if (this->cur_rooid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cur_rooid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Online_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Online_Info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Online_Info* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Online_Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Online_Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Online_Info)
    MergeFrom(*source);
  }
}

void Online_Info::MergeFrom(const Online_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Online_Info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.game_host_svrid().size() > 0) {

    game_host_svrid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_host_svrid_);
  }
  if (from.cur_rooid() != 0) {
    set_cur_rooid(from.cur_rooid());
  }
}

void Online_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Online_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Online_Info::CopyFrom(const Online_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Online_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Online_Info::IsInitialized() const {

  return true;
}

void Online_Info::Swap(Online_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Online_Info::InternalSwap(Online_Info* other) {
  std::swap(online_status_, other->online_status_);
  game_host_svrid_.Swap(&other->game_host_svrid_);
  std::swap(cur_rooid_, other->cur_rooid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Online_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Online_Info_descriptor_;
  metadata.reflection = Online_Info_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Online_Info

// optional .ONLINE_STATUS online_status = 1;
void Online_Info::clear_online_status() {
  online_status_ = 0;
}
 ::ONLINE_STATUS Online_Info::online_status() const {
  // @@protoc_insertion_point(field_get:Online_Info.online_status)
  return static_cast< ::ONLINE_STATUS >(online_status_);
}
 void Online_Info::set_online_status(::ONLINE_STATUS value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:Online_Info.online_status)
}

// optional string game_host_svrid = 2;
void Online_Info::clear_game_host_svrid() {
  game_host_svrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Online_Info::game_host_svrid() const {
  // @@protoc_insertion_point(field_get:Online_Info.game_host_svrid)
  return game_host_svrid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Online_Info::set_game_host_svrid(const ::std::string& value) {
  
  game_host_svrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Online_Info.game_host_svrid)
}
 void Online_Info::set_game_host_svrid(const char* value) {
  
  game_host_svrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Online_Info.game_host_svrid)
}
 void Online_Info::set_game_host_svrid(const char* value, size_t size) {
  
  game_host_svrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Online_Info.game_host_svrid)
}
 ::std::string* Online_Info::mutable_game_host_svrid() {
  
  // @@protoc_insertion_point(field_mutable:Online_Info.game_host_svrid)
  return game_host_svrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Online_Info::release_game_host_svrid() {
  // @@protoc_insertion_point(field_release:Online_Info.game_host_svrid)
  
  return game_host_svrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Online_Info::set_allocated_game_host_svrid(::std::string* game_host_svrid) {
  if (game_host_svrid != NULL) {
    
  } else {
    
  }
  game_host_svrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_host_svrid);
  // @@protoc_insertion_point(field_set_allocated:Online_Info.game_host_svrid)
}

// optional int32 cur_rooid = 3;
void Online_Info::clear_cur_rooid() {
  cur_rooid_ = 0;
}
 ::google::protobuf::int32 Online_Info::cur_rooid() const {
  // @@protoc_insertion_point(field_get:Online_Info.cur_rooid)
  return cur_rooid_;
}
 void Online_Info::set_cur_rooid(::google::protobuf::int32 value) {
  
  cur_rooid_ = value;
  // @@protoc_insertion_point(field_set:Online_Info.cur_rooid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBaseInfo::kUserIdFieldNumber;
const int UserBaseInfo::kUserTypeFieldNumber;
const int UserBaseInfo::kUserNameFieldNumber;
const int UserBaseInfo::kUserSexFieldNumber;
const int UserBaseInfo::kUserImgIdFieldNumber;
const int UserBaseInfo::kUserHeadUrlFieldNumber;
const int UserBaseInfo::kUserTotalChipsFieldNumber;
const int UserBaseInfo::kUserTotalCoinsFieldNumber;
const int UserBaseInfo::kUserLevelFieldNumber;
const int UserBaseInfo::kUserTotalWinRoundsFieldNumber;
const int UserBaseInfo::kUserTotalLostRoundsFieldNumber;
const int UserBaseInfo::kGiftimgOnuseFieldNumber;
const int UserBaseInfo::kGiftImgUrlFieldNumber;
const int UserBaseInfo::kChatEnableFieldNumber;
const int UserBaseInfo::kUserIsAdminFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBaseInfo::UserBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserBaseInfo)
}

void UserBaseInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserBaseInfo::UserBaseInfo(const UserBaseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserBaseInfo)
}

void UserBaseInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = 0u;
  user_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_sex_ = 0;
  user_img_id_ = 0;
  user_head_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_total_chips_ = GOOGLE_ULONGLONG(0);
  user_total_coins_ = GOOGLE_ULONGLONG(0);
  user_level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_total_win_rounds_ = 0u;
  user_total_lost_rounds_ = 0u;
  giftimg_onuse_ = 0u;
  giftimg_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_enable_ = false;
  user_is_admin_ = 0;
}

UserBaseInfo::~UserBaseInfo() {
  // @@protoc_insertion_point(destructor:UserBaseInfo)
  SharedDtor();
}

void UserBaseInfo::SharedDtor() {
  user_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_head_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  giftimg_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBaseInfo_descriptor_;
}

const UserBaseInfo& UserBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

UserBaseInfo* UserBaseInfo::default_instance_ = NULL;

UserBaseInfo* UserBaseInfo::New(::google::protobuf::Arena* arena) const {
  UserBaseInfo* n = new UserBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:UserBaseInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UserBaseInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UserBaseInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, user_sex_);
  ZR_(user_total_chips_, user_img_id_);
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_total_coins_ = GOOGLE_ULONGLONG(0);
  ZR_(user_total_lost_rounds_, giftimg_onuse_);
  ZR_(chat_enable_, user_is_admin_);
  user_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_total_win_rounds_ = 0u;
  giftimg_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool UserBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_type;
        break;
      }

      // optional bytes user_type = 2;
      case 2: {
        if (tag == 18) {
         parse_user_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_name;
        break;
      }

      // optional string user_name = 4;
      case 4: {
        if (tag == 34) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UserBaseInfo.user_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_user_img_id;
        break;
      }

      // optional int32 user_img_id = 6;
      case 6: {
        if (tag == 48) {
         parse_user_img_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_img_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_user_sex;
        break;
      }

      // optional .UserSex user_sex = 7;
      case 7: {
        if (tag == 56) {
         parse_user_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_user_sex(static_cast< ::UserSex >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_user_total_chips;
        break;
      }

      // optional uint64 user_total_chips = 8;
      case 8: {
        if (tag == 64) {
         parse_user_total_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_total_chips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_user_total_coins;
        break;
      }

      // optional uint64 user_total_coins = 10;
      case 10: {
        if (tag == 80) {
         parse_user_total_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_total_coins_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_user_level;
        break;
      }

      // optional bytes user_level = 11;
      case 11: {
        if (tag == 90) {
         parse_user_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_level()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_user_total_win_rounds;
        break;
      }

      // optional uint32 user_total_win_rounds = 18;
      case 18: {
        if (tag == 144) {
         parse_user_total_win_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_total_win_rounds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_user_total_lost_rounds;
        break;
      }

      // optional uint32 user_total_lost_rounds = 19;
      case 19: {
        if (tag == 152) {
         parse_user_total_lost_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_total_lost_rounds_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_giftimg_onuse;
        break;
      }

      // optional uint32 giftimg_onuse = 20;
      case 20: {
        if (tag == 160) {
         parse_giftimg_onuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftimg_onuse_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_giftImg_url;
        break;
      }

      // optional string giftImg_url = 21;
      case 21: {
        if (tag == 170) {
         parse_giftImg_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftimg_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->giftimg_url().data(), this->giftimg_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UserBaseInfo.giftImg_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_user_head_url;
        break;
      }

      // optional string user_head_url = 35;
      case 35: {
        if (tag == 282) {
         parse_user_head_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_head_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_head_url().data(), this->user_head_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UserBaseInfo.user_head_url"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_chat_enable;
        break;
      }

      // optional bool chat_enable = 36;
      case 36: {
        if (tag == 288) {
         parse_chat_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_enable_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_user_is_admin;
        break;
      }

      // optional .User_role user_is_admin = 38;
      case 38: {
        if (tag == 304) {
         parse_user_is_admin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_user_is_admin(static_cast< ::User_role >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserBaseInfo)
  return false;
#undef DO_
}

void UserBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserBaseInfo)
  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional bytes user_type = 2;
  if (this->user_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_type(), output);
  }

  // optional string user_name = 4;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserBaseInfo.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_name(), output);
  }

  // optional int32 user_img_id = 6;
  if (this->user_img_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_img_id(), output);
  }

  // optional .UserSex user_sex = 7;
  if (this->user_sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->user_sex(), output);
  }

  // optional uint64 user_total_chips = 8;
  if (this->user_total_chips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->user_total_chips(), output);
  }

  // optional uint64 user_total_coins = 10;
  if (this->user_total_coins() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->user_total_coins(), output);
  }

  // optional bytes user_level = 11;
  if (this->user_level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->user_level(), output);
  }

  // optional uint32 user_total_win_rounds = 18;
  if (this->user_total_win_rounds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->user_total_win_rounds(), output);
  }

  // optional uint32 user_total_lost_rounds = 19;
  if (this->user_total_lost_rounds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->user_total_lost_rounds(), output);
  }

  // optional uint32 giftimg_onuse = 20;
  if (this->giftimg_onuse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->giftimg_onuse(), output);
  }

  // optional string giftImg_url = 21;
  if (this->giftimg_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->giftimg_url().data(), this->giftimg_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserBaseInfo.giftImg_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->giftimg_url(), output);
  }

  // optional string user_head_url = 35;
  if (this->user_head_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_head_url().data(), this->user_head_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserBaseInfo.user_head_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->user_head_url(), output);
  }

  // optional bool chat_enable = 36;
  if (this->chat_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->chat_enable(), output);
  }

  // optional .User_role user_is_admin = 38;
  if (this->user_is_admin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->user_is_admin(), output);
  }

  // @@protoc_insertion_point(serialize_end:UserBaseInfo)
}

::google::protobuf::uint8* UserBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserBaseInfo)
  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional bytes user_type = 2;
  if (this->user_type().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_type(), target);
  }

  // optional string user_name = 4;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserBaseInfo.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_name(), target);
  }

  // optional int32 user_img_id = 6;
  if (this->user_img_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_img_id(), target);
  }

  // optional .UserSex user_sex = 7;
  if (this->user_sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->user_sex(), target);
  }

  // optional uint64 user_total_chips = 8;
  if (this->user_total_chips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->user_total_chips(), target);
  }

  // optional uint64 user_total_coins = 10;
  if (this->user_total_coins() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->user_total_coins(), target);
  }

  // optional bytes user_level = 11;
  if (this->user_level().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->user_level(), target);
  }

  // optional uint32 user_total_win_rounds = 18;
  if (this->user_total_win_rounds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->user_total_win_rounds(), target);
  }

  // optional uint32 user_total_lost_rounds = 19;
  if (this->user_total_lost_rounds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->user_total_lost_rounds(), target);
  }

  // optional uint32 giftimg_onuse = 20;
  if (this->giftimg_onuse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->giftimg_onuse(), target);
  }

  // optional string giftImg_url = 21;
  if (this->giftimg_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->giftimg_url().data(), this->giftimg_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserBaseInfo.giftImg_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->giftimg_url(), target);
  }

  // optional string user_head_url = 35;
  if (this->user_head_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_head_url().data(), this->user_head_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UserBaseInfo.user_head_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->user_head_url(), target);
  }

  // optional bool chat_enable = 36;
  if (this->chat_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->chat_enable(), target);
  }

  // optional .User_role user_is_admin = 38;
  if (this->user_is_admin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->user_is_admin(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UserBaseInfo)
  return target;
}

int UserBaseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UserBaseInfo)
  int total_size = 0;

  // optional uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // optional bytes user_type = 2;
  if (this->user_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_type());
  }

  // optional string user_name = 4;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // optional .UserSex user_sex = 7;
  if (this->user_sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_sex());
  }

  // optional int32 user_img_id = 6;
  if (this->user_img_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->user_img_id());
  }

  // optional string user_head_url = 35;
  if (this->user_head_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_head_url());
  }

  // optional uint64 user_total_chips = 8;
  if (this->user_total_chips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_total_chips());
  }

  // optional uint64 user_total_coins = 10;
  if (this->user_total_coins() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_total_coins());
  }

  // optional bytes user_level = 11;
  if (this->user_level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->user_level());
  }

  // optional uint32 user_total_win_rounds = 18;
  if (this->user_total_win_rounds() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_total_win_rounds());
  }

  // optional uint32 user_total_lost_rounds = 19;
  if (this->user_total_lost_rounds() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_total_lost_rounds());
  }

  // optional uint32 giftimg_onuse = 20;
  if (this->giftimg_onuse() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->giftimg_onuse());
  }

  // optional string giftImg_url = 21;
  if (this->giftimg_url().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->giftimg_url());
  }

  // optional bool chat_enable = 36;
  if (this->chat_enable() != 0) {
    total_size += 2 + 1;
  }

  // optional .User_role user_is_admin = 38;
  if (this->user_is_admin() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_is_admin());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserBaseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserBaseInfo)
    MergeFrom(*source);
  }
}

void UserBaseInfo::MergeFrom(const UserBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type().size() > 0) {

    user_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_type_);
  }
  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.user_sex() != 0) {
    set_user_sex(from.user_sex());
  }
  if (from.user_img_id() != 0) {
    set_user_img_id(from.user_img_id());
  }
  if (from.user_head_url().size() > 0) {

    user_head_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_head_url_);
  }
  if (from.user_total_chips() != 0) {
    set_user_total_chips(from.user_total_chips());
  }
  if (from.user_total_coins() != 0) {
    set_user_total_coins(from.user_total_coins());
  }
  if (from.user_level().size() > 0) {

    user_level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_level_);
  }
  if (from.user_total_win_rounds() != 0) {
    set_user_total_win_rounds(from.user_total_win_rounds());
  }
  if (from.user_total_lost_rounds() != 0) {
    set_user_total_lost_rounds(from.user_total_lost_rounds());
  }
  if (from.giftimg_onuse() != 0) {
    set_giftimg_onuse(from.giftimg_onuse());
  }
  if (from.giftimg_url().size() > 0) {

    giftimg_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.giftimg_url_);
  }
  if (from.chat_enable() != 0) {
    set_chat_enable(from.chat_enable());
  }
  if (from.user_is_admin() != 0) {
    set_user_is_admin(from.user_is_admin());
  }
}

void UserBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBaseInfo::CopyFrom(const UserBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBaseInfo::IsInitialized() const {

  return true;
}

void UserBaseInfo::Swap(UserBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBaseInfo::InternalSwap(UserBaseInfo* other) {
  std::swap(user_id_, other->user_id_);
  user_type_.Swap(&other->user_type_);
  user_name_.Swap(&other->user_name_);
  std::swap(user_sex_, other->user_sex_);
  std::swap(user_img_id_, other->user_img_id_);
  user_head_url_.Swap(&other->user_head_url_);
  std::swap(user_total_chips_, other->user_total_chips_);
  std::swap(user_total_coins_, other->user_total_coins_);
  user_level_.Swap(&other->user_level_);
  std::swap(user_total_win_rounds_, other->user_total_win_rounds_);
  std::swap(user_total_lost_rounds_, other->user_total_lost_rounds_);
  std::swap(giftimg_onuse_, other->giftimg_onuse_);
  giftimg_url_.Swap(&other->giftimg_url_);
  std::swap(chat_enable_, other->chat_enable_);
  std::swap(user_is_admin_, other->user_is_admin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBaseInfo_descriptor_;
  metadata.reflection = UserBaseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserBaseInfo

// optional uint32 user_id = 1;
void UserBaseInfo::clear_user_id() {
  user_id_ = 0u;
}
 ::google::protobuf::uint32 UserBaseInfo::user_id() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_id)
  return user_id_;
}
 void UserBaseInfo::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_id)
}

// optional bytes user_type = 2;
void UserBaseInfo::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserBaseInfo::user_type() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_type)
  return user_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_type)
}
 void UserBaseInfo::set_user_type(const char* value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_type)
}
 void UserBaseInfo::set_user_type(const void* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_type)
}
 ::std::string* UserBaseInfo::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserBaseInfo::release_user_type() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_type)
}

// optional string user_name = 4;
void UserBaseInfo::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserBaseInfo::user_name() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_name)
}
 void UserBaseInfo::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_name)
}
 void UserBaseInfo::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_name)
}
 ::std::string* UserBaseInfo::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserBaseInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_name)
}

// optional .UserSex user_sex = 7;
void UserBaseInfo::clear_user_sex() {
  user_sex_ = 0;
}
 ::UserSex UserBaseInfo::user_sex() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_sex)
  return static_cast< ::UserSex >(user_sex_);
}
 void UserBaseInfo::set_user_sex(::UserSex value) {
  
  user_sex_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_sex)
}

// optional int32 user_img_id = 6;
void UserBaseInfo::clear_user_img_id() {
  user_img_id_ = 0;
}
 ::google::protobuf::int32 UserBaseInfo::user_img_id() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_img_id)
  return user_img_id_;
}
 void UserBaseInfo::set_user_img_id(::google::protobuf::int32 value) {
  
  user_img_id_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_img_id)
}

// optional string user_head_url = 35;
void UserBaseInfo::clear_user_head_url() {
  user_head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserBaseInfo::user_head_url() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_head_url)
  return user_head_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_user_head_url(const ::std::string& value) {
  
  user_head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_head_url)
}
 void UserBaseInfo::set_user_head_url(const char* value) {
  
  user_head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_head_url)
}
 void UserBaseInfo::set_user_head_url(const char* value, size_t size) {
  
  user_head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_head_url)
}
 ::std::string* UserBaseInfo::mutable_user_head_url() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_head_url)
  return user_head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserBaseInfo::release_user_head_url() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_head_url)
  
  return user_head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_allocated_user_head_url(::std::string* user_head_url) {
  if (user_head_url != NULL) {
    
  } else {
    
  }
  user_head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_head_url);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_head_url)
}

// optional uint64 user_total_chips = 8;
void UserBaseInfo::clear_user_total_chips() {
  user_total_chips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserBaseInfo::user_total_chips() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_chips)
  return user_total_chips_;
}
 void UserBaseInfo::set_user_total_chips(::google::protobuf::uint64 value) {
  
  user_total_chips_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_chips)
}

// optional uint64 user_total_coins = 10;
void UserBaseInfo::clear_user_total_coins() {
  user_total_coins_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserBaseInfo::user_total_coins() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_coins)
  return user_total_coins_;
}
 void UserBaseInfo::set_user_total_coins(::google::protobuf::uint64 value) {
  
  user_total_coins_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_coins)
}

// optional bytes user_level = 11;
void UserBaseInfo::clear_user_level() {
  user_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserBaseInfo::user_level() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_level)
  return user_level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_user_level(const ::std::string& value) {
  
  user_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_level)
}
 void UserBaseInfo::set_user_level(const char* value) {
  
  user_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_level)
}
 void UserBaseInfo::set_user_level(const void* value, size_t size) {
  
  user_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_level)
}
 ::std::string* UserBaseInfo::mutable_user_level() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_level)
  return user_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserBaseInfo::release_user_level() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_level)
  
  return user_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_allocated_user_level(::std::string* user_level) {
  if (user_level != NULL) {
    
  } else {
    
  }
  user_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_level);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_level)
}

// optional uint32 user_total_win_rounds = 18;
void UserBaseInfo::clear_user_total_win_rounds() {
  user_total_win_rounds_ = 0u;
}
 ::google::protobuf::uint32 UserBaseInfo::user_total_win_rounds() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_win_rounds)
  return user_total_win_rounds_;
}
 void UserBaseInfo::set_user_total_win_rounds(::google::protobuf::uint32 value) {
  
  user_total_win_rounds_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_win_rounds)
}

// optional uint32 user_total_lost_rounds = 19;
void UserBaseInfo::clear_user_total_lost_rounds() {
  user_total_lost_rounds_ = 0u;
}
 ::google::protobuf::uint32 UserBaseInfo::user_total_lost_rounds() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_lost_rounds)
  return user_total_lost_rounds_;
}
 void UserBaseInfo::set_user_total_lost_rounds(::google::protobuf::uint32 value) {
  
  user_total_lost_rounds_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_lost_rounds)
}

// optional uint32 giftimg_onuse = 20;
void UserBaseInfo::clear_giftimg_onuse() {
  giftimg_onuse_ = 0u;
}
 ::google::protobuf::uint32 UserBaseInfo::giftimg_onuse() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.giftimg_onuse)
  return giftimg_onuse_;
}
 void UserBaseInfo::set_giftimg_onuse(::google::protobuf::uint32 value) {
  
  giftimg_onuse_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.giftimg_onuse)
}

// optional string giftImg_url = 21;
void UserBaseInfo::clear_giftimg_url() {
  giftimg_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserBaseInfo::giftimg_url() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.giftImg_url)
  return giftimg_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_giftimg_url(const ::std::string& value) {
  
  giftimg_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.giftImg_url)
}
 void UserBaseInfo::set_giftimg_url(const char* value) {
  
  giftimg_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.giftImg_url)
}
 void UserBaseInfo::set_giftimg_url(const char* value, size_t size) {
  
  giftimg_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.giftImg_url)
}
 ::std::string* UserBaseInfo::mutable_giftimg_url() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.giftImg_url)
  return giftimg_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserBaseInfo::release_giftimg_url() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.giftImg_url)
  
  return giftimg_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserBaseInfo::set_allocated_giftimg_url(::std::string* giftimg_url) {
  if (giftimg_url != NULL) {
    
  } else {
    
  }
  giftimg_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), giftimg_url);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.giftImg_url)
}

// optional bool chat_enable = 36;
void UserBaseInfo::clear_chat_enable() {
  chat_enable_ = false;
}
 bool UserBaseInfo::chat_enable() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.chat_enable)
  return chat_enable_;
}
 void UserBaseInfo::set_chat_enable(bool value) {
  
  chat_enable_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.chat_enable)
}

// optional .User_role user_is_admin = 38;
void UserBaseInfo::clear_user_is_admin() {
  user_is_admin_ = 0;
}
 ::User_role UserBaseInfo::user_is_admin() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_is_admin)
  return static_cast< ::User_role >(user_is_admin_);
}
 void UserBaseInfo::set_user_is_admin(::User_role value) {
  
  user_is_admin_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_is_admin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyBaseInfo::kBaseInfoFieldNumber;
const int MyBaseInfo::kOnlineInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyBaseInfo::MyBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyBaseInfo)
}

void MyBaseInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  baseinfo_ = const_cast< ::UserBaseInfo*>(&::UserBaseInfo::default_instance());
  onlineinfo_ = const_cast< ::Online_Info*>(&::Online_Info::default_instance());
}

MyBaseInfo::MyBaseInfo(const MyBaseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyBaseInfo)
}

void MyBaseInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  baseinfo_ = NULL;
  onlineinfo_ = NULL;
}

MyBaseInfo::~MyBaseInfo() {
  // @@protoc_insertion_point(destructor:MyBaseInfo)
  SharedDtor();
}

void MyBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete onlineinfo_;
  }
}

void MyBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyBaseInfo_descriptor_;
}

const MyBaseInfo& MyBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

MyBaseInfo* MyBaseInfo::default_instance_ = NULL;

MyBaseInfo* MyBaseInfo::New(::google::protobuf::Arena* arena) const {
  MyBaseInfo* n = new MyBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MyBaseInfo)
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}

bool MyBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserBaseInfo baseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_onlineInfo;
        break;
      }

      // optional .Online_Info onlineInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_onlineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyBaseInfo)
  return false;
#undef DO_
}

void MyBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyBaseInfo)
  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseinfo_, output);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->onlineinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:MyBaseInfo)
}

::google::protobuf::uint8* MyBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyBaseInfo)
  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->baseinfo_, target);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->onlineinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyBaseInfo)
  return target;
}

int MyBaseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyBaseInfo)
  int total_size = 0;

  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseinfo_);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->onlineinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyBaseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyBaseInfo)
    MergeFrom(*source);
  }
}

void MyBaseInfo::MergeFrom(const MyBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_baseinfo()) {
    mutable_baseinfo()->::UserBaseInfo::MergeFrom(from.baseinfo());
  }
  if (from.has_onlineinfo()) {
    mutable_onlineinfo()->::Online_Info::MergeFrom(from.onlineinfo());
  }
}

void MyBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyBaseInfo::CopyFrom(const MyBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyBaseInfo::IsInitialized() const {

  return true;
}

void MyBaseInfo::Swap(MyBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyBaseInfo::InternalSwap(MyBaseInfo* other) {
  std::swap(baseinfo_, other->baseinfo_);
  std::swap(onlineinfo_, other->onlineinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyBaseInfo_descriptor_;
  metadata.reflection = MyBaseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyBaseInfo

// optional .UserBaseInfo baseInfo = 1;
bool MyBaseInfo::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
void MyBaseInfo::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
const ::UserBaseInfo& MyBaseInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:MyBaseInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
::UserBaseInfo* MyBaseInfo::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfo.baseInfo)
  return baseinfo_;
}
::UserBaseInfo* MyBaseInfo::release_baseinfo() {
  // @@protoc_insertion_point(field_release:MyBaseInfo.baseInfo)
  
  ::UserBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
void MyBaseInfo::set_allocated_baseinfo(::UserBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfo.baseInfo)
}

// optional .Online_Info onlineInfo = 2;
bool MyBaseInfo::has_onlineinfo() const {
  return !_is_default_instance_ && onlineinfo_ != NULL;
}
void MyBaseInfo::clear_onlineinfo() {
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}
const ::Online_Info& MyBaseInfo::onlineinfo() const {
  // @@protoc_insertion_point(field_get:MyBaseInfo.onlineInfo)
  return onlineinfo_ != NULL ? *onlineinfo_ : *default_instance_->onlineinfo_;
}
::Online_Info* MyBaseInfo::mutable_onlineinfo() {
  
  if (onlineinfo_ == NULL) {
    onlineinfo_ = new ::Online_Info;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfo.onlineInfo)
  return onlineinfo_;
}
::Online_Info* MyBaseInfo::release_onlineinfo() {
  // @@protoc_insertion_point(field_release:MyBaseInfo.onlineInfo)
  
  ::Online_Info* temp = onlineinfo_;
  onlineinfo_ = NULL;
  return temp;
}
void MyBaseInfo::set_allocated_onlineinfo(::Online_Info* onlineinfo) {
  delete onlineinfo_;
  onlineinfo_ = onlineinfo;
  if (onlineinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfo.onlineInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyAllInfo::kBaseInfoFieldNumber;
const int MyAllInfo::kOnlineInfoFieldNumber;
const int MyAllInfo::kExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyAllInfo::MyAllInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyAllInfo)
}

void MyAllInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  baseinfo_ = const_cast< ::UserBaseInfo*>(&::UserBaseInfo::default_instance());
  onlineinfo_ = const_cast< ::Online_Info*>(&::Online_Info::default_instance());
  extinfo_ = const_cast< ::UserExtInfo*>(&::UserExtInfo::default_instance());
}

MyAllInfo::MyAllInfo(const MyAllInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyAllInfo)
}

void MyAllInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  baseinfo_ = NULL;
  onlineinfo_ = NULL;
  extinfo_ = NULL;
}

MyAllInfo::~MyAllInfo() {
  // @@protoc_insertion_point(destructor:MyAllInfo)
  SharedDtor();
}

void MyAllInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete onlineinfo_;
    delete extinfo_;
  }
}

void MyAllInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyAllInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyAllInfo_descriptor_;
}

const MyAllInfo& MyAllInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

MyAllInfo* MyAllInfo::default_instance_ = NULL;

MyAllInfo* MyAllInfo::New(::google::protobuf::Arena* arena) const {
  MyAllInfo* n = new MyAllInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyAllInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MyAllInfo)
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && extinfo_ != NULL) delete extinfo_;
  extinfo_ = NULL;
}

bool MyAllInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyAllInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserBaseInfo baseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_onlineInfo;
        break;
      }

      // optional .Online_Info onlineInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_onlineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_extInfo;
        break;
      }

      // optional .UserExtInfo extInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_extInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyAllInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyAllInfo)
  return false;
#undef DO_
}

void MyAllInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyAllInfo)
  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseinfo_, output);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->onlineinfo_, output);
  }

  // optional .UserExtInfo extInfo = 3;
  if (this->has_extinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->extinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:MyAllInfo)
}

::google::protobuf::uint8* MyAllInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyAllInfo)
  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->baseinfo_, target);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->onlineinfo_, target);
  }

  // optional .UserExtInfo extInfo = 3;
  if (this->has_extinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->extinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyAllInfo)
  return target;
}

int MyAllInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyAllInfo)
  int total_size = 0;

  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseinfo_);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->onlineinfo_);
  }

  // optional .UserExtInfo extInfo = 3;
  if (this->has_extinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyAllInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyAllInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyAllInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyAllInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyAllInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyAllInfo)
    MergeFrom(*source);
  }
}

void MyAllInfo::MergeFrom(const MyAllInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyAllInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_baseinfo()) {
    mutable_baseinfo()->::UserBaseInfo::MergeFrom(from.baseinfo());
  }
  if (from.has_onlineinfo()) {
    mutable_onlineinfo()->::Online_Info::MergeFrom(from.onlineinfo());
  }
  if (from.has_extinfo()) {
    mutable_extinfo()->::UserExtInfo::MergeFrom(from.extinfo());
  }
}

void MyAllInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyAllInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyAllInfo::CopyFrom(const MyAllInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyAllInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyAllInfo::IsInitialized() const {

  return true;
}

void MyAllInfo::Swap(MyAllInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyAllInfo::InternalSwap(MyAllInfo* other) {
  std::swap(baseinfo_, other->baseinfo_);
  std::swap(onlineinfo_, other->onlineinfo_);
  std::swap(extinfo_, other->extinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyAllInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyAllInfo_descriptor_;
  metadata.reflection = MyAllInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyAllInfo

// optional .UserBaseInfo baseInfo = 1;
bool MyAllInfo::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
void MyAllInfo::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
const ::UserBaseInfo& MyAllInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:MyAllInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
::UserBaseInfo* MyAllInfo::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfo.baseInfo)
  return baseinfo_;
}
::UserBaseInfo* MyAllInfo::release_baseinfo() {
  // @@protoc_insertion_point(field_release:MyAllInfo.baseInfo)
  
  ::UserBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
void MyAllInfo::set_allocated_baseinfo(::UserBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfo.baseInfo)
}

// optional .Online_Info onlineInfo = 2;
bool MyAllInfo::has_onlineinfo() const {
  return !_is_default_instance_ && onlineinfo_ != NULL;
}
void MyAllInfo::clear_onlineinfo() {
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}
const ::Online_Info& MyAllInfo::onlineinfo() const {
  // @@protoc_insertion_point(field_get:MyAllInfo.onlineInfo)
  return onlineinfo_ != NULL ? *onlineinfo_ : *default_instance_->onlineinfo_;
}
::Online_Info* MyAllInfo::mutable_onlineinfo() {
  
  if (onlineinfo_ == NULL) {
    onlineinfo_ = new ::Online_Info;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfo.onlineInfo)
  return onlineinfo_;
}
::Online_Info* MyAllInfo::release_onlineinfo() {
  // @@protoc_insertion_point(field_release:MyAllInfo.onlineInfo)
  
  ::Online_Info* temp = onlineinfo_;
  onlineinfo_ = NULL;
  return temp;
}
void MyAllInfo::set_allocated_onlineinfo(::Online_Info* onlineinfo) {
  delete onlineinfo_;
  onlineinfo_ = onlineinfo;
  if (onlineinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfo.onlineInfo)
}

// optional .UserExtInfo extInfo = 3;
bool MyAllInfo::has_extinfo() const {
  return !_is_default_instance_ && extinfo_ != NULL;
}
void MyAllInfo::clear_extinfo() {
  if (GetArenaNoVirtual() == NULL && extinfo_ != NULL) delete extinfo_;
  extinfo_ = NULL;
}
const ::UserExtInfo& MyAllInfo::extinfo() const {
  // @@protoc_insertion_point(field_get:MyAllInfo.extInfo)
  return extinfo_ != NULL ? *extinfo_ : *default_instance_->extinfo_;
}
::UserExtInfo* MyAllInfo::mutable_extinfo() {
  
  if (extinfo_ == NULL) {
    extinfo_ = new ::UserExtInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfo.extInfo)
  return extinfo_;
}
::UserExtInfo* MyAllInfo::release_extinfo() {
  // @@protoc_insertion_point(field_release:MyAllInfo.extInfo)
  
  ::UserExtInfo* temp = extinfo_;
  extinfo_ = NULL;
  return temp;
}
void MyAllInfo::set_allocated_extinfo(::UserExtInfo* extinfo) {
  delete extinfo_;
  extinfo_ = extinfo;
  if (extinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfo.extInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendBaseInfo::kBaseInfoFieldNumber;
const int FriendBaseInfo::kOnlineInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendBaseInfo::FriendBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FriendBaseInfo)
}

void FriendBaseInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  baseinfo_ = const_cast< ::UserBaseInfo*>(&::UserBaseInfo::default_instance());
  onlineinfo_ = const_cast< ::Online_Info*>(&::Online_Info::default_instance());
}

FriendBaseInfo::FriendBaseInfo(const FriendBaseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FriendBaseInfo)
}

void FriendBaseInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  baseinfo_ = NULL;
  onlineinfo_ = NULL;
}

FriendBaseInfo::~FriendBaseInfo() {
  // @@protoc_insertion_point(destructor:FriendBaseInfo)
  SharedDtor();
}

void FriendBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete onlineinfo_;
  }
}

void FriendBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendBaseInfo_descriptor_;
}

const FriendBaseInfo& FriendBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

FriendBaseInfo* FriendBaseInfo::default_instance_ = NULL;

FriendBaseInfo* FriendBaseInfo::New(::google::protobuf::Arena* arena) const {
  FriendBaseInfo* n = new FriendBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:FriendBaseInfo)
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}

bool FriendBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FriendBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .UserBaseInfo baseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_onlineInfo;
        break;
      }

      // optional .Online_Info onlineInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_onlineInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlineinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FriendBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FriendBaseInfo)
  return false;
#undef DO_
}

void FriendBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FriendBaseInfo)
  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->baseinfo_, output);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->onlineinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:FriendBaseInfo)
}

::google::protobuf::uint8* FriendBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FriendBaseInfo)
  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->baseinfo_, target);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->onlineinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FriendBaseInfo)
  return target;
}

int FriendBaseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FriendBaseInfo)
  int total_size = 0;

  // optional .UserBaseInfo baseInfo = 1;
  if (this->has_baseinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseinfo_);
  }

  // optional .Online_Info onlineInfo = 2;
  if (this->has_onlineinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->onlineinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FriendBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FriendBaseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FriendBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FriendBaseInfo)
    MergeFrom(*source);
  }
}

void FriendBaseInfo::MergeFrom(const FriendBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FriendBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_baseinfo()) {
    mutable_baseinfo()->::UserBaseInfo::MergeFrom(from.baseinfo());
  }
  if (from.has_onlineinfo()) {
    mutable_onlineinfo()->::Online_Info::MergeFrom(from.onlineinfo());
  }
}

void FriendBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FriendBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendBaseInfo::CopyFrom(const FriendBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FriendBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendBaseInfo::IsInitialized() const {

  return true;
}

void FriendBaseInfo::Swap(FriendBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendBaseInfo::InternalSwap(FriendBaseInfo* other) {
  std::swap(baseinfo_, other->baseinfo_);
  std::swap(onlineinfo_, other->onlineinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendBaseInfo_descriptor_;
  metadata.reflection = FriendBaseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendBaseInfo

// optional .UserBaseInfo baseInfo = 1;
bool FriendBaseInfo::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
void FriendBaseInfo::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
const ::UserBaseInfo& FriendBaseInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:FriendBaseInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
::UserBaseInfo* FriendBaseInfo::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:FriendBaseInfo.baseInfo)
  return baseinfo_;
}
::UserBaseInfo* FriendBaseInfo::release_baseinfo() {
  // @@protoc_insertion_point(field_release:FriendBaseInfo.baseInfo)
  
  ::UserBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
void FriendBaseInfo::set_allocated_baseinfo(::UserBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FriendBaseInfo.baseInfo)
}

// optional .Online_Info onlineInfo = 2;
bool FriendBaseInfo::has_onlineinfo() const {
  return !_is_default_instance_ && onlineinfo_ != NULL;
}
void FriendBaseInfo::clear_onlineinfo() {
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}
const ::Online_Info& FriendBaseInfo::onlineinfo() const {
  // @@protoc_insertion_point(field_get:FriendBaseInfo.onlineInfo)
  return onlineinfo_ != NULL ? *onlineinfo_ : *default_instance_->onlineinfo_;
}
::Online_Info* FriendBaseInfo::mutable_onlineinfo() {
  
  if (onlineinfo_ == NULL) {
    onlineinfo_ = new ::Online_Info;
  }
  // @@protoc_insertion_point(field_mutable:FriendBaseInfo.onlineInfo)
  return onlineinfo_;
}
::Online_Info* FriendBaseInfo::release_onlineinfo() {
  // @@protoc_insertion_point(field_release:FriendBaseInfo.onlineInfo)
  
  ::Online_Info* temp = onlineinfo_;
  onlineinfo_ = NULL;
  return temp;
}
void FriendBaseInfo::set_allocated_onlineinfo(::Online_Info* onlineinfo) {
  delete onlineinfo_;
  onlineinfo_ = onlineinfo;
  if (onlineinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FriendBaseInfo.onlineInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatusResponse::kHeadFieldNumber;
const int StatusResponse::kStatusFieldNumber;
const int StatusResponse::kExt1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatusResponse::StatusResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StatusResponse)
}

void StatusResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete head_;
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New(::google::protobuf::Arena* arena) const {
  StatusResponse* n = new StatusResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ext1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional bytes status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ext1;
        break;
      }

      // optional string ext1 = 3;
      case 3: {
        if (tag == 26) {
         parse_ext1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ext1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ext1().data(), this->ext1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "StatusResponse.ext1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StatusResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional bytes status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->status(), output);
  }

  // optional string ext1 = 3;
  if (this->ext1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext1().data(), this->ext1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusResponse.ext1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ext1(), output);
  }

  // @@protoc_insertion_point(serialize_end:StatusResponse)
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional bytes status = 2;
  if (this->status().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->status(), target);
  }

  // optional string ext1 = 3;
  if (this->ext1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ext1().data(), this->ext1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "StatusResponse.ext1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ext1(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:StatusResponse)
  return target;
}

int StatusResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:StatusResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional bytes status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->status());
  }

  // optional string ext1 = 3;
  if (this->ext1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ext1());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StatusResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StatusResponse)
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StatusResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.ext1().size() > 0) {

    ext1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ext1_);
  }
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusResponse::InternalSwap(StatusResponse* other) {
  std::swap(head_, other->head_);
  status_.Swap(&other->status_);
  ext1_.Swap(&other->ext1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusResponse

// optional .ResponseHeader head = 1;
bool StatusResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void StatusResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& StatusResponse::head() const {
  // @@protoc_insertion_point(field_get:StatusResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* StatusResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:StatusResponse.head)
  return head_;
}
::ResponseHeader* StatusResponse::release_head() {
  // @@protoc_insertion_point(field_release:StatusResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void StatusResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.head)
}

// optional bytes status = 2;
void StatusResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:StatusResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusResponse.status)
}
 void StatusResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusResponse.status)
}
 void StatusResponse::set_status(const void* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusResponse.status)
}
 ::std::string* StatusResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:StatusResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:StatusResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.status)
}

// optional string ext1 = 3;
void StatusResponse::clear_ext1() {
  ext1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusResponse::ext1() const {
  // @@protoc_insertion_point(field_get:StatusResponse.ext1)
  return ext1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_ext1(const ::std::string& value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusResponse.ext1)
}
 void StatusResponse::set_ext1(const char* value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusResponse.ext1)
}
 void StatusResponse::set_ext1(const char* value, size_t size) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusResponse.ext1)
}
 ::std::string* StatusResponse::mutable_ext1() {
  
  // @@protoc_insertion_point(field_mutable:StatusResponse.ext1)
  return ext1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusResponse::release_ext1() {
  // @@protoc_insertion_point(field_release:StatusResponse.ext1)
  
  return ext1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusResponse::set_allocated_ext1(::std::string* ext1) {
  if (ext1 != NULL) {
    
  } else {
    
  }
  ext1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext1);
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.ext1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyBaseInfoResponse::kHeadFieldNumber;
const int MyBaseInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyBaseInfoResponse::MyBaseInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyBaseInfoResponse)
}

void MyBaseInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
  info_ = const_cast< ::MyBaseInfo*>(&::MyBaseInfo::default_instance());
}

MyBaseInfoResponse::MyBaseInfoResponse(const MyBaseInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyBaseInfoResponse)
}

void MyBaseInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  info_ = NULL;
}

MyBaseInfoResponse::~MyBaseInfoResponse() {
  // @@protoc_insertion_point(destructor:MyBaseInfoResponse)
  SharedDtor();
}

void MyBaseInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete info_;
  }
}

void MyBaseInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyBaseInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyBaseInfoResponse_descriptor_;
}

const MyBaseInfoResponse& MyBaseInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

MyBaseInfoResponse* MyBaseInfoResponse::default_instance_ = NULL;

MyBaseInfoResponse* MyBaseInfoResponse::New(::google::protobuf::Arena* arena) const {
  MyBaseInfoResponse* n = new MyBaseInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyBaseInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MyBaseInfoResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool MyBaseInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyBaseInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .MyBaseInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyBaseInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyBaseInfoResponse)
  return false;
#undef DO_
}

void MyBaseInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyBaseInfoResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional .MyBaseInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:MyBaseInfoResponse)
}

::google::protobuf::uint8* MyBaseInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyBaseInfoResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional .MyBaseInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->info_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyBaseInfoResponse)
  return target;
}

int MyBaseInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyBaseInfoResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional .MyBaseInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyBaseInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyBaseInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyBaseInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyBaseInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyBaseInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyBaseInfoResponse)
    MergeFrom(*source);
  }
}

void MyBaseInfoResponse::MergeFrom(const MyBaseInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyBaseInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.has_info()) {
    mutable_info()->::MyBaseInfo::MergeFrom(from.info());
  }
}

void MyBaseInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyBaseInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyBaseInfoResponse::CopyFrom(const MyBaseInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyBaseInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyBaseInfoResponse::IsInitialized() const {

  return true;
}

void MyBaseInfoResponse::Swap(MyBaseInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyBaseInfoResponse::InternalSwap(MyBaseInfoResponse* other) {
  std::swap(head_, other->head_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyBaseInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyBaseInfoResponse_descriptor_;
  metadata.reflection = MyBaseInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyBaseInfoResponse

// optional .ResponseHeader head = 1;
bool MyBaseInfoResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void MyBaseInfoResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& MyBaseInfoResponse::head() const {
  // @@protoc_insertion_point(field_get:MyBaseInfoResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* MyBaseInfoResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfoResponse.head)
  return head_;
}
::ResponseHeader* MyBaseInfoResponse::release_head() {
  // @@protoc_insertion_point(field_release:MyBaseInfoResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MyBaseInfoResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfoResponse.head)
}

// optional .MyBaseInfo info = 2;
bool MyBaseInfoResponse::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void MyBaseInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::MyBaseInfo& MyBaseInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:MyBaseInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::MyBaseInfo* MyBaseInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::MyBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfoResponse.info)
  return info_;
}
::MyBaseInfo* MyBaseInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:MyBaseInfoResponse.info)
  
  ::MyBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void MyBaseInfoResponse::set_allocated_info(::MyBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfoResponse.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyAllInfoResponse::kHeadFieldNumber;
const int MyAllInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyAllInfoResponse::MyAllInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyAllInfoResponse)
}

void MyAllInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
  info_ = const_cast< ::MyAllInfo*>(&::MyAllInfo::default_instance());
}

MyAllInfoResponse::MyAllInfoResponse(const MyAllInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyAllInfoResponse)
}

void MyAllInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  info_ = NULL;
}

MyAllInfoResponse::~MyAllInfoResponse() {
  // @@protoc_insertion_point(destructor:MyAllInfoResponse)
  SharedDtor();
}

void MyAllInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete info_;
  }
}

void MyAllInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyAllInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyAllInfoResponse_descriptor_;
}

const MyAllInfoResponse& MyAllInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

MyAllInfoResponse* MyAllInfoResponse::default_instance_ = NULL;

MyAllInfoResponse* MyAllInfoResponse::New(::google::protobuf::Arena* arena) const {
  MyAllInfoResponse* n = new MyAllInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyAllInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:MyAllInfoResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool MyAllInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyAllInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .MyAllInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyAllInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyAllInfoResponse)
  return false;
#undef DO_
}

void MyAllInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyAllInfoResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional .MyAllInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:MyAllInfoResponse)
}

::google::protobuf::uint8* MyAllInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyAllInfoResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional .MyAllInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->info_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MyAllInfoResponse)
  return target;
}

int MyAllInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MyAllInfoResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional .MyAllInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyAllInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyAllInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyAllInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyAllInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyAllInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyAllInfoResponse)
    MergeFrom(*source);
  }
}

void MyAllInfoResponse::MergeFrom(const MyAllInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyAllInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.has_info()) {
    mutable_info()->::MyAllInfo::MergeFrom(from.info());
  }
}

void MyAllInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyAllInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyAllInfoResponse::CopyFrom(const MyAllInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyAllInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyAllInfoResponse::IsInitialized() const {

  return true;
}

void MyAllInfoResponse::Swap(MyAllInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyAllInfoResponse::InternalSwap(MyAllInfoResponse* other) {
  std::swap(head_, other->head_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyAllInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyAllInfoResponse_descriptor_;
  metadata.reflection = MyAllInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyAllInfoResponse

// optional .ResponseHeader head = 1;
bool MyAllInfoResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void MyAllInfoResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& MyAllInfoResponse::head() const {
  // @@protoc_insertion_point(field_get:MyAllInfoResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* MyAllInfoResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfoResponse.head)
  return head_;
}
::ResponseHeader* MyAllInfoResponse::release_head() {
  // @@protoc_insertion_point(field_release:MyAllInfoResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void MyAllInfoResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfoResponse.head)
}

// optional .MyAllInfo info = 2;
bool MyAllInfoResponse::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void MyAllInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::MyAllInfo& MyAllInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:MyAllInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::MyAllInfo* MyAllInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::MyAllInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfoResponse.info)
  return info_;
}
::MyAllInfo* MyAllInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:MyAllInfoResponse.info)
  
  ::MyAllInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void MyAllInfoResponse::set_allocated_info(::MyAllInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfoResponse.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoRequest::kBasicFieldNumber;
const int PlayerInfoRequest::kPlayeruidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoRequest::PlayerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoRequest)
}

void PlayerInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  basic_ = const_cast< ::CommonRequest*>(&::CommonRequest::default_instance());
}

PlayerInfoRequest::PlayerInfoRequest(const PlayerInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoRequest)
}

void PlayerInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  basic_ = NULL;
  playeruid_ = 0u;
}

PlayerInfoRequest::~PlayerInfoRequest() {
  // @@protoc_insertion_point(destructor:PlayerInfoRequest)
  SharedDtor();
}

void PlayerInfoRequest::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void PlayerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoRequest_descriptor_;
}

const PlayerInfoRequest& PlayerInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

PlayerInfoRequest* PlayerInfoRequest::default_instance_ = NULL;

PlayerInfoRequest* PlayerInfoRequest::New(::google::protobuf::Arena* arena) const {
  PlayerInfoRequest* n = new PlayerInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoRequest)
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) delete basic_;
  basic_ = NULL;
  playeruid_ = 0u;
}

bool PlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CommonRequest basic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_playeruid;
        break;
      }

      // optional uint32 playeruid = 2;
      case 2: {
        if (tag == 16) {
         parse_playeruid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playeruid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoRequest)
  return false;
#undef DO_
}

void PlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoRequest)
  // optional .CommonRequest basic = 1;
  if (this->has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->basic_, output);
  }

  // optional uint32 playeruid = 2;
  if (this->playeruid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playeruid(), output);
  }

  // @@protoc_insertion_point(serialize_end:PlayerInfoRequest)
}

::google::protobuf::uint8* PlayerInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoRequest)
  // optional .CommonRequest basic = 1;
  if (this->has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->basic_, target);
  }

  // optional uint32 playeruid = 2;
  if (this->playeruid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playeruid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoRequest)
  return target;
}

int PlayerInfoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoRequest)
  int total_size = 0;

  // optional .CommonRequest basic = 1;
  if (this->has_basic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->basic_);
  }

  // optional uint32 playeruid = 2;
  if (this->playeruid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->playeruid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerInfoRequest)
    MergeFrom(*source);
  }
}

void PlayerInfoRequest::MergeFrom(const PlayerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_basic()) {
    mutable_basic()->::CommonRequest::MergeFrom(from.basic());
  }
  if (from.playeruid() != 0) {
    set_playeruid(from.playeruid());
  }
}

void PlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoRequest::CopyFrom(const PlayerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoRequest::IsInitialized() const {

  return true;
}

void PlayerInfoRequest::Swap(PlayerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoRequest::InternalSwap(PlayerInfoRequest* other) {
  std::swap(basic_, other->basic_);
  std::swap(playeruid_, other->playeruid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoRequest_descriptor_;
  metadata.reflection = PlayerInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoRequest

// optional .CommonRequest basic = 1;
bool PlayerInfoRequest::has_basic() const {
  return !_is_default_instance_ && basic_ != NULL;
}
void PlayerInfoRequest::clear_basic() {
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) delete basic_;
  basic_ = NULL;
}
const ::CommonRequest& PlayerInfoRequest::basic() const {
  // @@protoc_insertion_point(field_get:PlayerInfoRequest.basic)
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
::CommonRequest* PlayerInfoRequest::mutable_basic() {
  
  if (basic_ == NULL) {
    basic_ = new ::CommonRequest;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoRequest.basic)
  return basic_;
}
::CommonRequest* PlayerInfoRequest::release_basic() {
  // @@protoc_insertion_point(field_release:PlayerInfoRequest.basic)
  
  ::CommonRequest* temp = basic_;
  basic_ = NULL;
  return temp;
}
void PlayerInfoRequest::set_allocated_basic(::CommonRequest* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoRequest.basic)
}

// optional uint32 playeruid = 2;
void PlayerInfoRequest::clear_playeruid() {
  playeruid_ = 0u;
}
 ::google::protobuf::uint32 PlayerInfoRequest::playeruid() const {
  // @@protoc_insertion_point(field_get:PlayerInfoRequest.playeruid)
  return playeruid_;
}
 void PlayerInfoRequest::set_playeruid(::google::protobuf::uint32 value) {
  
  playeruid_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfoRequest.playeruid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoResponse::kHeadFieldNumber;
const int PlayerInfoResponse::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoResponse::PlayerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerInfoResponse)
}

void PlayerInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
  info_ = const_cast< ::UserBaseInfo*>(&::UserBaseInfo::default_instance());
}

PlayerInfoResponse::PlayerInfoResponse(const PlayerInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PlayerInfoResponse)
}

void PlayerInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  info_ = NULL;
}

PlayerInfoResponse::~PlayerInfoResponse() {
  // @@protoc_insertion_point(destructor:PlayerInfoResponse)
  SharedDtor();
}

void PlayerInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete info_;
  }
}

void PlayerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoResponse_descriptor_;
}

const PlayerInfoResponse& PlayerInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

PlayerInfoResponse* PlayerInfoResponse::default_instance_ = NULL;

PlayerInfoResponse* PlayerInfoResponse::New(::google::protobuf::Arena* arena) const {
  PlayerInfoResponse* n = new PlayerInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerInfoResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}

bool PlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PlayerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .UserBaseInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PlayerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PlayerInfoResponse)
  return false;
#undef DO_
}

void PlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PlayerInfoResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional .UserBaseInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->info_, output);
  }

  // @@protoc_insertion_point(serialize_end:PlayerInfoResponse)
}

::google::protobuf::uint8* PlayerInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerInfoResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional .UserBaseInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->info_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PlayerInfoResponse)
  return target;
}

int PlayerInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerInfoResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional .UserBaseInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerInfoResponse)
    MergeFrom(*source);
  }
}

void PlayerInfoResponse::MergeFrom(const PlayerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.has_info()) {
    mutable_info()->::UserBaseInfo::MergeFrom(from.info());
  }
}

void PlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoResponse::CopyFrom(const PlayerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoResponse::IsInitialized() const {

  return true;
}

void PlayerInfoResponse::Swap(PlayerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoResponse::InternalSwap(PlayerInfoResponse* other) {
  std::swap(head_, other->head_);
  std::swap(info_, other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoResponse_descriptor_;
  metadata.reflection = PlayerInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoResponse

// optional .ResponseHeader head = 1;
bool PlayerInfoResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void PlayerInfoResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& PlayerInfoResponse::head() const {
  // @@protoc_insertion_point(field_get:PlayerInfoResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* PlayerInfoResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoResponse.head)
  return head_;
}
::ResponseHeader* PlayerInfoResponse::release_head() {
  // @@protoc_insertion_point(field_release:PlayerInfoResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void PlayerInfoResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoResponse.head)
}

// optional .UserBaseInfo info = 2;
bool PlayerInfoResponse::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
void PlayerInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
const ::UserBaseInfo& PlayerInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:PlayerInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
::UserBaseInfo* PlayerInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoResponse.info)
  return info_;
}
::UserBaseInfo* PlayerInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:PlayerInfoResponse.info)
  
  ::UserBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void PlayerInfoResponse::set_allocated_info(::UserBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoResponse.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
