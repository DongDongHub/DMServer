// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomCfgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCfgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameConfigResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameConfigResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameConfigResponse_RoomlimitEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GameConfigResponse_RoomTitleEntry_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequst_descriptor_ = file->message_type(0);
  static const int LoginRequst_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, userpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, headurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, languige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, version_),
  };
  LoginRequst_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRequst_descriptor_,
      LoginRequst::default_instance_,
      LoginRequst_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRequst),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequst, _is_default_instance_));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, isregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, baseinfo_),
  };
  LoginResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _is_default_instance_));
  RoomCfgData_descriptor_ = file->message_type(2);
  static const int RoomCfgData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, m_blind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, m_minblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, m_maxblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, m_playnowminblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, m_playnowmaxblind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, m_roomlevel_),
  };
  RoomCfgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomCfgData_descriptor_,
      RoomCfgData::default_instance_,
      RoomCfgData_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomCfgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCfgData, _is_default_instance_));
  GameConfigResponse_descriptor_ = file->message_type(3);
  static const int GameConfigResponse_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, primary_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, middle_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, hight_chips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, roomlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, room_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, face_cost_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, logintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, openping_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, openboxaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, rulesver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, sharesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, maxfriendnum_),
  };
  GameConfigResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameConfigResponse_descriptor_,
      GameConfigResponse::default_instance_,
      GameConfigResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameConfigResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameConfigResponse, _is_default_instance_));
  GameConfigResponse_RoomlimitEntry_descriptor_ = GameConfigResponse_descriptor_->nested_type(0);
  GameConfigResponse_RoomTitleEntry_descriptor_ = GameConfigResponse_descriptor_->nested_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRequst_descriptor_, &LoginRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomCfgData_descriptor_, &RoomCfgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameConfigResponse_descriptor_, &GameConfigResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GameConfigResponse_RoomlimitEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::RoomCfgData,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GameConfigResponse_RoomlimitEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GameConfigResponse_RoomTitleEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::uint32,
            ::std::string,
            ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            0>::CreateDefaultInstance(
                GameConfigResponse_RoomTitleEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  delete LoginRequst::default_instance_;
  delete LoginRequst_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete RoomCfgData::default_instance_;
  delete RoomCfgData_reflection_;
  delete GameConfigResponse::default_instance_;
  delete GameConfigResponse_reflection_;
}

void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Basic_2eproto();
  ::protobuf_AddDesc_User_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\032\013Basic.proto\032\nUser.proto\"\336"
    "\001\n\013LoginRequst\022\034\n\004head\030\001 \001(\0132\016.CommonReq"
    "uest\022\021\n\taccountid\030\002 \001(\t\022\020\n\010username\030\003 \001("
    "\t\022\017\n\007userpwd\030\004 \001(\t\022\025\n\003sex\030\005 \001(\0162\010.UserSe"
    "x\022\017\n\007headurl\030\006 \001(\t\022\r\n\005email\030\007 \001(\t\022\020\n\010use"
    "rType\030\010 \001(\014\022\017\n\007channel\030\t \001(\r\022\020\n\010languige"
    "\030\n \001(\r\022\017\n\007version\030\013 \001(\t\"a\n\rLoginResponse"
    "\022\035\n\004head\030\001 \001(\0132\017.ResponseHeader\022\022\n\nisReg"
    "ister\030\002 \001(\010\022\035\n\010baseinfo\030\003 \001(\0132\013.MyBaseIn"
    "fo\"\221\001\n\013RoomCfgData\022\017\n\007m_blind\030\001 \001(\004\022\022\n\nm"
    "_minBlind\030\002 \001(\004\022\022\n\nm_maxBlind\030\003 \001(\004\022\031\n\021m"
    "_playnowMinBlind\030\004 \001(\004\022\031\n\021m_playnowMaxBl"
    "ind\030\005 \001(\004\022\023\n\013m_roomLevel\030\006 \001(\r\"\344\003\n\022GameC"
    "onfigResponse\022\035\n\004head\030\001 \001(\0132\017.ResponseHe"
    "ader\022\025\n\rprimary_chips\030\002 \001(\004\022\024\n\014middle_ch"
    "ips\030\003 \001(\004\022\023\n\013hight_chips\030\004 \001(\004\0225\n\troomli"
    "mit\030\005 \003(\0132\".GameConfigResponse.Roomlimit"
    "Entry\0226\n\nroom_title\030\006 \003(\0132\".GameConfigRe"
    "sponse.RoomTitleEntry\022\027\n\017face_cost_ratio"
    "\030\007 \001(\r\022\022\n\nloginTimes\030\010 \001(\r\022\020\n\010openPing\030\t"
    " \001(\010\022\024\n\014openBoxAward\030\n \001(\010\022\020\n\010rulesVer\030\013"
    " \001(\014\022\017\n\007shareSc\030\014 \001(\r\022\024\n\014maxFriendnum\030\r "
    "\001(\r\032>\n\016RoomlimitEntry\022\013\n\003key\030\001 \001(\t\022\033\n\005va"
    "lue\030\002 \001(\0132\014.RoomCfgData:\0028\001\0320\n\016RoomTitle"
    "Entry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\t:\0028\001b\006p"
    "roto3", 1005);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  LoginRequst::default_instance_ = new LoginRequst();
  LoginResponse::default_instance_ = new LoginResponse();
  RoomCfgData::default_instance_ = new RoomCfgData();
  GameConfigResponse::default_instance_ = new GameConfigResponse();
  LoginRequst::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  RoomCfgData::default_instance_->InitAsDefaultInstance();
  GameConfigResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequst::kHeadFieldNumber;
const int LoginRequst::kAccountidFieldNumber;
const int LoginRequst::kUsernameFieldNumber;
const int LoginRequst::kUserpwdFieldNumber;
const int LoginRequst::kSexFieldNumber;
const int LoginRequst::kHeadurlFieldNumber;
const int LoginRequst::kEmailFieldNumber;
const int LoginRequst::kUserTypeFieldNumber;
const int LoginRequst::kChannelFieldNumber;
const int LoginRequst::kLanguigeFieldNumber;
const int LoginRequst::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequst::LoginRequst()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRequst)
}

void LoginRequst::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::CommonRequest*>(&::CommonRequest::default_instance());
}

LoginRequst::LoginRequst(const LoginRequst& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginRequst)
}

void LoginRequst::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  headurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
  languige_ = 0u;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequst::~LoginRequst() {
  // @@protoc_insertion_point(destructor:LoginRequst)
  SharedDtor();
}

void LoginRequst::SharedDtor() {
  accountid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete head_;
  }
}

void LoginRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequst_descriptor_;
}

const LoginRequst& LoginRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

LoginRequst* LoginRequst::default_instance_ = NULL;

LoginRequst* LoginRequst::New(::google::protobuf::Arena* arena) const {
  LoginRequst* n = new LoginRequst;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequst::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginRequst)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
  languige_ = 0u;
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRequst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CommonRequest head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_accountid;
        break;
      }

      // optional string accountid = 2;
      case 2: {
        if (tag == 18) {
         parse_accountid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.accountid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userpwd;
        break;
      }

      // optional string userpwd = 4;
      case 4: {
        if (tag == 34) {
         parse_userpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userpwd().data(), this->userpwd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.userpwd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional .UserSex sex = 5;
      case 5: {
        if (tag == 40) {
         parse_sex:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sex(static_cast< ::UserSex >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_headurl;
        break;
      }

      // optional string headurl = 6;
      case 6: {
        if (tag == 50) {
         parse_headurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->headurl().data(), this->headurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.headurl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_email;
        break;
      }

      // optional string email = 7;
      case 7: {
        if (tag == 58) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.email"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_userType;
        break;
      }

      // optional bytes userType = 8;
      case 8: {
        if (tag == 66) {
         parse_userType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_usertype()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_channel;
        break;
      }

      // optional uint32 channel = 9;
      case 9: {
        if (tag == 72) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_languige;
        break;
      }

      // optional uint32 languige = 10;
      case 10: {
        if (tag == 80) {
         parse_languige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &languige_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_version;
        break;
      }

      // optional string version = 11;
      case 11: {
        if (tag == 90) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "LoginRequst.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRequst)
  return false;
#undef DO_
}

void LoginRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRequst)
  // optional .CommonRequest head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional string accountid = 2;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.accountid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->accountid(), output);
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  // optional string userpwd = 4;
  if (this->userpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.userpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userpwd(), output);
  }

  // optional .UserSex sex = 5;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sex(), output);
  }

  // optional string headurl = 6;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.headurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->headurl(), output);
  }

  // optional string email = 7;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->email(), output);
  }

  // optional bytes userType = 8;
  if (this->usertype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->usertype(), output);
  }

  // optional uint32 channel = 9;
  if (this->channel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel(), output);
  }

  // optional uint32 languige = 10;
  if (this->languige() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->languige(), output);
  }

  // optional string version = 11;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:LoginRequst)
}

::google::protobuf::uint8* LoginRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRequst)
  // optional .CommonRequest head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional string accountid = 2;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.accountid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  // optional string userpwd = 4;
  if (this->userpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.userpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userpwd(), target);
  }

  // optional .UserSex sex = 5;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sex(), target);
  }

  // optional string headurl = 6;
  if (this->headurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->headurl().data(), this->headurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.headurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->headurl(), target);
  }

  // optional string email = 7;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->email(), target);
  }

  // optional bytes userType = 8;
  if (this->usertype().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->usertype(), target);
  }

  // optional uint32 channel = 9;
  if (this->channel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel(), target);
  }

  // optional uint32 languige = 10;
  if (this->languige() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->languige(), target);
  }

  // optional string version = 11;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "LoginRequst.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LoginRequst)
  return target;
}

int LoginRequst::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LoginRequst)
  int total_size = 0;

  // optional .CommonRequest head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional string accountid = 2;
  if (this->accountid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountid());
  }

  // optional string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string userpwd = 4;
  if (this->userpwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpwd());
  }

  // optional .UserSex sex = 5;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sex());
  }

  // optional string headurl = 6;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headurl());
  }

  // optional string email = 7;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional bytes userType = 8;
  if (this->usertype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->usertype());
  }

  // optional uint32 channel = 9;
  if (this->channel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  // optional uint32 languige = 10;
  if (this->languige() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->languige());
  }

  // optional string version = 11;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequst::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginRequst)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRequst* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequst>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginRequst)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginRequst)
    MergeFrom(*source);
  }
}

void LoginRequst::MergeFrom(const LoginRequst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginRequst)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::CommonRequest::MergeFrom(from.head());
  }
  if (from.accountid().size() > 0) {

    accountid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accountid_);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.userpwd().size() > 0) {

    userpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpwd_);
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.usertype().size() > 0) {

    usertype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usertype_);
  }
  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.languige() != 0) {
    set_languige(from.languige());
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void LoginRequst::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequst::CopyFrom(const LoginRequst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginRequst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequst::IsInitialized() const {

  return true;
}

void LoginRequst::Swap(LoginRequst* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequst::InternalSwap(LoginRequst* other) {
  std::swap(head_, other->head_);
  accountid_.Swap(&other->accountid_);
  username_.Swap(&other->username_);
  userpwd_.Swap(&other->userpwd_);
  std::swap(sex_, other->sex_);
  headurl_.Swap(&other->headurl_);
  email_.Swap(&other->email_);
  usertype_.Swap(&other->usertype_);
  std::swap(channel_, other->channel_);
  std::swap(languige_, other->languige_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequst_descriptor_;
  metadata.reflection = LoginRequst_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequst

// optional .CommonRequest head = 1;
bool LoginRequst::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void LoginRequst::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::CommonRequest& LoginRequst::head() const {
  // @@protoc_insertion_point(field_get:LoginRequst.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::CommonRequest* LoginRequst::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::CommonRequest;
  }
  // @@protoc_insertion_point(field_mutable:LoginRequst.head)
  return head_;
}
::CommonRequest* LoginRequst::release_head() {
  // @@protoc_insertion_point(field_release:LoginRequst.head)
  
  ::CommonRequest* temp = head_;
  head_ = NULL;
  return temp;
}
void LoginRequst::set_allocated_head(::CommonRequest* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.head)
}

// optional string accountid = 2;
void LoginRequst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::accountid() const {
  // @@protoc_insertion_point(field_get:LoginRequst.accountid)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.accountid)
}
 void LoginRequst::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.accountid)
}
 void LoginRequst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.accountid)
}
 ::std::string* LoginRequst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.accountid)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_accountid() {
  // @@protoc_insertion_point(field_release:LoginRequst.accountid)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.accountid)
}

// optional string username = 3;
void LoginRequst::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::username() const {
  // @@protoc_insertion_point(field_get:LoginRequst.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.username)
}
 void LoginRequst::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.username)
}
 void LoginRequst::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.username)
}
 ::std::string* LoginRequst::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_username() {
  // @@protoc_insertion_point(field_release:LoginRequst.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.username)
}

// optional string userpwd = 4;
void LoginRequst::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::userpwd() const {
  // @@protoc_insertion_point(field_get:LoginRequst.userpwd)
  return userpwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_userpwd(const ::std::string& value) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.userpwd)
}
 void LoginRequst::set_userpwd(const char* value) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.userpwd)
}
 void LoginRequst::set_userpwd(const char* value, size_t size) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.userpwd)
}
 ::std::string* LoginRequst::mutable_userpwd() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.userpwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_userpwd() {
  // @@protoc_insertion_point(field_release:LoginRequst.userpwd)
  
  return userpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    
  } else {
    
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.userpwd)
}

// optional .UserSex sex = 5;
void LoginRequst::clear_sex() {
  sex_ = 0;
}
 ::UserSex LoginRequst::sex() const {
  // @@protoc_insertion_point(field_get:LoginRequst.sex)
  return static_cast< ::UserSex >(sex_);
}
 void LoginRequst::set_sex(::UserSex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.sex)
}

// optional string headurl = 6;
void LoginRequst::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::headurl() const {
  // @@protoc_insertion_point(field_get:LoginRequst.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.headurl)
}
 void LoginRequst::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.headurl)
}
 void LoginRequst::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.headurl)
}
 ::std::string* LoginRequst::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_headurl() {
  // @@protoc_insertion_point(field_release:LoginRequst.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.headurl)
}

// optional string email = 7;
void LoginRequst::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::email() const {
  // @@protoc_insertion_point(field_get:LoginRequst.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.email)
}
 void LoginRequst::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.email)
}
 void LoginRequst::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.email)
}
 ::std::string* LoginRequst::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_email() {
  // @@protoc_insertion_point(field_release:LoginRequst.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.email)
}

// optional bytes userType = 8;
void LoginRequst::clear_usertype() {
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::usertype() const {
  // @@protoc_insertion_point(field_get:LoginRequst.userType)
  return usertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_usertype(const ::std::string& value) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.userType)
}
 void LoginRequst::set_usertype(const char* value) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.userType)
}
 void LoginRequst::set_usertype(const void* value, size_t size) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.userType)
}
 ::std::string* LoginRequst::mutable_usertype() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.userType)
  return usertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_usertype() {
  // @@protoc_insertion_point(field_release:LoginRequst.userType)
  
  return usertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_usertype(::std::string* usertype) {
  if (usertype != NULL) {
    
  } else {
    
  }
  usertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertype);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.userType)
}

// optional uint32 channel = 9;
void LoginRequst::clear_channel() {
  channel_ = 0u;
}
 ::google::protobuf::uint32 LoginRequst::channel() const {
  // @@protoc_insertion_point(field_get:LoginRequst.channel)
  return channel_;
}
 void LoginRequst::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.channel)
}

// optional uint32 languige = 10;
void LoginRequst::clear_languige() {
  languige_ = 0u;
}
 ::google::protobuf::uint32 LoginRequst::languige() const {
  // @@protoc_insertion_point(field_get:LoginRequst.languige)
  return languige_;
}
 void LoginRequst::set_languige(::google::protobuf::uint32 value) {
  
  languige_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.languige)
}

// optional string version = 11;
void LoginRequst::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginRequst::version() const {
  // @@protoc_insertion_point(field_get:LoginRequst.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.version)
}
 void LoginRequst::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.version)
}
 void LoginRequst::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.version)
}
 ::std::string* LoginRequst::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginRequst::release_version() {
  // @@protoc_insertion_point(field_release:LoginRequst.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginRequst::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kHeadFieldNumber;
const int LoginResponse::kIsRegisterFieldNumber;
const int LoginResponse::kBaseinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
  baseinfo_ = const_cast< ::MyBaseInfo*>(&::MyBaseInfo::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginResponse)
}

void LoginResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  isregister_ = false;
  baseinfo_ = NULL;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete baseinfo_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  isregister_ = false;
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isRegister;
        break;
      }

      // optional bool isRegister = 2;
      case 2: {
        if (tag == 16) {
         parse_isRegister:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isregister_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_baseinfo;
        break;
      }

      // optional .MyBaseInfo baseinfo = 3;
      case 3: {
        if (tag == 26) {
         parse_baseinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional bool isRegister = 2;
  if (this->isregister() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isregister(), output);
  }

  // optional .MyBaseInfo baseinfo = 3;
  if (this->has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->baseinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:LoginResponse)
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional bool isRegister = 2;
  if (this->isregister() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isregister(), target);
  }

  // optional .MyBaseInfo baseinfo = 3;
  if (this->has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->baseinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LoginResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional bool isRegister = 2;
  if (this->isregister() != 0) {
    total_size += 1 + 1;
  }

  // optional .MyBaseInfo baseinfo = 3;
  if (this->has_baseinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->baseinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.isregister() != 0) {
    set_isregister(from.isregister());
  }
  if (from.has_baseinfo()) {
    mutable_baseinfo()->::MyBaseInfo::MergeFrom(from.baseinfo());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  std::swap(head_, other->head_);
  std::swap(isregister_, other->isregister_);
  std::swap(baseinfo_, other->baseinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// optional .ResponseHeader head = 1;
bool LoginResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void LoginResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& LoginResponse::head() const {
  // @@protoc_insertion_point(field_get:LoginResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* LoginResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:LoginResponse.head)
  return head_;
}
::ResponseHeader* LoginResponse::release_head() {
  // @@protoc_insertion_point(field_release:LoginResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.head)
}

// optional bool isRegister = 2;
void LoginResponse::clear_isregister() {
  isregister_ = false;
}
 bool LoginResponse::isregister() const {
  // @@protoc_insertion_point(field_get:LoginResponse.isRegister)
  return isregister_;
}
 void LoginResponse::set_isregister(bool value) {
  
  isregister_ = value;
  // @@protoc_insertion_point(field_set:LoginResponse.isRegister)
}

// optional .MyBaseInfo baseinfo = 3;
bool LoginResponse::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
void LoginResponse::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
const ::MyBaseInfo& LoginResponse::baseinfo() const {
  // @@protoc_insertion_point(field_get:LoginResponse.baseinfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
::MyBaseInfo* LoginResponse::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::MyBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:LoginResponse.baseinfo)
  return baseinfo_;
}
::MyBaseInfo* LoginResponse::release_baseinfo() {
  // @@protoc_insertion_point(field_release:LoginResponse.baseinfo)
  
  ::MyBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
void LoginResponse::set_allocated_baseinfo(::MyBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.baseinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomCfgData::kMBlindFieldNumber;
const int RoomCfgData::kMMinBlindFieldNumber;
const int RoomCfgData::kMMaxBlindFieldNumber;
const int RoomCfgData::kMPlaynowMinBlindFieldNumber;
const int RoomCfgData::kMPlaynowMaxBlindFieldNumber;
const int RoomCfgData::kMRoomLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomCfgData::RoomCfgData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomCfgData)
}

void RoomCfgData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomCfgData::RoomCfgData(const RoomCfgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoomCfgData)
}

void RoomCfgData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  m_blind_ = GOOGLE_ULONGLONG(0);
  m_minblind_ = GOOGLE_ULONGLONG(0);
  m_maxblind_ = GOOGLE_ULONGLONG(0);
  m_playnowminblind_ = GOOGLE_ULONGLONG(0);
  m_playnowmaxblind_ = GOOGLE_ULONGLONG(0);
  m_roomlevel_ = 0u;
}

RoomCfgData::~RoomCfgData() {
  // @@protoc_insertion_point(destructor:RoomCfgData)
  SharedDtor();
}

void RoomCfgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomCfgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCfgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCfgData_descriptor_;
}

const RoomCfgData& RoomCfgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

RoomCfgData* RoomCfgData::default_instance_ = NULL;

RoomCfgData* RoomCfgData::New(::google::protobuf::Arena* arena) const {
  RoomCfgData* n = new RoomCfgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomCfgData::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomCfgData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RoomCfgData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomCfgData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(m_blind_, m_roomlevel_);

#undef ZR_HELPER_
#undef ZR_

}

bool RoomCfgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoomCfgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 m_blind = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_blind_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_m_minBlind;
        break;
      }

      // optional uint64 m_minBlind = 2;
      case 2: {
        if (tag == 16) {
         parse_m_minBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_minblind_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m_maxBlind;
        break;
      }

      // optional uint64 m_maxBlind = 3;
      case 3: {
        if (tag == 24) {
         parse_m_maxBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_maxblind_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_m_playnowMinBlind;
        break;
      }

      // optional uint64 m_playnowMinBlind = 4;
      case 4: {
        if (tag == 32) {
         parse_m_playnowMinBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_playnowminblind_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_m_playnowMaxBlind;
        break;
      }

      // optional uint64 m_playnowMaxBlind = 5;
      case 5: {
        if (tag == 40) {
         parse_m_playnowMaxBlind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_playnowmaxblind_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_m_roomLevel;
        break;
      }

      // optional uint32 m_roomLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_m_roomLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_roomlevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoomCfgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoomCfgData)
  return false;
#undef DO_
}

void RoomCfgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoomCfgData)
  // optional uint64 m_blind = 1;
  if (this->m_blind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->m_blind(), output);
  }

  // optional uint64 m_minBlind = 2;
  if (this->m_minblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->m_minblind(), output);
  }

  // optional uint64 m_maxBlind = 3;
  if (this->m_maxblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->m_maxblind(), output);
  }

  // optional uint64 m_playnowMinBlind = 4;
  if (this->m_playnowminblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->m_playnowminblind(), output);
  }

  // optional uint64 m_playnowMaxBlind = 5;
  if (this->m_playnowmaxblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->m_playnowmaxblind(), output);
  }

  // optional uint32 m_roomLevel = 6;
  if (this->m_roomlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->m_roomlevel(), output);
  }

  // @@protoc_insertion_point(serialize_end:RoomCfgData)
}

::google::protobuf::uint8* RoomCfgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomCfgData)
  // optional uint64 m_blind = 1;
  if (this->m_blind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->m_blind(), target);
  }

  // optional uint64 m_minBlind = 2;
  if (this->m_minblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->m_minblind(), target);
  }

  // optional uint64 m_maxBlind = 3;
  if (this->m_maxblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->m_maxblind(), target);
  }

  // optional uint64 m_playnowMinBlind = 4;
  if (this->m_playnowminblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->m_playnowminblind(), target);
  }

  // optional uint64 m_playnowMaxBlind = 5;
  if (this->m_playnowmaxblind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->m_playnowmaxblind(), target);
  }

  // optional uint32 m_roomLevel = 6;
  if (this->m_roomlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->m_roomlevel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RoomCfgData)
  return target;
}

int RoomCfgData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RoomCfgData)
  int total_size = 0;

  // optional uint64 m_blind = 1;
  if (this->m_blind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m_blind());
  }

  // optional uint64 m_minBlind = 2;
  if (this->m_minblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m_minblind());
  }

  // optional uint64 m_maxBlind = 3;
  if (this->m_maxblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m_maxblind());
  }

  // optional uint64 m_playnowMinBlind = 4;
  if (this->m_playnowminblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m_playnowminblind());
  }

  // optional uint64 m_playnowMaxBlind = 5;
  if (this->m_playnowmaxblind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->m_playnowmaxblind());
  }

  // optional uint32 m_roomLevel = 6;
  if (this->m_roomlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->m_roomlevel());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCfgData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomCfgData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomCfgData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomCfgData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomCfgData)
    MergeFrom(*source);
  }
}

void RoomCfgData::MergeFrom(const RoomCfgData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomCfgData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.m_blind() != 0) {
    set_m_blind(from.m_blind());
  }
  if (from.m_minblind() != 0) {
    set_m_minblind(from.m_minblind());
  }
  if (from.m_maxblind() != 0) {
    set_m_maxblind(from.m_maxblind());
  }
  if (from.m_playnowminblind() != 0) {
    set_m_playnowminblind(from.m_playnowminblind());
  }
  if (from.m_playnowmaxblind() != 0) {
    set_m_playnowmaxblind(from.m_playnowmaxblind());
  }
  if (from.m_roomlevel() != 0) {
    set_m_roomlevel(from.m_roomlevel());
  }
}

void RoomCfgData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCfgData::CopyFrom(const RoomCfgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomCfgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCfgData::IsInitialized() const {

  return true;
}

void RoomCfgData::Swap(RoomCfgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomCfgData::InternalSwap(RoomCfgData* other) {
  std::swap(m_blind_, other->m_blind_);
  std::swap(m_minblind_, other->m_minblind_);
  std::swap(m_maxblind_, other->m_maxblind_);
  std::swap(m_playnowminblind_, other->m_playnowminblind_);
  std::swap(m_playnowmaxblind_, other->m_playnowmaxblind_);
  std::swap(m_roomlevel_, other->m_roomlevel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomCfgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCfgData_descriptor_;
  metadata.reflection = RoomCfgData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomCfgData

// optional uint64 m_blind = 1;
void RoomCfgData::clear_m_blind() {
  m_blind_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomCfgData::m_blind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_blind)
  return m_blind_;
}
 void RoomCfgData::set_m_blind(::google::protobuf::uint64 value) {
  
  m_blind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_blind)
}

// optional uint64 m_minBlind = 2;
void RoomCfgData::clear_m_minblind() {
  m_minblind_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomCfgData::m_minblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_minBlind)
  return m_minblind_;
}
 void RoomCfgData::set_m_minblind(::google::protobuf::uint64 value) {
  
  m_minblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_minBlind)
}

// optional uint64 m_maxBlind = 3;
void RoomCfgData::clear_m_maxblind() {
  m_maxblind_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomCfgData::m_maxblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_maxBlind)
  return m_maxblind_;
}
 void RoomCfgData::set_m_maxblind(::google::protobuf::uint64 value) {
  
  m_maxblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_maxBlind)
}

// optional uint64 m_playnowMinBlind = 4;
void RoomCfgData::clear_m_playnowminblind() {
  m_playnowminblind_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomCfgData::m_playnowminblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_playnowMinBlind)
  return m_playnowminblind_;
}
 void RoomCfgData::set_m_playnowminblind(::google::protobuf::uint64 value) {
  
  m_playnowminblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_playnowMinBlind)
}

// optional uint64 m_playnowMaxBlind = 5;
void RoomCfgData::clear_m_playnowmaxblind() {
  m_playnowmaxblind_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomCfgData::m_playnowmaxblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_playnowMaxBlind)
  return m_playnowmaxblind_;
}
 void RoomCfgData::set_m_playnowmaxblind(::google::protobuf::uint64 value) {
  
  m_playnowmaxblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_playnowMaxBlind)
}

// optional uint32 m_roomLevel = 6;
void RoomCfgData::clear_m_roomlevel() {
  m_roomlevel_ = 0u;
}
 ::google::protobuf::uint32 RoomCfgData::m_roomlevel() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_roomLevel)
  return m_roomlevel_;
}
 void RoomCfgData::set_m_roomlevel(::google::protobuf::uint32 value) {
  
  m_roomlevel_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_roomLevel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfigResponse::kHeadFieldNumber;
const int GameConfigResponse::kPrimaryChipsFieldNumber;
const int GameConfigResponse::kMiddleChipsFieldNumber;
const int GameConfigResponse::kHightChipsFieldNumber;
const int GameConfigResponse::kRoomlimitFieldNumber;
const int GameConfigResponse::kRoomTitleFieldNumber;
const int GameConfigResponse::kFaceCostRatioFieldNumber;
const int GameConfigResponse::kLoginTimesFieldNumber;
const int GameConfigResponse::kOpenPingFieldNumber;
const int GameConfigResponse::kOpenBoxAwardFieldNumber;
const int GameConfigResponse::kRulesVerFieldNumber;
const int GameConfigResponse::kShareScFieldNumber;
const int GameConfigResponse::kMaxFriendnumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfigResponse::GameConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameConfigResponse)
}

void GameConfigResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
}

GameConfigResponse::GameConfigResponse(const GameConfigResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GameConfigResponse)
}

void GameConfigResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_ = NULL;
  primary_chips_ = GOOGLE_ULONGLONG(0);
  middle_chips_ = GOOGLE_ULONGLONG(0);
  hight_chips_ = GOOGLE_ULONGLONG(0);
  roomlimit_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  roomlimit_.SetEntryDescriptor(
      &::GameConfigResponse_RoomlimitEntry_descriptor_);
  room_title_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  room_title_.SetEntryDescriptor(
      &::GameConfigResponse_RoomTitleEntry_descriptor_);
  face_cost_ratio_ = 0u;
  logintimes_ = 0u;
  openping_ = false;
  openboxaward_ = false;
  rulesver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sharesc_ = 0u;
  maxfriendnum_ = 0u;
}

GameConfigResponse::~GameConfigResponse() {
  // @@protoc_insertion_point(destructor:GameConfigResponse)
  SharedDtor();
}

void GameConfigResponse::SharedDtor() {
  rulesver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete head_;
  }
}

void GameConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfigResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameConfigResponse_descriptor_;
}

const GameConfigResponse& GameConfigResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

GameConfigResponse* GameConfigResponse::default_instance_ = NULL;

GameConfigResponse* GameConfigResponse::New(::google::protobuf::Arena* arena) const {
  GameConfigResponse* n = new GameConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GameConfigResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameConfigResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameConfigResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(primary_chips_, hight_chips_);
  ZR_(face_cost_ratio_, logintimes_);
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  ZR_(openping_, sharesc_);
  rulesver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxfriendnum_ = 0u;

#undef ZR_HELPER_
#undef ZR_

  roomlimit_.Clear();
  room_title_.Clear();
}

bool GameConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_primary_chips;
        break;
      }

      // optional uint64 primary_chips = 2;
      case 2: {
        if (tag == 16) {
         parse_primary_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &primary_chips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_middle_chips;
        break;
      }

      // optional uint64 middle_chips = 3;
      case 3: {
        if (tag == 24) {
         parse_middle_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &middle_chips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hight_chips;
        break;
      }

      // optional uint64 hight_chips = 4;
      case 4: {
        if (tag == 32) {
         parse_hight_chips:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hight_chips_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_roomlimit;
        break;
      }

      // map<string, .RoomCfgData> roomlimit = 5;
      case 5: {
        if (tag == 42) {
         parse_roomlimit:
          DO_(input->IncrementRecursionDepth());
         parse_loop_roomlimit:
          ::google::protobuf::scoped_ptr<GameConfigResponse_RoomlimitEntry> entry(roomlimit_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_roomlimit())[entry->key()].Swap(entry->mutable_value());
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->key().data(), entry->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameConfigResponse.RoomlimitEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_roomlimit;
        if (input->ExpectTag(50)) goto parse_loop_room_title;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // map<uint32, string> room_title = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_room_title:
          ::google::protobuf::scoped_ptr<GameConfigResponse_RoomTitleEntry> entry(room_title_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_room_title())[entry->key()] = *entry->mutable_value();
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry->mutable_value()->data(),
            entry->mutable_value()->length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GameConfigResponse.RoomTitleEntry.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_room_title;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_face_cost_ratio;
        break;
      }

      // optional uint32 face_cost_ratio = 7;
      case 7: {
        if (tag == 56) {
         parse_face_cost_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_cost_ratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_loginTimes;
        break;
      }

      // optional uint32 loginTimes = 8;
      case 8: {
        if (tag == 64) {
         parse_loginTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintimes_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_openPing;
        break;
      }

      // optional bool openPing = 9;
      case 9: {
        if (tag == 72) {
         parse_openPing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openping_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_openBoxAward;
        break;
      }

      // optional bool openBoxAward = 10;
      case 10: {
        if (tag == 80) {
         parse_openBoxAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openboxaward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_rulesVer;
        break;
      }

      // optional bytes rulesVer = 11;
      case 11: {
        if (tag == 90) {
         parse_rulesVer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rulesver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_shareSc;
        break;
      }

      // optional uint32 shareSc = 12;
      case 12: {
        if (tag == 96) {
         parse_shareSc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sharesc_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxFriendnum;
        break;
      }

      // optional uint32 maxFriendnum = 13;
      case 13: {
        if (tag == 104) {
         parse_maxFriendnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfriendnum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameConfigResponse)
  return false;
#undef DO_
}

void GameConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameConfigResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional uint64 primary_chips = 2;
  if (this->primary_chips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->primary_chips(), output);
  }

  // optional uint64 middle_chips = 3;
  if (this->middle_chips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->middle_chips(), output);
  }

  // optional uint64 hight_chips = 4;
  if (this->hight_chips() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hight_chips(), output);
  }

  // map<string, .RoomCfgData> roomlimit = 5;
  {
    ::google::protobuf::scoped_ptr<GameConfigResponse_RoomlimitEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::RoomCfgData >::const_iterator
        it = this->roomlimit().begin();
        it != this->roomlimit().end(); ++it) {
      entry.reset(roomlimit_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          5, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "GameConfigResponse.RoomlimitEntry.key");
    }
  }

  // map<uint32, string> room_title = 6;
  {
    ::google::protobuf::scoped_ptr<GameConfigResponse_RoomTitleEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->room_title().begin();
        it != this->room_title().end(); ++it) {
      entry.reset(room_title_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          6, *entry, output);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "GameConfigResponse.RoomTitleEntry.value");
    }
  }

  // optional uint32 face_cost_ratio = 7;
  if (this->face_cost_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->face_cost_ratio(), output);
  }

  // optional uint32 loginTimes = 8;
  if (this->logintimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->logintimes(), output);
  }

  // optional bool openPing = 9;
  if (this->openping() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->openping(), output);
  }

  // optional bool openBoxAward = 10;
  if (this->openboxaward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->openboxaward(), output);
  }

  // optional bytes rulesVer = 11;
  if (this->rulesver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->rulesver(), output);
  }

  // optional uint32 shareSc = 12;
  if (this->sharesc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sharesc(), output);
  }

  // optional uint32 maxFriendnum = 13;
  if (this->maxfriendnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxfriendnum(), output);
  }

  // @@protoc_insertion_point(serialize_end:GameConfigResponse)
}

::google::protobuf::uint8* GameConfigResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameConfigResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional uint64 primary_chips = 2;
  if (this->primary_chips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->primary_chips(), target);
  }

  // optional uint64 middle_chips = 3;
  if (this->middle_chips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->middle_chips(), target);
  }

  // optional uint64 hight_chips = 4;
  if (this->hight_chips() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hight_chips(), target);
  }

  // map<string, .RoomCfgData> roomlimit = 5;
  {
    ::google::protobuf::scoped_ptr<GameConfigResponse_RoomlimitEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::RoomCfgData >::const_iterator
        it = this->roomlimit().begin();
        it != this->roomlimit().end(); ++it) {
      entry.reset(roomlimit_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              5, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->first.data(), it->first.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "GameConfigResponse.RoomlimitEntry.key");
    }
  }

  // map<uint32, string> room_title = 6;
  {
    ::google::protobuf::scoped_ptr<GameConfigResponse_RoomTitleEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->room_title().begin();
        it != this->room_title().end(); ++it) {
      entry.reset(room_title_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              6, *entry, target);
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        it->second.data(), it->second.length(),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "GameConfigResponse.RoomTitleEntry.value");
    }
  }

  // optional uint32 face_cost_ratio = 7;
  if (this->face_cost_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->face_cost_ratio(), target);
  }

  // optional uint32 loginTimes = 8;
  if (this->logintimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->logintimes(), target);
  }

  // optional bool openPing = 9;
  if (this->openping() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->openping(), target);
  }

  // optional bool openBoxAward = 10;
  if (this->openboxaward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->openboxaward(), target);
  }

  // optional bytes rulesVer = 11;
  if (this->rulesver().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->rulesver(), target);
  }

  // optional uint32 shareSc = 12;
  if (this->sharesc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sharesc(), target);
  }

  // optional uint32 maxFriendnum = 13;
  if (this->maxfriendnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->maxfriendnum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:GameConfigResponse)
  return target;
}

int GameConfigResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GameConfigResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional uint64 primary_chips = 2;
  if (this->primary_chips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->primary_chips());
  }

  // optional uint64 middle_chips = 3;
  if (this->middle_chips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->middle_chips());
  }

  // optional uint64 hight_chips = 4;
  if (this->hight_chips() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->hight_chips());
  }

  // optional uint32 face_cost_ratio = 7;
  if (this->face_cost_ratio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_cost_ratio());
  }

  // optional uint32 loginTimes = 8;
  if (this->logintimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->logintimes());
  }

  // optional bool openPing = 9;
  if (this->openping() != 0) {
    total_size += 1 + 1;
  }

  // optional bool openBoxAward = 10;
  if (this->openboxaward() != 0) {
    total_size += 1 + 1;
  }

  // optional bytes rulesVer = 11;
  if (this->rulesver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->rulesver());
  }

  // optional uint32 shareSc = 12;
  if (this->sharesc() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sharesc());
  }

  // optional uint32 maxFriendnum = 13;
  if (this->maxfriendnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->maxfriendnum());
  }

  // map<string, .RoomCfgData> roomlimit = 5;
  total_size += 1 * this->roomlimit_size();
  {
    ::google::protobuf::scoped_ptr<GameConfigResponse_RoomlimitEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::RoomCfgData >::const_iterator
        it = this->roomlimit().begin();
        it != this->roomlimit().end(); ++it) {
      entry.reset(roomlimit_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, string> room_title = 6;
  total_size += 1 * this->room_title_size();
  {
    ::google::protobuf::scoped_ptr<GameConfigResponse_RoomTitleEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >::const_iterator
        it = this->room_title().begin();
        it != this->room_title().end(); ++it) {
      entry.reset(room_title_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameConfigResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameConfigResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameConfigResponse)
    MergeFrom(*source);
  }
}

void GameConfigResponse::MergeFrom(const GameConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameConfigResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  roomlimit_.MergeFrom(from.roomlimit_);
  room_title_.MergeFrom(from.room_title_);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.primary_chips() != 0) {
    set_primary_chips(from.primary_chips());
  }
  if (from.middle_chips() != 0) {
    set_middle_chips(from.middle_chips());
  }
  if (from.hight_chips() != 0) {
    set_hight_chips(from.hight_chips());
  }
  if (from.face_cost_ratio() != 0) {
    set_face_cost_ratio(from.face_cost_ratio());
  }
  if (from.logintimes() != 0) {
    set_logintimes(from.logintimes());
  }
  if (from.openping() != 0) {
    set_openping(from.openping());
  }
  if (from.openboxaward() != 0) {
    set_openboxaward(from.openboxaward());
  }
  if (from.rulesver().size() > 0) {

    rulesver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rulesver_);
  }
  if (from.sharesc() != 0) {
    set_sharesc(from.sharesc());
  }
  if (from.maxfriendnum() != 0) {
    set_maxfriendnum(from.maxfriendnum());
  }
}

void GameConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfigResponse::CopyFrom(const GameConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfigResponse::IsInitialized() const {

  return true;
}

void GameConfigResponse::Swap(GameConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfigResponse::InternalSwap(GameConfigResponse* other) {
  std::swap(head_, other->head_);
  std::swap(primary_chips_, other->primary_chips_);
  std::swap(middle_chips_, other->middle_chips_);
  std::swap(hight_chips_, other->hight_chips_);
  roomlimit_.Swap(&other->roomlimit_);
  room_title_.Swap(&other->room_title_);
  std::swap(face_cost_ratio_, other->face_cost_ratio_);
  std::swap(logintimes_, other->logintimes_);
  std::swap(openping_, other->openping_);
  std::swap(openboxaward_, other->openboxaward_);
  rulesver_.Swap(&other->rulesver_);
  std::swap(sharesc_, other->sharesc_);
  std::swap(maxfriendnum_, other->maxfriendnum_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfigResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameConfigResponse_descriptor_;
  metadata.reflection = GameConfigResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameConfigResponse

// optional .ResponseHeader head = 1;
bool GameConfigResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void GameConfigResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& GameConfigResponse::head() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* GameConfigResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:GameConfigResponse.head)
  return head_;
}
::ResponseHeader* GameConfigResponse::release_head() {
  // @@protoc_insertion_point(field_release:GameConfigResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void GameConfigResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameConfigResponse.head)
}

// optional uint64 primary_chips = 2;
void GameConfigResponse::clear_primary_chips() {
  primary_chips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GameConfigResponse::primary_chips() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.primary_chips)
  return primary_chips_;
}
 void GameConfigResponse::set_primary_chips(::google::protobuf::uint64 value) {
  
  primary_chips_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.primary_chips)
}

// optional uint64 middle_chips = 3;
void GameConfigResponse::clear_middle_chips() {
  middle_chips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GameConfigResponse::middle_chips() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.middle_chips)
  return middle_chips_;
}
 void GameConfigResponse::set_middle_chips(::google::protobuf::uint64 value) {
  
  middle_chips_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.middle_chips)
}

// optional uint64 hight_chips = 4;
void GameConfigResponse::clear_hight_chips() {
  hight_chips_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 GameConfigResponse::hight_chips() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.hight_chips)
  return hight_chips_;
}
 void GameConfigResponse::set_hight_chips(::google::protobuf::uint64 value) {
  
  hight_chips_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.hight_chips)
}

// map<string, .RoomCfgData> roomlimit = 5;
int GameConfigResponse::roomlimit_size() const {
  return roomlimit_.size();
}
void GameConfigResponse::clear_roomlimit() {
  roomlimit_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::RoomCfgData >&
GameConfigResponse::roomlimit() const {
  // @@protoc_insertion_point(field_map:GameConfigResponse.roomlimit)
  return roomlimit_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::RoomCfgData >*
GameConfigResponse::mutable_roomlimit() {
  // @@protoc_insertion_point(field_mutable_map:GameConfigResponse.roomlimit)
  return roomlimit_.MutableMap();
}

// map<uint32, string> room_title = 6;
int GameConfigResponse::room_title_size() const {
  return room_title_.size();
}
void GameConfigResponse::clear_room_title() {
  room_title_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
GameConfigResponse::room_title() const {
  // @@protoc_insertion_point(field_map:GameConfigResponse.room_title)
  return room_title_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
GameConfigResponse::mutable_room_title() {
  // @@protoc_insertion_point(field_mutable_map:GameConfigResponse.room_title)
  return room_title_.MutableMap();
}

// optional uint32 face_cost_ratio = 7;
void GameConfigResponse::clear_face_cost_ratio() {
  face_cost_ratio_ = 0u;
}
 ::google::protobuf::uint32 GameConfigResponse::face_cost_ratio() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.face_cost_ratio)
  return face_cost_ratio_;
}
 void GameConfigResponse::set_face_cost_ratio(::google::protobuf::uint32 value) {
  
  face_cost_ratio_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.face_cost_ratio)
}

// optional uint32 loginTimes = 8;
void GameConfigResponse::clear_logintimes() {
  logintimes_ = 0u;
}
 ::google::protobuf::uint32 GameConfigResponse::logintimes() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.loginTimes)
  return logintimes_;
}
 void GameConfigResponse::set_logintimes(::google::protobuf::uint32 value) {
  
  logintimes_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.loginTimes)
}

// optional bool openPing = 9;
void GameConfigResponse::clear_openping() {
  openping_ = false;
}
 bool GameConfigResponse::openping() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.openPing)
  return openping_;
}
 void GameConfigResponse::set_openping(bool value) {
  
  openping_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.openPing)
}

// optional bool openBoxAward = 10;
void GameConfigResponse::clear_openboxaward() {
  openboxaward_ = false;
}
 bool GameConfigResponse::openboxaward() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.openBoxAward)
  return openboxaward_;
}
 void GameConfigResponse::set_openboxaward(bool value) {
  
  openboxaward_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.openBoxAward)
}

// optional bytes rulesVer = 11;
void GameConfigResponse::clear_rulesver() {
  rulesver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GameConfigResponse::rulesver() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.rulesVer)
  return rulesver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameConfigResponse::set_rulesver(const ::std::string& value) {
  
  rulesver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameConfigResponse.rulesVer)
}
 void GameConfigResponse::set_rulesver(const char* value) {
  
  rulesver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameConfigResponse.rulesVer)
}
 void GameConfigResponse::set_rulesver(const void* value, size_t size) {
  
  rulesver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameConfigResponse.rulesVer)
}
 ::std::string* GameConfigResponse::mutable_rulesver() {
  
  // @@protoc_insertion_point(field_mutable:GameConfigResponse.rulesVer)
  return rulesver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GameConfigResponse::release_rulesver() {
  // @@protoc_insertion_point(field_release:GameConfigResponse.rulesVer)
  
  return rulesver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GameConfigResponse::set_allocated_rulesver(::std::string* rulesver) {
  if (rulesver != NULL) {
    
  } else {
    
  }
  rulesver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulesver);
  // @@protoc_insertion_point(field_set_allocated:GameConfigResponse.rulesVer)
}

// optional uint32 shareSc = 12;
void GameConfigResponse::clear_sharesc() {
  sharesc_ = 0u;
}
 ::google::protobuf::uint32 GameConfigResponse::sharesc() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.shareSc)
  return sharesc_;
}
 void GameConfigResponse::set_sharesc(::google::protobuf::uint32 value) {
  
  sharesc_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.shareSc)
}

// optional uint32 maxFriendnum = 13;
void GameConfigResponse::clear_maxfriendnum() {
  maxfriendnum_ = 0u;
}
 ::google::protobuf::uint32 GameConfigResponse::maxfriendnum() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.maxFriendnum)
  return maxfriendnum_;
}
 void GameConfigResponse::set_maxfriendnum(::google::protobuf::uint32 value) {
  
  maxfriendnum_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.maxFriendnum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
