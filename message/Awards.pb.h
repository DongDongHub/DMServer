// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Awards.proto

#ifndef PROTOBUF_Awards_2eproto__INCLUDED
#define PROTOBUF_Awards_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Basic.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Awards_2eproto();
void protobuf_AssignDesc_Awards_2eproto();
void protobuf_ShutdownFile_Awards_2eproto();

class AllAwardsResponse;
class CountBoxAward;
class CountBoxAward_AwardCfg;
class FreechipStatus;
class LoginAward;
class RegisterAward;
class RegisterAwardItem;
class RegisterOneDay;
class SignAward;
class seriesDaysAwardImageInfo;
class signAwardImageInfo;

enum signAwardImageInfo_signAwardImageType {
  signAwardImageInfo_signAwardImageType_unkwown = 0,
  signAwardImageInfo_signAwardImageType_InteractiveProps = 1,
  signAwardImageInfo_signAwardImageType_ChipsBox = 2,
  signAwardImageInfo_signAwardImageType_Chips = 3,
  signAwardImageInfo_signAwardImageType_Coins = 4,
  signAwardImageInfo_signAwardImageType_Gifts = 5,
  signAwardImageInfo_signAwardImageType_signAwardImageInfo_signAwardImageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  signAwardImageInfo_signAwardImageType_signAwardImageInfo_signAwardImageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool signAwardImageInfo_signAwardImageType_IsValid(int value);
const signAwardImageInfo_signAwardImageType signAwardImageInfo_signAwardImageType_signAwardImageType_MIN = signAwardImageInfo_signAwardImageType_unkwown;
const signAwardImageInfo_signAwardImageType signAwardImageInfo_signAwardImageType_signAwardImageType_MAX = signAwardImageInfo_signAwardImageType_Gifts;
const int signAwardImageInfo_signAwardImageType_signAwardImageType_ARRAYSIZE = signAwardImageInfo_signAwardImageType_signAwardImageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* signAwardImageInfo_signAwardImageType_descriptor();
inline const ::std::string& signAwardImageInfo_signAwardImageType_Name(signAwardImageInfo_signAwardImageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    signAwardImageInfo_signAwardImageType_descriptor(), value);
}
inline bool signAwardImageInfo_signAwardImageType_Parse(
    const ::std::string& name, signAwardImageInfo_signAwardImageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<signAwardImageInfo_signAwardImageType>(
    signAwardImageInfo_signAwardImageType_descriptor(), name, value);
}
// ===================================================================

class LoginAward : public ::google::protobuf::Message {
 public:
  LoginAward();
  virtual ~LoginAward();

  LoginAward(const LoginAward& from);

  inline LoginAward& operator=(const LoginAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginAward& default_instance();

  void Swap(LoginAward* other);

  // implements Message ----------------------------------------------

  inline LoginAward* New() const { return New(NULL); }

  LoginAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginAward& from);
  void MergeFrom(const LoginAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes step = 1;
  void clear_step();
  static const int kStepFieldNumber = 1;
  const ::std::string& step() const;
  void set_step(const ::std::string& value);
  void set_step(const char* value);
  void set_step(const void* value, size_t size);
  ::std::string* mutable_step();
  ::std::string* release_step();
  void set_allocated_step(::std::string* step);

  // optional uint64 award_next_money = 2;
  void clear_award_next_money();
  static const int kAwardNextMoneyFieldNumber = 2;
  ::google::protobuf::uint64 award_next_money() const;
  void set_award_next_money(::google::protobuf::uint64 value);

  // optional uint32 award_counttime = 3;
  void clear_award_counttime();
  static const int kAwardCounttimeFieldNumber = 3;
  ::google::protobuf::uint32 award_counttime() const;
  void set_award_counttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LoginAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr step_;
  ::google::protobuf::uint64 award_next_money_;
  ::google::protobuf::uint32 award_counttime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static LoginAward* default_instance_;
};
// -------------------------------------------------------------------

class signAwardImageInfo : public ::google::protobuf::Message {
 public:
  signAwardImageInfo();
  virtual ~signAwardImageInfo();

  signAwardImageInfo(const signAwardImageInfo& from);

  inline signAwardImageInfo& operator=(const signAwardImageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const signAwardImageInfo& default_instance();

  void Swap(signAwardImageInfo* other);

  // implements Message ----------------------------------------------

  inline signAwardImageInfo* New() const { return New(NULL); }

  signAwardImageInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const signAwardImageInfo& from);
  void MergeFrom(const signAwardImageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(signAwardImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef signAwardImageInfo_signAwardImageType signAwardImageType;
  static const signAwardImageType unkwown =
    signAwardImageInfo_signAwardImageType_unkwown;
  static const signAwardImageType InteractiveProps =
    signAwardImageInfo_signAwardImageType_InteractiveProps;
  static const signAwardImageType ChipsBox =
    signAwardImageInfo_signAwardImageType_ChipsBox;
  static const signAwardImageType Chips =
    signAwardImageInfo_signAwardImageType_Chips;
  static const signAwardImageType Coins =
    signAwardImageInfo_signAwardImageType_Coins;
  static const signAwardImageType Gifts =
    signAwardImageInfo_signAwardImageType_Gifts;
  static inline bool signAwardImageType_IsValid(int value) {
    return signAwardImageInfo_signAwardImageType_IsValid(value);
  }
  static const signAwardImageType signAwardImageType_MIN =
    signAwardImageInfo_signAwardImageType_signAwardImageType_MIN;
  static const signAwardImageType signAwardImageType_MAX =
    signAwardImageInfo_signAwardImageType_signAwardImageType_MAX;
  static const int signAwardImageType_ARRAYSIZE =
    signAwardImageInfo_signAwardImageType_signAwardImageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  signAwardImageType_descriptor() {
    return signAwardImageInfo_signAwardImageType_descriptor();
  }
  static inline const ::std::string& signAwardImageType_Name(signAwardImageType value) {
    return signAwardImageInfo_signAwardImageType_Name(value);
  }
  static inline bool signAwardImageType_Parse(const ::std::string& name,
      signAwardImageType* value) {
    return signAwardImageInfo_signAwardImageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .signAwardImageInfo.signAwardImageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::signAwardImageInfo_signAwardImageType type() const;
  void set_type(::signAwardImageInfo_signAwardImageType value);

  // optional uint32 imageId = 2;
  void clear_imageid();
  static const int kImageIdFieldNumber = 2;
  ::google::protobuf::uint32 imageid() const;
  void set_imageid(::google::protobuf::uint32 value);

  // optional uint64 signAwardImageNum = 3;
  void clear_signawardimagenum();
  static const int kSignAwardImageNumFieldNumber = 3;
  ::google::protobuf::uint64 signawardimagenum() const;
  void set_signawardimagenum(::google::protobuf::uint64 value);

  // optional uint32 bSignAward = 4;
  void clear_bsignaward();
  static const int kBSignAwardFieldNumber = 4;
  ::google::protobuf::uint32 bsignaward() const;
  void set_bsignaward(::google::protobuf::uint32 value);

  // optional string signAwardImageUrl = 5;
  void clear_signawardimageurl();
  static const int kSignAwardImageUrlFieldNumber = 5;
  const ::std::string& signawardimageurl() const;
  void set_signawardimageurl(const ::std::string& value);
  void set_signawardimageurl(const char* value);
  void set_signawardimageurl(const char* value, size_t size);
  ::std::string* mutable_signawardimageurl();
  ::std::string* release_signawardimageurl();
  void set_allocated_signawardimageurl(::std::string* signawardimageurl);

  // optional uint32 signAwardImageBgColor = 6;
  void clear_signawardimagebgcolor();
  static const int kSignAwardImageBgColorFieldNumber = 6;
  ::google::protobuf::uint32 signawardimagebgcolor() const;
  void set_signawardimagebgcolor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:signAwardImageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int type_;
  ::google::protobuf::uint32 imageid_;
  ::google::protobuf::uint64 signawardimagenum_;
  ::google::protobuf::internal::ArenaStringPtr signawardimageurl_;
  ::google::protobuf::uint32 bsignaward_;
  ::google::protobuf::uint32 signawardimagebgcolor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static signAwardImageInfo* default_instance_;
};
// -------------------------------------------------------------------

class seriesDaysAwardImageInfo : public ::google::protobuf::Message {
 public:
  seriesDaysAwardImageInfo();
  virtual ~seriesDaysAwardImageInfo();

  seriesDaysAwardImageInfo(const seriesDaysAwardImageInfo& from);

  inline seriesDaysAwardImageInfo& operator=(const seriesDaysAwardImageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const seriesDaysAwardImageInfo& default_instance();

  void Swap(seriesDaysAwardImageInfo* other);

  // implements Message ----------------------------------------------

  inline seriesDaysAwardImageInfo* New() const { return New(NULL); }

  seriesDaysAwardImageInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const seriesDaysAwardImageInfo& from);
  void MergeFrom(const seriesDaysAwardImageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(seriesDaysAwardImageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 days = 1;
  void clear_days();
  static const int kDaysFieldNumber = 1;
  ::google::protobuf::uint32 days() const;
  void set_days(::google::protobuf::uint32 value);

  // optional .signAwardImageInfo signAwardImageInfo = 2;
  bool has_signawardimageinfo() const;
  void clear_signawardimageinfo();
  static const int kSignAwardImageInfoFieldNumber = 2;
  const ::signAwardImageInfo& signawardimageinfo() const;
  ::signAwardImageInfo* mutable_signawardimageinfo();
  ::signAwardImageInfo* release_signawardimageinfo();
  void set_allocated_signawardimageinfo(::signAwardImageInfo* signawardimageinfo);

  // @@protoc_insertion_point(class_scope:seriesDaysAwardImageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::signAwardImageInfo* signawardimageinfo_;
  ::google::protobuf::uint32 days_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static seriesDaysAwardImageInfo* default_instance_;
};
// -------------------------------------------------------------------

class SignAward : public ::google::protobuf::Message {
 public:
  SignAward();
  virtual ~SignAward();

  SignAward(const SignAward& from);

  inline SignAward& operator=(const SignAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignAward& default_instance();

  void Swap(SignAward* other);

  // implements Message ----------------------------------------------

  inline SignAward* New() const { return New(NULL); }

  SignAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignAward& from);
  void MergeFrom(const SignAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 week = 1;
  void clear_week();
  static const int kWeekFieldNumber = 1;
  ::google::protobuf::uint32 week() const;
  void set_week(::google::protobuf::uint32 value);

  // repeated uint32 isSignedFlags = 2;
  int issignedflags_size() const;
  void clear_issignedflags();
  static const int kIsSignedFlagsFieldNumber = 2;
  ::google::protobuf::uint32 issignedflags(int index) const;
  void set_issignedflags(int index, ::google::protobuf::uint32 value);
  void add_issignedflags(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      issignedflags() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_issignedflags();

  // optional uint32 isaward = 3;
  void clear_isaward();
  static const int kIsawardFieldNumber = 3;
  ::google::protobuf::uint32 isaward() const;
  void set_isaward(::google::protobuf::uint32 value);

  // repeated .signAwardImageInfo commonTotalAwards = 4;
  int commontotalawards_size() const;
  void clear_commontotalawards();
  static const int kCommonTotalAwardsFieldNumber = 4;
  const ::signAwardImageInfo& commontotalawards(int index) const;
  ::signAwardImageInfo* mutable_commontotalawards(int index);
  ::signAwardImageInfo* add_commontotalawards();
  ::google::protobuf::RepeatedPtrField< ::signAwardImageInfo >*
      mutable_commontotalawards();
  const ::google::protobuf::RepeatedPtrField< ::signAwardImageInfo >&
      commontotalawards() const;

  // repeated .seriesDaysAwardImageInfo extAwards = 5;
  int extawards_size() const;
  void clear_extawards();
  static const int kExtAwardsFieldNumber = 5;
  const ::seriesDaysAwardImageInfo& extawards(int index) const;
  ::seriesDaysAwardImageInfo* mutable_extawards(int index);
  ::seriesDaysAwardImageInfo* add_extawards();
  ::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo >*
      mutable_extawards();
  const ::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo >&
      extawards() const;

  // @@protoc_insertion_point(class_scope:SignAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > issignedflags_;
  mutable int _issignedflags_cached_byte_size_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::uint32 isaward_;
  ::google::protobuf::RepeatedPtrField< ::signAwardImageInfo > commontotalawards_;
  ::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo > extawards_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static SignAward* default_instance_;
};
// -------------------------------------------------------------------

class RegisterAwardItem : public ::google::protobuf::Message {
 public:
  RegisterAwardItem();
  virtual ~RegisterAwardItem();

  RegisterAwardItem(const RegisterAwardItem& from);

  inline RegisterAwardItem& operator=(const RegisterAwardItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAwardItem& default_instance();

  void Swap(RegisterAwardItem* other);

  // implements Message ----------------------------------------------

  inline RegisterAwardItem* New() const { return New(NULL); }

  RegisterAwardItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterAwardItem& from);
  void MergeFrom(const RegisterAwardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterAwardItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 prop_id = 1;
  void clear_prop_id();
  static const int kPropIdFieldNumber = 1;
  ::google::protobuf::uint32 prop_id() const;
  void set_prop_id(::google::protobuf::uint32 value);

  // optional uint32 prop_count = 2;
  void clear_prop_count();
  static const int kPropCountFieldNumber = 2;
  ::google::protobuf::uint32 prop_count() const;
  void set_prop_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RegisterAwardItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 prop_id_;
  ::google::protobuf::uint32 prop_count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static RegisterAwardItem* default_instance_;
};
// -------------------------------------------------------------------

class RegisterOneDay : public ::google::protobuf::Message {
 public:
  RegisterOneDay();
  virtual ~RegisterOneDay();

  RegisterOneDay(const RegisterOneDay& from);

  inline RegisterOneDay& operator=(const RegisterOneDay& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterOneDay& default_instance();

  void Swap(RegisterOneDay* other);

  // implements Message ----------------------------------------------

  inline RegisterOneDay* New() const { return New(NULL); }

  RegisterOneDay* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterOneDay& from);
  void MergeFrom(const RegisterOneDay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterOneDay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_award_getted = 1;
  void clear_is_award_getted();
  static const int kIsAwardGettedFieldNumber = 1;
  bool is_award_getted() const;
  void set_is_award_getted(bool value);

  // repeated .RegisterAwardItem one_day_award = 2;
  int one_day_award_size() const;
  void clear_one_day_award();
  static const int kOneDayAwardFieldNumber = 2;
  const ::RegisterAwardItem& one_day_award(int index) const;
  ::RegisterAwardItem* mutable_one_day_award(int index);
  ::RegisterAwardItem* add_one_day_award();
  ::google::protobuf::RepeatedPtrField< ::RegisterAwardItem >*
      mutable_one_day_award();
  const ::google::protobuf::RepeatedPtrField< ::RegisterAwardItem >&
      one_day_award() const;

  // @@protoc_insertion_point(class_scope:RegisterOneDay)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::RegisterAwardItem > one_day_award_;
  bool is_award_getted_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static RegisterOneDay* default_instance_;
};
// -------------------------------------------------------------------

class RegisterAward : public ::google::protobuf::Message {
 public:
  RegisterAward();
  virtual ~RegisterAward();

  RegisterAward(const RegisterAward& from);

  inline RegisterAward& operator=(const RegisterAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterAward& default_instance();

  void Swap(RegisterAward* other);

  // implements Message ----------------------------------------------

  inline RegisterAward* New() const { return New(NULL); }

  RegisterAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterAward& from);
  void MergeFrom(const RegisterAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_award = 1;
  void clear_is_award();
  static const int kIsAwardFieldNumber = 1;
  ::google::protobuf::uint32 is_award() const;
  void set_is_award(::google::protobuf::uint32 value);

  // optional uint32 todayIndex = 2;
  void clear_todayindex();
  static const int kTodayIndexFieldNumber = 2;
  ::google::protobuf::uint32 todayindex() const;
  void set_todayindex(::google::protobuf::uint32 value);

  // repeated .RegisterOneDay total_days = 3;
  int total_days_size() const;
  void clear_total_days();
  static const int kTotalDaysFieldNumber = 3;
  const ::RegisterOneDay& total_days(int index) const;
  ::RegisterOneDay* mutable_total_days(int index);
  ::RegisterOneDay* add_total_days();
  ::google::protobuf::RepeatedPtrField< ::RegisterOneDay >*
      mutable_total_days();
  const ::google::protobuf::RepeatedPtrField< ::RegisterOneDay >&
      total_days() const;

  // @@protoc_insertion_point(class_scope:RegisterAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 is_award_;
  ::google::protobuf::uint32 todayindex_;
  ::google::protobuf::RepeatedPtrField< ::RegisterOneDay > total_days_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static RegisterAward* default_instance_;
};
// -------------------------------------------------------------------

class CountBoxAward_AwardCfg : public ::google::protobuf::Message {
 public:
  CountBoxAward_AwardCfg();
  virtual ~CountBoxAward_AwardCfg();

  CountBoxAward_AwardCfg(const CountBoxAward_AwardCfg& from);

  inline CountBoxAward_AwardCfg& operator=(const CountBoxAward_AwardCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountBoxAward_AwardCfg& default_instance();

  void Swap(CountBoxAward_AwardCfg* other);

  // implements Message ----------------------------------------------

  inline CountBoxAward_AwardCfg* New() const { return New(NULL); }

  CountBoxAward_AwardCfg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountBoxAward_AwardCfg& from);
  void MergeFrom(const CountBoxAward_AwardCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CountBoxAward_AwardCfg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::uint32 time() const;
  void set_time(::google::protobuf::uint32 value);

  // optional uint64 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:CountBoxAward.AwardCfg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 time_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static CountBoxAward_AwardCfg* default_instance_;
};
// -------------------------------------------------------------------

class CountBoxAward : public ::google::protobuf::Message {
 public:
  CountBoxAward();
  virtual ~CountBoxAward();

  CountBoxAward(const CountBoxAward& from);

  inline CountBoxAward& operator=(const CountBoxAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountBoxAward& default_instance();

  void Swap(CountBoxAward* other);

  // implements Message ----------------------------------------------

  inline CountBoxAward* New() const { return New(NULL); }

  CountBoxAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountBoxAward& from);
  void MergeFrom(const CountBoxAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CountBoxAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CountBoxAward_AwardCfg AwardCfg;

  // accessors -------------------------------------------------------

  // optional uint32 duration = 1;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional uint32 step = 2;
  void clear_step();
  static const int kStepFieldNumber = 2;
  ::google::protobuf::uint32 step() const;
  void set_step(::google::protobuf::uint32 value);

  // repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
  int awardconfigs_size() const;
  void clear_awardconfigs();
  static const int kAwardConfigsFieldNumber = 3;
  const ::CountBoxAward_AwardCfg& awardconfigs(int index) const;
  ::CountBoxAward_AwardCfg* mutable_awardconfigs(int index);
  ::CountBoxAward_AwardCfg* add_awardconfigs();
  ::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg >*
      mutable_awardconfigs();
  const ::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg >&
      awardconfigs() const;

  // @@protoc_insertion_point(class_scope:CountBoxAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 step_;
  ::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg > awardconfigs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static CountBoxAward* default_instance_;
};
// -------------------------------------------------------------------

class FreechipStatus : public ::google::protobuf::Message {
 public:
  FreechipStatus();
  virtual ~FreechipStatus();

  FreechipStatus(const FreechipStatus& from);

  inline FreechipStatus& operator=(const FreechipStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreechipStatus& default_instance();

  void Swap(FreechipStatus* other);

  // implements Message ----------------------------------------------

  inline FreechipStatus* New() const { return New(NULL); }

  FreechipStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreechipStatus& from);
  void MergeFrom(const FreechipStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FreechipStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 daily_sign = 1;
  void clear_daily_sign();
  static const int kDailySignFieldNumber = 1;
  ::google::protobuf::uint32 daily_sign() const;
  void set_daily_sign(::google::protobuf::uint32 value);

  // optional uint32 login_award = 2;
  void clear_login_award();
  static const int kLoginAwardFieldNumber = 2;
  ::google::protobuf::uint32 login_award() const;
  void set_login_award(::google::protobuf::uint32 value);

  // optional uint32 daily_task = 3;
  void clear_daily_task();
  static const int kDailyTaskFieldNumber = 3;
  ::google::protobuf::uint32 daily_task() const;
  void set_daily_task(::google::protobuf::uint32 value);

  // optional uint32 activity_center = 4;
  void clear_activity_center();
  static const int kActivityCenterFieldNumber = 4;
  ::google::protobuf::uint32 activity_center() const;
  void set_activity_center(::google::protobuf::uint32 value);

  // optional uint32 counting_box = 5;
  void clear_counting_box();
  static const int kCountingBoxFieldNumber = 5;
  ::google::protobuf::uint32 counting_box() const;
  void set_counting_box(::google::protobuf::uint32 value);

  // optional uint32 register_award = 6;
  void clear_register_award();
  static const int kRegisterAwardFieldNumber = 6;
  ::google::protobuf::uint32 register_award() const;
  void set_register_award(::google::protobuf::uint32 value);

  // optional uint32 activity_gamecount = 7;
  void clear_activity_gamecount();
  static const int kActivityGamecountFieldNumber = 7;
  ::google::protobuf::uint32 activity_gamecount() const;
  void set_activity_gamecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:FreechipStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 daily_sign_;
  ::google::protobuf::uint32 login_award_;
  ::google::protobuf::uint32 daily_task_;
  ::google::protobuf::uint32 activity_center_;
  ::google::protobuf::uint32 counting_box_;
  ::google::protobuf::uint32 register_award_;
  ::google::protobuf::uint32 activity_gamecount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static FreechipStatus* default_instance_;
};
// -------------------------------------------------------------------

class AllAwardsResponse : public ::google::protobuf::Message {
 public:
  AllAwardsResponse();
  virtual ~AllAwardsResponse();

  AllAwardsResponse(const AllAwardsResponse& from);

  inline AllAwardsResponse& operator=(const AllAwardsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllAwardsResponse& default_instance();

  void Swap(AllAwardsResponse* other);

  // implements Message ----------------------------------------------

  inline AllAwardsResponse* New() const { return New(NULL); }

  AllAwardsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllAwardsResponse& from);
  void MergeFrom(const AllAwardsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllAwardsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional .LoginAward loginAward = 2;
  bool has_loginaward() const;
  void clear_loginaward();
  static const int kLoginAwardFieldNumber = 2;
  const ::LoginAward& loginaward() const;
  ::LoginAward* mutable_loginaward();
  ::LoginAward* release_loginaward();
  void set_allocated_loginaward(::LoginAward* loginaward);

  // optional .RegisterAward registerAward = 3;
  bool has_registeraward() const;
  void clear_registeraward();
  static const int kRegisterAwardFieldNumber = 3;
  const ::RegisterAward& registeraward() const;
  ::RegisterAward* mutable_registeraward();
  ::RegisterAward* release_registeraward();
  void set_allocated_registeraward(::RegisterAward* registeraward);

  // optional .SignAward signAward = 4;
  bool has_signaward() const;
  void clear_signaward();
  static const int kSignAwardFieldNumber = 4;
  const ::SignAward& signaward() const;
  ::SignAward* mutable_signaward();
  ::SignAward* release_signaward();
  void set_allocated_signaward(::SignAward* signaward);

  // optional .CountBoxAward countBoxAward = 5;
  bool has_countboxaward() const;
  void clear_countboxaward();
  static const int kCountBoxAwardFieldNumber = 5;
  const ::CountBoxAward& countboxaward() const;
  ::CountBoxAward* mutable_countboxaward();
  ::CountBoxAward* release_countboxaward();
  void set_allocated_countboxaward(::CountBoxAward* countboxaward);

  // optional .FreechipStatus freechipStatus = 6;
  bool has_freechipstatus() const;
  void clear_freechipstatus();
  static const int kFreechipStatusFieldNumber = 6;
  const ::FreechipStatus& freechipstatus() const;
  ::FreechipStatus* mutable_freechipstatus();
  ::FreechipStatus* release_freechipstatus();
  void set_allocated_freechipstatus(::FreechipStatus* freechipstatus);

  // @@protoc_insertion_point(class_scope:AllAwardsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::LoginAward* loginaward_;
  ::RegisterAward* registeraward_;
  ::SignAward* signaward_;
  ::CountBoxAward* countboxaward_;
  ::FreechipStatus* freechipstatus_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Awards_2eproto();
  friend void protobuf_AssignDesc_Awards_2eproto();
  friend void protobuf_ShutdownFile_Awards_2eproto();

  void InitAsDefaultInstance();
  static AllAwardsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAward

// optional bytes step = 1;
inline void LoginAward::clear_step() {
  step_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginAward::step() const {
  // @@protoc_insertion_point(field_get:LoginAward.step)
  return step_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginAward::set_step(const ::std::string& value) {
  
  step_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginAward.step)
}
inline void LoginAward::set_step(const char* value) {
  
  step_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginAward.step)
}
inline void LoginAward::set_step(const void* value, size_t size) {
  
  step_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginAward.step)
}
inline ::std::string* LoginAward::mutable_step() {
  
  // @@protoc_insertion_point(field_mutable:LoginAward.step)
  return step_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginAward::release_step() {
  // @@protoc_insertion_point(field_release:LoginAward.step)
  
  return step_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginAward::set_allocated_step(::std::string* step) {
  if (step != NULL) {
    
  } else {
    
  }
  step_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), step);
  // @@protoc_insertion_point(field_set_allocated:LoginAward.step)
}

// optional uint64 award_next_money = 2;
inline void LoginAward::clear_award_next_money() {
  award_next_money_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LoginAward::award_next_money() const {
  // @@protoc_insertion_point(field_get:LoginAward.award_next_money)
  return award_next_money_;
}
inline void LoginAward::set_award_next_money(::google::protobuf::uint64 value) {
  
  award_next_money_ = value;
  // @@protoc_insertion_point(field_set:LoginAward.award_next_money)
}

// optional uint32 award_counttime = 3;
inline void LoginAward::clear_award_counttime() {
  award_counttime_ = 0u;
}
inline ::google::protobuf::uint32 LoginAward::award_counttime() const {
  // @@protoc_insertion_point(field_get:LoginAward.award_counttime)
  return award_counttime_;
}
inline void LoginAward::set_award_counttime(::google::protobuf::uint32 value) {
  
  award_counttime_ = value;
  // @@protoc_insertion_point(field_set:LoginAward.award_counttime)
}

// -------------------------------------------------------------------

// signAwardImageInfo

// optional .signAwardImageInfo.signAwardImageType type = 1;
inline void signAwardImageInfo::clear_type() {
  type_ = 0;
}
inline ::signAwardImageInfo_signAwardImageType signAwardImageInfo::type() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.type)
  return static_cast< ::signAwardImageInfo_signAwardImageType >(type_);
}
inline void signAwardImageInfo::set_type(::signAwardImageInfo_signAwardImageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.type)
}

// optional uint32 imageId = 2;
inline void signAwardImageInfo::clear_imageid() {
  imageid_ = 0u;
}
inline ::google::protobuf::uint32 signAwardImageInfo::imageid() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.imageId)
  return imageid_;
}
inline void signAwardImageInfo::set_imageid(::google::protobuf::uint32 value) {
  
  imageid_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.imageId)
}

// optional uint64 signAwardImageNum = 3;
inline void signAwardImageInfo::clear_signawardimagenum() {
  signawardimagenum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 signAwardImageInfo::signawardimagenum() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.signAwardImageNum)
  return signawardimagenum_;
}
inline void signAwardImageInfo::set_signawardimagenum(::google::protobuf::uint64 value) {
  
  signawardimagenum_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.signAwardImageNum)
}

// optional uint32 bSignAward = 4;
inline void signAwardImageInfo::clear_bsignaward() {
  bsignaward_ = 0u;
}
inline ::google::protobuf::uint32 signAwardImageInfo::bsignaward() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.bSignAward)
  return bsignaward_;
}
inline void signAwardImageInfo::set_bsignaward(::google::protobuf::uint32 value) {
  
  bsignaward_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.bSignAward)
}

// optional string signAwardImageUrl = 5;
inline void signAwardImageInfo::clear_signawardimageurl() {
  signawardimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& signAwardImageInfo::signawardimageurl() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.signAwardImageUrl)
  return signawardimageurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signAwardImageInfo::set_signawardimageurl(const ::std::string& value) {
  
  signawardimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:signAwardImageInfo.signAwardImageUrl)
}
inline void signAwardImageInfo::set_signawardimageurl(const char* value) {
  
  signawardimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signAwardImageInfo.signAwardImageUrl)
}
inline void signAwardImageInfo::set_signawardimageurl(const char* value, size_t size) {
  
  signawardimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signAwardImageInfo.signAwardImageUrl)
}
inline ::std::string* signAwardImageInfo::mutable_signawardimageurl() {
  
  // @@protoc_insertion_point(field_mutable:signAwardImageInfo.signAwardImageUrl)
  return signawardimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* signAwardImageInfo::release_signawardimageurl() {
  // @@protoc_insertion_point(field_release:signAwardImageInfo.signAwardImageUrl)
  
  return signawardimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void signAwardImageInfo::set_allocated_signawardimageurl(::std::string* signawardimageurl) {
  if (signawardimageurl != NULL) {
    
  } else {
    
  }
  signawardimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signawardimageurl);
  // @@protoc_insertion_point(field_set_allocated:signAwardImageInfo.signAwardImageUrl)
}

// optional uint32 signAwardImageBgColor = 6;
inline void signAwardImageInfo::clear_signawardimagebgcolor() {
  signawardimagebgcolor_ = 0u;
}
inline ::google::protobuf::uint32 signAwardImageInfo::signawardimagebgcolor() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.signAwardImageBgColor)
  return signawardimagebgcolor_;
}
inline void signAwardImageInfo::set_signawardimagebgcolor(::google::protobuf::uint32 value) {
  
  signawardimagebgcolor_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.signAwardImageBgColor)
}

// -------------------------------------------------------------------

// seriesDaysAwardImageInfo

// optional uint32 days = 1;
inline void seriesDaysAwardImageInfo::clear_days() {
  days_ = 0u;
}
inline ::google::protobuf::uint32 seriesDaysAwardImageInfo::days() const {
  // @@protoc_insertion_point(field_get:seriesDaysAwardImageInfo.days)
  return days_;
}
inline void seriesDaysAwardImageInfo::set_days(::google::protobuf::uint32 value) {
  
  days_ = value;
  // @@protoc_insertion_point(field_set:seriesDaysAwardImageInfo.days)
}

// optional .signAwardImageInfo signAwardImageInfo = 2;
inline bool seriesDaysAwardImageInfo::has_signawardimageinfo() const {
  return !_is_default_instance_ && signawardimageinfo_ != NULL;
}
inline void seriesDaysAwardImageInfo::clear_signawardimageinfo() {
  if (GetArenaNoVirtual() == NULL && signawardimageinfo_ != NULL) delete signawardimageinfo_;
  signawardimageinfo_ = NULL;
}
inline const ::signAwardImageInfo& seriesDaysAwardImageInfo::signawardimageinfo() const {
  // @@protoc_insertion_point(field_get:seriesDaysAwardImageInfo.signAwardImageInfo)
  return signawardimageinfo_ != NULL ? *signawardimageinfo_ : *default_instance_->signawardimageinfo_;
}
inline ::signAwardImageInfo* seriesDaysAwardImageInfo::mutable_signawardimageinfo() {
  
  if (signawardimageinfo_ == NULL) {
    signawardimageinfo_ = new ::signAwardImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:seriesDaysAwardImageInfo.signAwardImageInfo)
  return signawardimageinfo_;
}
inline ::signAwardImageInfo* seriesDaysAwardImageInfo::release_signawardimageinfo() {
  // @@protoc_insertion_point(field_release:seriesDaysAwardImageInfo.signAwardImageInfo)
  
  ::signAwardImageInfo* temp = signawardimageinfo_;
  signawardimageinfo_ = NULL;
  return temp;
}
inline void seriesDaysAwardImageInfo::set_allocated_signawardimageinfo(::signAwardImageInfo* signawardimageinfo) {
  delete signawardimageinfo_;
  signawardimageinfo_ = signawardimageinfo;
  if (signawardimageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seriesDaysAwardImageInfo.signAwardImageInfo)
}

// -------------------------------------------------------------------

// SignAward

// optional uint32 week = 1;
inline void SignAward::clear_week() {
  week_ = 0u;
}
inline ::google::protobuf::uint32 SignAward::week() const {
  // @@protoc_insertion_point(field_get:SignAward.week)
  return week_;
}
inline void SignAward::set_week(::google::protobuf::uint32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:SignAward.week)
}

// repeated uint32 isSignedFlags = 2;
inline int SignAward::issignedflags_size() const {
  return issignedflags_.size();
}
inline void SignAward::clear_issignedflags() {
  issignedflags_.Clear();
}
inline ::google::protobuf::uint32 SignAward::issignedflags(int index) const {
  // @@protoc_insertion_point(field_get:SignAward.isSignedFlags)
  return issignedflags_.Get(index);
}
inline void SignAward::set_issignedflags(int index, ::google::protobuf::uint32 value) {
  issignedflags_.Set(index, value);
  // @@protoc_insertion_point(field_set:SignAward.isSignedFlags)
}
inline void SignAward::add_issignedflags(::google::protobuf::uint32 value) {
  issignedflags_.Add(value);
  // @@protoc_insertion_point(field_add:SignAward.isSignedFlags)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SignAward::issignedflags() const {
  // @@protoc_insertion_point(field_list:SignAward.isSignedFlags)
  return issignedflags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SignAward::mutable_issignedflags() {
  // @@protoc_insertion_point(field_mutable_list:SignAward.isSignedFlags)
  return &issignedflags_;
}

// optional uint32 isaward = 3;
inline void SignAward::clear_isaward() {
  isaward_ = 0u;
}
inline ::google::protobuf::uint32 SignAward::isaward() const {
  // @@protoc_insertion_point(field_get:SignAward.isaward)
  return isaward_;
}
inline void SignAward::set_isaward(::google::protobuf::uint32 value) {
  
  isaward_ = value;
  // @@protoc_insertion_point(field_set:SignAward.isaward)
}

// repeated .signAwardImageInfo commonTotalAwards = 4;
inline int SignAward::commontotalawards_size() const {
  return commontotalawards_.size();
}
inline void SignAward::clear_commontotalawards() {
  commontotalawards_.Clear();
}
inline const ::signAwardImageInfo& SignAward::commontotalawards(int index) const {
  // @@protoc_insertion_point(field_get:SignAward.commonTotalAwards)
  return commontotalawards_.Get(index);
}
inline ::signAwardImageInfo* SignAward::mutable_commontotalawards(int index) {
  // @@protoc_insertion_point(field_mutable:SignAward.commonTotalAwards)
  return commontotalawards_.Mutable(index);
}
inline ::signAwardImageInfo* SignAward::add_commontotalawards() {
  // @@protoc_insertion_point(field_add:SignAward.commonTotalAwards)
  return commontotalawards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::signAwardImageInfo >*
SignAward::mutable_commontotalawards() {
  // @@protoc_insertion_point(field_mutable_list:SignAward.commonTotalAwards)
  return &commontotalawards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::signAwardImageInfo >&
SignAward::commontotalawards() const {
  // @@protoc_insertion_point(field_list:SignAward.commonTotalAwards)
  return commontotalawards_;
}

// repeated .seriesDaysAwardImageInfo extAwards = 5;
inline int SignAward::extawards_size() const {
  return extawards_.size();
}
inline void SignAward::clear_extawards() {
  extawards_.Clear();
}
inline const ::seriesDaysAwardImageInfo& SignAward::extawards(int index) const {
  // @@protoc_insertion_point(field_get:SignAward.extAwards)
  return extawards_.Get(index);
}
inline ::seriesDaysAwardImageInfo* SignAward::mutable_extawards(int index) {
  // @@protoc_insertion_point(field_mutable:SignAward.extAwards)
  return extawards_.Mutable(index);
}
inline ::seriesDaysAwardImageInfo* SignAward::add_extawards() {
  // @@protoc_insertion_point(field_add:SignAward.extAwards)
  return extawards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo >*
SignAward::mutable_extawards() {
  // @@protoc_insertion_point(field_mutable_list:SignAward.extAwards)
  return &extawards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo >&
SignAward::extawards() const {
  // @@protoc_insertion_point(field_list:SignAward.extAwards)
  return extawards_;
}

// -------------------------------------------------------------------

// RegisterAwardItem

// optional uint32 prop_id = 1;
inline void RegisterAwardItem::clear_prop_id() {
  prop_id_ = 0u;
}
inline ::google::protobuf::uint32 RegisterAwardItem::prop_id() const {
  // @@protoc_insertion_point(field_get:RegisterAwardItem.prop_id)
  return prop_id_;
}
inline void RegisterAwardItem::set_prop_id(::google::protobuf::uint32 value) {
  
  prop_id_ = value;
  // @@protoc_insertion_point(field_set:RegisterAwardItem.prop_id)
}

// optional uint32 prop_count = 2;
inline void RegisterAwardItem::clear_prop_count() {
  prop_count_ = 0u;
}
inline ::google::protobuf::uint32 RegisterAwardItem::prop_count() const {
  // @@protoc_insertion_point(field_get:RegisterAwardItem.prop_count)
  return prop_count_;
}
inline void RegisterAwardItem::set_prop_count(::google::protobuf::uint32 value) {
  
  prop_count_ = value;
  // @@protoc_insertion_point(field_set:RegisterAwardItem.prop_count)
}

// -------------------------------------------------------------------

// RegisterOneDay

// optional bool is_award_getted = 1;
inline void RegisterOneDay::clear_is_award_getted() {
  is_award_getted_ = false;
}
inline bool RegisterOneDay::is_award_getted() const {
  // @@protoc_insertion_point(field_get:RegisterOneDay.is_award_getted)
  return is_award_getted_;
}
inline void RegisterOneDay::set_is_award_getted(bool value) {
  
  is_award_getted_ = value;
  // @@protoc_insertion_point(field_set:RegisterOneDay.is_award_getted)
}

// repeated .RegisterAwardItem one_day_award = 2;
inline int RegisterOneDay::one_day_award_size() const {
  return one_day_award_.size();
}
inline void RegisterOneDay::clear_one_day_award() {
  one_day_award_.Clear();
}
inline const ::RegisterAwardItem& RegisterOneDay::one_day_award(int index) const {
  // @@protoc_insertion_point(field_get:RegisterOneDay.one_day_award)
  return one_day_award_.Get(index);
}
inline ::RegisterAwardItem* RegisterOneDay::mutable_one_day_award(int index) {
  // @@protoc_insertion_point(field_mutable:RegisterOneDay.one_day_award)
  return one_day_award_.Mutable(index);
}
inline ::RegisterAwardItem* RegisterOneDay::add_one_day_award() {
  // @@protoc_insertion_point(field_add:RegisterOneDay.one_day_award)
  return one_day_award_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RegisterAwardItem >*
RegisterOneDay::mutable_one_day_award() {
  // @@protoc_insertion_point(field_mutable_list:RegisterOneDay.one_day_award)
  return &one_day_award_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RegisterAwardItem >&
RegisterOneDay::one_day_award() const {
  // @@protoc_insertion_point(field_list:RegisterOneDay.one_day_award)
  return one_day_award_;
}

// -------------------------------------------------------------------

// RegisterAward

// optional uint32 is_award = 1;
inline void RegisterAward::clear_is_award() {
  is_award_ = 0u;
}
inline ::google::protobuf::uint32 RegisterAward::is_award() const {
  // @@protoc_insertion_point(field_get:RegisterAward.is_award)
  return is_award_;
}
inline void RegisterAward::set_is_award(::google::protobuf::uint32 value) {
  
  is_award_ = value;
  // @@protoc_insertion_point(field_set:RegisterAward.is_award)
}

// optional uint32 todayIndex = 2;
inline void RegisterAward::clear_todayindex() {
  todayindex_ = 0u;
}
inline ::google::protobuf::uint32 RegisterAward::todayindex() const {
  // @@protoc_insertion_point(field_get:RegisterAward.todayIndex)
  return todayindex_;
}
inline void RegisterAward::set_todayindex(::google::protobuf::uint32 value) {
  
  todayindex_ = value;
  // @@protoc_insertion_point(field_set:RegisterAward.todayIndex)
}

// repeated .RegisterOneDay total_days = 3;
inline int RegisterAward::total_days_size() const {
  return total_days_.size();
}
inline void RegisterAward::clear_total_days() {
  total_days_.Clear();
}
inline const ::RegisterOneDay& RegisterAward::total_days(int index) const {
  // @@protoc_insertion_point(field_get:RegisterAward.total_days)
  return total_days_.Get(index);
}
inline ::RegisterOneDay* RegisterAward::mutable_total_days(int index) {
  // @@protoc_insertion_point(field_mutable:RegisterAward.total_days)
  return total_days_.Mutable(index);
}
inline ::RegisterOneDay* RegisterAward::add_total_days() {
  // @@protoc_insertion_point(field_add:RegisterAward.total_days)
  return total_days_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::RegisterOneDay >*
RegisterAward::mutable_total_days() {
  // @@protoc_insertion_point(field_mutable_list:RegisterAward.total_days)
  return &total_days_;
}
inline const ::google::protobuf::RepeatedPtrField< ::RegisterOneDay >&
RegisterAward::total_days() const {
  // @@protoc_insertion_point(field_list:RegisterAward.total_days)
  return total_days_;
}

// -------------------------------------------------------------------

// CountBoxAward_AwardCfg

// optional uint32 time = 1;
inline void CountBoxAward_AwardCfg::clear_time() {
  time_ = 0u;
}
inline ::google::protobuf::uint32 CountBoxAward_AwardCfg::time() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.AwardCfg.time)
  return time_;
}
inline void CountBoxAward_AwardCfg::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.AwardCfg.time)
}

// optional uint64 amount = 2;
inline void CountBoxAward_AwardCfg::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CountBoxAward_AwardCfg::amount() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.AwardCfg.amount)
  return amount_;
}
inline void CountBoxAward_AwardCfg::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.AwardCfg.amount)
}

// -------------------------------------------------------------------

// CountBoxAward

// optional uint32 duration = 1;
inline void CountBoxAward::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 CountBoxAward::duration() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.duration)
  return duration_;
}
inline void CountBoxAward::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.duration)
}

// optional uint32 step = 2;
inline void CountBoxAward::clear_step() {
  step_ = 0u;
}
inline ::google::protobuf::uint32 CountBoxAward::step() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.step)
  return step_;
}
inline void CountBoxAward::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.step)
}

// repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
inline int CountBoxAward::awardconfigs_size() const {
  return awardconfigs_.size();
}
inline void CountBoxAward::clear_awardconfigs() {
  awardconfigs_.Clear();
}
inline const ::CountBoxAward_AwardCfg& CountBoxAward::awardconfigs(int index) const {
  // @@protoc_insertion_point(field_get:CountBoxAward.AwardConfigs)
  return awardconfigs_.Get(index);
}
inline ::CountBoxAward_AwardCfg* CountBoxAward::mutable_awardconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:CountBoxAward.AwardConfigs)
  return awardconfigs_.Mutable(index);
}
inline ::CountBoxAward_AwardCfg* CountBoxAward::add_awardconfigs() {
  // @@protoc_insertion_point(field_add:CountBoxAward.AwardConfigs)
  return awardconfigs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg >*
CountBoxAward::mutable_awardconfigs() {
  // @@protoc_insertion_point(field_mutable_list:CountBoxAward.AwardConfigs)
  return &awardconfigs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg >&
CountBoxAward::awardconfigs() const {
  // @@protoc_insertion_point(field_list:CountBoxAward.AwardConfigs)
  return awardconfigs_;
}

// -------------------------------------------------------------------

// FreechipStatus

// optional uint32 daily_sign = 1;
inline void FreechipStatus::clear_daily_sign() {
  daily_sign_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::daily_sign() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.daily_sign)
  return daily_sign_;
}
inline void FreechipStatus::set_daily_sign(::google::protobuf::uint32 value) {
  
  daily_sign_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.daily_sign)
}

// optional uint32 login_award = 2;
inline void FreechipStatus::clear_login_award() {
  login_award_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::login_award() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.login_award)
  return login_award_;
}
inline void FreechipStatus::set_login_award(::google::protobuf::uint32 value) {
  
  login_award_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.login_award)
}

// optional uint32 daily_task = 3;
inline void FreechipStatus::clear_daily_task() {
  daily_task_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::daily_task() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.daily_task)
  return daily_task_;
}
inline void FreechipStatus::set_daily_task(::google::protobuf::uint32 value) {
  
  daily_task_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.daily_task)
}

// optional uint32 activity_center = 4;
inline void FreechipStatus::clear_activity_center() {
  activity_center_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::activity_center() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.activity_center)
  return activity_center_;
}
inline void FreechipStatus::set_activity_center(::google::protobuf::uint32 value) {
  
  activity_center_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.activity_center)
}

// optional uint32 counting_box = 5;
inline void FreechipStatus::clear_counting_box() {
  counting_box_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::counting_box() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.counting_box)
  return counting_box_;
}
inline void FreechipStatus::set_counting_box(::google::protobuf::uint32 value) {
  
  counting_box_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.counting_box)
}

// optional uint32 register_award = 6;
inline void FreechipStatus::clear_register_award() {
  register_award_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::register_award() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.register_award)
  return register_award_;
}
inline void FreechipStatus::set_register_award(::google::protobuf::uint32 value) {
  
  register_award_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.register_award)
}

// optional uint32 activity_gamecount = 7;
inline void FreechipStatus::clear_activity_gamecount() {
  activity_gamecount_ = 0u;
}
inline ::google::protobuf::uint32 FreechipStatus::activity_gamecount() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.activity_gamecount)
  return activity_gamecount_;
}
inline void FreechipStatus::set_activity_gamecount(::google::protobuf::uint32 value) {
  
  activity_gamecount_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.activity_gamecount)
}

// -------------------------------------------------------------------

// AllAwardsResponse

// optional .ResponseHeader head = 1;
inline bool AllAwardsResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void AllAwardsResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& AllAwardsResponse::head() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* AllAwardsResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.head)
  return head_;
}
inline ::ResponseHeader* AllAwardsResponse::release_head() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void AllAwardsResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.head)
}

// optional .LoginAward loginAward = 2;
inline bool AllAwardsResponse::has_loginaward() const {
  return !_is_default_instance_ && loginaward_ != NULL;
}
inline void AllAwardsResponse::clear_loginaward() {
  if (GetArenaNoVirtual() == NULL && loginaward_ != NULL) delete loginaward_;
  loginaward_ = NULL;
}
inline const ::LoginAward& AllAwardsResponse::loginaward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.loginAward)
  return loginaward_ != NULL ? *loginaward_ : *default_instance_->loginaward_;
}
inline ::LoginAward* AllAwardsResponse::mutable_loginaward() {
  
  if (loginaward_ == NULL) {
    loginaward_ = new ::LoginAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.loginAward)
  return loginaward_;
}
inline ::LoginAward* AllAwardsResponse::release_loginaward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.loginAward)
  
  ::LoginAward* temp = loginaward_;
  loginaward_ = NULL;
  return temp;
}
inline void AllAwardsResponse::set_allocated_loginaward(::LoginAward* loginaward) {
  delete loginaward_;
  loginaward_ = loginaward;
  if (loginaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.loginAward)
}

// optional .RegisterAward registerAward = 3;
inline bool AllAwardsResponse::has_registeraward() const {
  return !_is_default_instance_ && registeraward_ != NULL;
}
inline void AllAwardsResponse::clear_registeraward() {
  if (GetArenaNoVirtual() == NULL && registeraward_ != NULL) delete registeraward_;
  registeraward_ = NULL;
}
inline const ::RegisterAward& AllAwardsResponse::registeraward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.registerAward)
  return registeraward_ != NULL ? *registeraward_ : *default_instance_->registeraward_;
}
inline ::RegisterAward* AllAwardsResponse::mutable_registeraward() {
  
  if (registeraward_ == NULL) {
    registeraward_ = new ::RegisterAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.registerAward)
  return registeraward_;
}
inline ::RegisterAward* AllAwardsResponse::release_registeraward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.registerAward)
  
  ::RegisterAward* temp = registeraward_;
  registeraward_ = NULL;
  return temp;
}
inline void AllAwardsResponse::set_allocated_registeraward(::RegisterAward* registeraward) {
  delete registeraward_;
  registeraward_ = registeraward;
  if (registeraward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.registerAward)
}

// optional .SignAward signAward = 4;
inline bool AllAwardsResponse::has_signaward() const {
  return !_is_default_instance_ && signaward_ != NULL;
}
inline void AllAwardsResponse::clear_signaward() {
  if (GetArenaNoVirtual() == NULL && signaward_ != NULL) delete signaward_;
  signaward_ = NULL;
}
inline const ::SignAward& AllAwardsResponse::signaward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.signAward)
  return signaward_ != NULL ? *signaward_ : *default_instance_->signaward_;
}
inline ::SignAward* AllAwardsResponse::mutable_signaward() {
  
  if (signaward_ == NULL) {
    signaward_ = new ::SignAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.signAward)
  return signaward_;
}
inline ::SignAward* AllAwardsResponse::release_signaward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.signAward)
  
  ::SignAward* temp = signaward_;
  signaward_ = NULL;
  return temp;
}
inline void AllAwardsResponse::set_allocated_signaward(::SignAward* signaward) {
  delete signaward_;
  signaward_ = signaward;
  if (signaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.signAward)
}

// optional .CountBoxAward countBoxAward = 5;
inline bool AllAwardsResponse::has_countboxaward() const {
  return !_is_default_instance_ && countboxaward_ != NULL;
}
inline void AllAwardsResponse::clear_countboxaward() {
  if (GetArenaNoVirtual() == NULL && countboxaward_ != NULL) delete countboxaward_;
  countboxaward_ = NULL;
}
inline const ::CountBoxAward& AllAwardsResponse::countboxaward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.countBoxAward)
  return countboxaward_ != NULL ? *countboxaward_ : *default_instance_->countboxaward_;
}
inline ::CountBoxAward* AllAwardsResponse::mutable_countboxaward() {
  
  if (countboxaward_ == NULL) {
    countboxaward_ = new ::CountBoxAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.countBoxAward)
  return countboxaward_;
}
inline ::CountBoxAward* AllAwardsResponse::release_countboxaward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.countBoxAward)
  
  ::CountBoxAward* temp = countboxaward_;
  countboxaward_ = NULL;
  return temp;
}
inline void AllAwardsResponse::set_allocated_countboxaward(::CountBoxAward* countboxaward) {
  delete countboxaward_;
  countboxaward_ = countboxaward;
  if (countboxaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.countBoxAward)
}

// optional .FreechipStatus freechipStatus = 6;
inline bool AllAwardsResponse::has_freechipstatus() const {
  return !_is_default_instance_ && freechipstatus_ != NULL;
}
inline void AllAwardsResponse::clear_freechipstatus() {
  if (GetArenaNoVirtual() == NULL && freechipstatus_ != NULL) delete freechipstatus_;
  freechipstatus_ = NULL;
}
inline const ::FreechipStatus& AllAwardsResponse::freechipstatus() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.freechipStatus)
  return freechipstatus_ != NULL ? *freechipstatus_ : *default_instance_->freechipstatus_;
}
inline ::FreechipStatus* AllAwardsResponse::mutable_freechipstatus() {
  
  if (freechipstatus_ == NULL) {
    freechipstatus_ = new ::FreechipStatus;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.freechipStatus)
  return freechipstatus_;
}
inline ::FreechipStatus* AllAwardsResponse::release_freechipstatus() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.freechipStatus)
  
  ::FreechipStatus* temp = freechipstatus_;
  freechipstatus_ = NULL;
  return temp;
}
inline void AllAwardsResponse::set_allocated_freechipstatus(::FreechipStatus* freechipstatus) {
  delete freechipstatus_;
  freechipstatus_ = freechipstatus;
  if (freechipstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.freechipStatus)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::signAwardImageInfo_signAwardImageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::signAwardImageInfo_signAwardImageType>() {
  return ::signAwardImageInfo_signAwardImageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Awards_2eproto__INCLUDED
