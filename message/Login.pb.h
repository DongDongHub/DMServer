// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_Login_2eproto__INCLUDED
#define PROTOBUF_Login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "Basic.pb.h"
#include "User.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Login_2eproto();
void protobuf_AssignDesc_Login_2eproto();
void protobuf_ShutdownFile_Login_2eproto();

class GameConfigResponse;
class LoginRequst;
class LoginResponse;
class RoomCfgData;

// ===================================================================

class LoginRequst : public ::google::protobuf::Message {
 public:
  LoginRequst();
  virtual ~LoginRequst();

  LoginRequst(const LoginRequst& from);

  inline LoginRequst& operator=(const LoginRequst& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequst& default_instance();

  void Swap(LoginRequst* other);

  // implements Message ----------------------------------------------

  inline LoginRequst* New() const { return New(NULL); }

  LoginRequst* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequst& from);
  void MergeFrom(const LoginRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRequst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommonRequest head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::CommonRequest& head() const;
  ::CommonRequest* mutable_head();
  ::CommonRequest* release_head();
  void set_allocated_head(::CommonRequest* head);

  // optional string accountid = 2;
  void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);

  // optional string username = 3;
  void clear_username();
  static const int kUsernameFieldNumber = 3;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // optional string userpwd = 4;
  void clear_userpwd();
  static const int kUserpwdFieldNumber = 4;
  const ::std::string& userpwd() const;
  void set_userpwd(const ::std::string& value);
  void set_userpwd(const char* value);
  void set_userpwd(const char* value, size_t size);
  ::std::string* mutable_userpwd();
  ::std::string* release_userpwd();
  void set_allocated_userpwd(::std::string* userpwd);

  // optional .UserSex sex = 5;
  void clear_sex();
  static const int kSexFieldNumber = 5;
  ::UserSex sex() const;
  void set_sex(::UserSex value);

  // optional string headurl = 6;
  void clear_headurl();
  static const int kHeadurlFieldNumber = 6;
  const ::std::string& headurl() const;
  void set_headurl(const ::std::string& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  ::std::string* mutable_headurl();
  ::std::string* release_headurl();
  void set_allocated_headurl(::std::string* headurl);

  // optional string email = 7;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional bytes userType = 8;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 8;
  const ::std::string& usertype() const;
  void set_usertype(const ::std::string& value);
  void set_usertype(const char* value);
  void set_usertype(const void* value, size_t size);
  ::std::string* mutable_usertype();
  ::std::string* release_usertype();
  void set_allocated_usertype(::std::string* usertype);

  // optional uint32 channel = 9;
  void clear_channel();
  static const int kChannelFieldNumber = 9;
  ::google::protobuf::uint32 channel() const;
  void set_channel(::google::protobuf::uint32 value);

  // optional uint32 languige = 10;
  void clear_languige();
  static const int kLanguigeFieldNumber = 10;
  ::google::protobuf::uint32 languige() const;
  void set_languige(::google::protobuf::uint32 value);

  // optional string version = 11;
  void clear_version();
  static const int kVersionFieldNumber = 11;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:LoginRequst)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::CommonRequest* head_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpwd_;
  ::google::protobuf::internal::ArenaStringPtr headurl_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  int sex_;
  ::google::protobuf::uint32 channel_;
  ::google::protobuf::internal::ArenaStringPtr usertype_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint32 languige_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static LoginRequst* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const { return New(NULL); }

  LoginResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional bool isRegister = 2;
  void clear_isregister();
  static const int kIsRegisterFieldNumber = 2;
  bool isregister() const;
  void set_isregister(bool value);

  // optional .MyBaseInfo baseinfo = 3;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseinfoFieldNumber = 3;
  const ::MyBaseInfo& baseinfo() const;
  ::MyBaseInfo* mutable_baseinfo();
  ::MyBaseInfo* release_baseinfo();
  void set_allocated_baseinfo(::MyBaseInfo* baseinfo);

  // @@protoc_insertion_point(class_scope:LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::MyBaseInfo* baseinfo_;
  bool isregister_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomCfgData : public ::google::protobuf::Message {
 public:
  RoomCfgData();
  virtual ~RoomCfgData();

  RoomCfgData(const RoomCfgData& from);

  inline RoomCfgData& operator=(const RoomCfgData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomCfgData& default_instance();

  void Swap(RoomCfgData* other);

  // implements Message ----------------------------------------------

  inline RoomCfgData* New() const { return New(NULL); }

  RoomCfgData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomCfgData& from);
  void MergeFrom(const RoomCfgData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoomCfgData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 m_blind = 1;
  void clear_m_blind();
  static const int kMBlindFieldNumber = 1;
  ::google::protobuf::uint64 m_blind() const;
  void set_m_blind(::google::protobuf::uint64 value);

  // optional uint64 m_minBlind = 2;
  void clear_m_minblind();
  static const int kMMinBlindFieldNumber = 2;
  ::google::protobuf::uint64 m_minblind() const;
  void set_m_minblind(::google::protobuf::uint64 value);

  // optional uint64 m_maxBlind = 3;
  void clear_m_maxblind();
  static const int kMMaxBlindFieldNumber = 3;
  ::google::protobuf::uint64 m_maxblind() const;
  void set_m_maxblind(::google::protobuf::uint64 value);

  // optional uint64 m_playnowMinBlind = 4;
  void clear_m_playnowminblind();
  static const int kMPlaynowMinBlindFieldNumber = 4;
  ::google::protobuf::uint64 m_playnowminblind() const;
  void set_m_playnowminblind(::google::protobuf::uint64 value);

  // optional uint64 m_playnowMaxBlind = 5;
  void clear_m_playnowmaxblind();
  static const int kMPlaynowMaxBlindFieldNumber = 5;
  ::google::protobuf::uint64 m_playnowmaxblind() const;
  void set_m_playnowmaxblind(::google::protobuf::uint64 value);

  // optional uint32 m_roomLevel = 6;
  void clear_m_roomlevel();
  static const int kMRoomLevelFieldNumber = 6;
  ::google::protobuf::uint32 m_roomlevel() const;
  void set_m_roomlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RoomCfgData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 m_blind_;
  ::google::protobuf::uint64 m_minblind_;
  ::google::protobuf::uint64 m_maxblind_;
  ::google::protobuf::uint64 m_playnowminblind_;
  ::google::protobuf::uint64 m_playnowmaxblind_;
  ::google::protobuf::uint32 m_roomlevel_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static RoomCfgData* default_instance_;
};
// -------------------------------------------------------------------

class GameConfigResponse : public ::google::protobuf::Message {
 public:
  GameConfigResponse();
  virtual ~GameConfigResponse();

  GameConfigResponse(const GameConfigResponse& from);

  inline GameConfigResponse& operator=(const GameConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfigResponse& default_instance();

  void Swap(GameConfigResponse* other);

  // implements Message ----------------------------------------------

  inline GameConfigResponse* New() const { return New(NULL); }

  GameConfigResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameConfigResponse& from);
  void MergeFrom(const GameConfigResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional uint64 primary_chips = 2;
  void clear_primary_chips();
  static const int kPrimaryChipsFieldNumber = 2;
  ::google::protobuf::uint64 primary_chips() const;
  void set_primary_chips(::google::protobuf::uint64 value);

  // optional uint64 middle_chips = 3;
  void clear_middle_chips();
  static const int kMiddleChipsFieldNumber = 3;
  ::google::protobuf::uint64 middle_chips() const;
  void set_middle_chips(::google::protobuf::uint64 value);

  // optional uint64 hight_chips = 4;
  void clear_hight_chips();
  static const int kHightChipsFieldNumber = 4;
  ::google::protobuf::uint64 hight_chips() const;
  void set_hight_chips(::google::protobuf::uint64 value);

  // map<string, .RoomCfgData> roomlimit = 5;
  int roomlimit_size() const;
  void clear_roomlimit();
  static const int kRoomlimitFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::RoomCfgData >&
      roomlimit() const;
  ::google::protobuf::Map< ::std::string, ::RoomCfgData >*
      mutable_roomlimit();

  // map<uint32, string> room_title = 6;
  int room_title_size() const;
  void clear_room_title();
  static const int kRoomTitleFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
      room_title() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
      mutable_room_title();

  // optional uint32 face_cost_ratio = 7;
  void clear_face_cost_ratio();
  static const int kFaceCostRatioFieldNumber = 7;
  ::google::protobuf::uint32 face_cost_ratio() const;
  void set_face_cost_ratio(::google::protobuf::uint32 value);

  // optional uint32 loginTimes = 8;
  void clear_logintimes();
  static const int kLoginTimesFieldNumber = 8;
  ::google::protobuf::uint32 logintimes() const;
  void set_logintimes(::google::protobuf::uint32 value);

  // optional bool openPing = 9;
  void clear_openping();
  static const int kOpenPingFieldNumber = 9;
  bool openping() const;
  void set_openping(bool value);

  // optional bool openBoxAward = 10;
  void clear_openboxaward();
  static const int kOpenBoxAwardFieldNumber = 10;
  bool openboxaward() const;
  void set_openboxaward(bool value);

  // optional bytes rulesVer = 11;
  void clear_rulesver();
  static const int kRulesVerFieldNumber = 11;
  const ::std::string& rulesver() const;
  void set_rulesver(const ::std::string& value);
  void set_rulesver(const char* value);
  void set_rulesver(const void* value, size_t size);
  ::std::string* mutable_rulesver();
  ::std::string* release_rulesver();
  void set_allocated_rulesver(::std::string* rulesver);

  // optional uint32 shareSc = 12;
  void clear_sharesc();
  static const int kShareScFieldNumber = 12;
  ::google::protobuf::uint32 sharesc() const;
  void set_sharesc(::google::protobuf::uint32 value);

  // optional uint32 maxFriendnum = 13;
  void clear_maxfriendnum();
  static const int kMaxFriendnumFieldNumber = 13;
  ::google::protobuf::uint32 maxfriendnum() const;
  void set_maxfriendnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameConfigResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::google::protobuf::uint64 primary_chips_;
  ::google::protobuf::uint64 middle_chips_;
  ::google::protobuf::uint64 hight_chips_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::RoomCfgData,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GameConfigResponse_RoomlimitEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::RoomCfgData,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > roomlimit_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      GameConfigResponse_RoomTitleEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::uint32, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > room_title_;
  ::google::protobuf::uint32 face_cost_ratio_;
  ::google::protobuf::uint32 logintimes_;
  bool openping_;
  bool openboxaward_;
  ::google::protobuf::uint32 sharesc_;
  ::google::protobuf::internal::ArenaStringPtr rulesver_;
  ::google::protobuf::uint32 maxfriendnum_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Login_2eproto();
  friend void protobuf_AssignDesc_Login_2eproto();
  friend void protobuf_ShutdownFile_Login_2eproto();

  void InitAsDefaultInstance();
  static GameConfigResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequst

// optional .CommonRequest head = 1;
inline bool LoginRequst::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void LoginRequst::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::CommonRequest& LoginRequst::head() const {
  // @@protoc_insertion_point(field_get:LoginRequst.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::CommonRequest* LoginRequst::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::CommonRequest;
  }
  // @@protoc_insertion_point(field_mutable:LoginRequst.head)
  return head_;
}
inline ::CommonRequest* LoginRequst::release_head() {
  // @@protoc_insertion_point(field_release:LoginRequst.head)
  
  ::CommonRequest* temp = head_;
  head_ = NULL;
  return temp;
}
inline void LoginRequst::set_allocated_head(::CommonRequest* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.head)
}

// optional string accountid = 2;
inline void LoginRequst::clear_accountid() {
  accountid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::accountid() const {
  // @@protoc_insertion_point(field_get:LoginRequst.accountid)
  return accountid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_accountid(const ::std::string& value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.accountid)
}
inline void LoginRequst::set_accountid(const char* value) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.accountid)
}
inline void LoginRequst::set_accountid(const char* value, size_t size) {
  
  accountid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.accountid)
}
inline ::std::string* LoginRequst::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.accountid)
  return accountid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_accountid() {
  // @@protoc_insertion_point(field_release:LoginRequst.accountid)
  
  return accountid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.accountid)
}

// optional string username = 3;
inline void LoginRequst::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::username() const {
  // @@protoc_insertion_point(field_get:LoginRequst.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.username)
}
inline void LoginRequst::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.username)
}
inline void LoginRequst::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.username)
}
inline ::std::string* LoginRequst::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_username() {
  // @@protoc_insertion_point(field_release:LoginRequst.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.username)
}

// optional string userpwd = 4;
inline void LoginRequst::clear_userpwd() {
  userpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::userpwd() const {
  // @@protoc_insertion_point(field_get:LoginRequst.userpwd)
  return userpwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_userpwd(const ::std::string& value) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.userpwd)
}
inline void LoginRequst::set_userpwd(const char* value) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.userpwd)
}
inline void LoginRequst::set_userpwd(const char* value, size_t size) {
  
  userpwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.userpwd)
}
inline ::std::string* LoginRequst::mutable_userpwd() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.userpwd)
  return userpwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_userpwd() {
  // @@protoc_insertion_point(field_release:LoginRequst.userpwd)
  
  return userpwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_userpwd(::std::string* userpwd) {
  if (userpwd != NULL) {
    
  } else {
    
  }
  userpwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpwd);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.userpwd)
}

// optional .UserSex sex = 5;
inline void LoginRequst::clear_sex() {
  sex_ = 0;
}
inline ::UserSex LoginRequst::sex() const {
  // @@protoc_insertion_point(field_get:LoginRequst.sex)
  return static_cast< ::UserSex >(sex_);
}
inline void LoginRequst::set_sex(::UserSex value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.sex)
}

// optional string headurl = 6;
inline void LoginRequst::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::headurl() const {
  // @@protoc_insertion_point(field_get:LoginRequst.headurl)
  return headurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_headurl(const ::std::string& value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.headurl)
}
inline void LoginRequst::set_headurl(const char* value) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.headurl)
}
inline void LoginRequst::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.headurl)
}
inline ::std::string* LoginRequst::mutable_headurl() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.headurl)
  return headurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_headurl() {
  // @@protoc_insertion_point(field_release:LoginRequst.headurl)
  
  return headurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_headurl(::std::string* headurl) {
  if (headurl != NULL) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.headurl)
}

// optional string email = 7;
inline void LoginRequst::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::email() const {
  // @@protoc_insertion_point(field_get:LoginRequst.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.email)
}
inline void LoginRequst::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.email)
}
inline void LoginRequst::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.email)
}
inline ::std::string* LoginRequst::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_email() {
  // @@protoc_insertion_point(field_release:LoginRequst.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.email)
}

// optional bytes userType = 8;
inline void LoginRequst::clear_usertype() {
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::usertype() const {
  // @@protoc_insertion_point(field_get:LoginRequst.userType)
  return usertype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_usertype(const ::std::string& value) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.userType)
}
inline void LoginRequst::set_usertype(const char* value) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.userType)
}
inline void LoginRequst::set_usertype(const void* value, size_t size) {
  
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.userType)
}
inline ::std::string* LoginRequst::mutable_usertype() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.userType)
  return usertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_usertype() {
  // @@protoc_insertion_point(field_release:LoginRequst.userType)
  
  return usertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_usertype(::std::string* usertype) {
  if (usertype != NULL) {
    
  } else {
    
  }
  usertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertype);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.userType)
}

// optional uint32 channel = 9;
inline void LoginRequst::clear_channel() {
  channel_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequst::channel() const {
  // @@protoc_insertion_point(field_get:LoginRequst.channel)
  return channel_;
}
inline void LoginRequst::set_channel(::google::protobuf::uint32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.channel)
}

// optional uint32 languige = 10;
inline void LoginRequst::clear_languige() {
  languige_ = 0u;
}
inline ::google::protobuf::uint32 LoginRequst::languige() const {
  // @@protoc_insertion_point(field_get:LoginRequst.languige)
  return languige_;
}
inline void LoginRequst::set_languige(::google::protobuf::uint32 value) {
  
  languige_ = value;
  // @@protoc_insertion_point(field_set:LoginRequst.languige)
}

// optional string version = 11;
inline void LoginRequst::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequst::version() const {
  // @@protoc_insertion_point(field_get:LoginRequst.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginRequst.version)
}
inline void LoginRequst::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginRequst.version)
}
inline void LoginRequst::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginRequst.version)
}
inline ::std::string* LoginRequst::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:LoginRequst.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequst::release_version() {
  // @@protoc_insertion_point(field_release:LoginRequst.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequst::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:LoginRequst.version)
}

// -------------------------------------------------------------------

// LoginResponse

// optional .ResponseHeader head = 1;
inline bool LoginResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void LoginResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& LoginResponse::head() const {
  // @@protoc_insertion_point(field_get:LoginResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* LoginResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:LoginResponse.head)
  return head_;
}
inline ::ResponseHeader* LoginResponse::release_head() {
  // @@protoc_insertion_point(field_release:LoginResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.head)
}

// optional bool isRegister = 2;
inline void LoginResponse::clear_isregister() {
  isregister_ = false;
}
inline bool LoginResponse::isregister() const {
  // @@protoc_insertion_point(field_get:LoginResponse.isRegister)
  return isregister_;
}
inline void LoginResponse::set_isregister(bool value) {
  
  isregister_ = value;
  // @@protoc_insertion_point(field_set:LoginResponse.isRegister)
}

// optional .MyBaseInfo baseinfo = 3;
inline bool LoginResponse::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
inline void LoginResponse::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
inline const ::MyBaseInfo& LoginResponse::baseinfo() const {
  // @@protoc_insertion_point(field_get:LoginResponse.baseinfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::MyBaseInfo* LoginResponse::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::MyBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:LoginResponse.baseinfo)
  return baseinfo_;
}
inline ::MyBaseInfo* LoginResponse::release_baseinfo() {
  // @@protoc_insertion_point(field_release:LoginResponse.baseinfo)
  
  ::MyBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_baseinfo(::MyBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:LoginResponse.baseinfo)
}

// -------------------------------------------------------------------

// RoomCfgData

// optional uint64 m_blind = 1;
inline void RoomCfgData::clear_m_blind() {
  m_blind_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoomCfgData::m_blind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_blind)
  return m_blind_;
}
inline void RoomCfgData::set_m_blind(::google::protobuf::uint64 value) {
  
  m_blind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_blind)
}

// optional uint64 m_minBlind = 2;
inline void RoomCfgData::clear_m_minblind() {
  m_minblind_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoomCfgData::m_minblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_minBlind)
  return m_minblind_;
}
inline void RoomCfgData::set_m_minblind(::google::protobuf::uint64 value) {
  
  m_minblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_minBlind)
}

// optional uint64 m_maxBlind = 3;
inline void RoomCfgData::clear_m_maxblind() {
  m_maxblind_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoomCfgData::m_maxblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_maxBlind)
  return m_maxblind_;
}
inline void RoomCfgData::set_m_maxblind(::google::protobuf::uint64 value) {
  
  m_maxblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_maxBlind)
}

// optional uint64 m_playnowMinBlind = 4;
inline void RoomCfgData::clear_m_playnowminblind() {
  m_playnowminblind_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoomCfgData::m_playnowminblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_playnowMinBlind)
  return m_playnowminblind_;
}
inline void RoomCfgData::set_m_playnowminblind(::google::protobuf::uint64 value) {
  
  m_playnowminblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_playnowMinBlind)
}

// optional uint64 m_playnowMaxBlind = 5;
inline void RoomCfgData::clear_m_playnowmaxblind() {
  m_playnowmaxblind_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RoomCfgData::m_playnowmaxblind() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_playnowMaxBlind)
  return m_playnowmaxblind_;
}
inline void RoomCfgData::set_m_playnowmaxblind(::google::protobuf::uint64 value) {
  
  m_playnowmaxblind_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_playnowMaxBlind)
}

// optional uint32 m_roomLevel = 6;
inline void RoomCfgData::clear_m_roomlevel() {
  m_roomlevel_ = 0u;
}
inline ::google::protobuf::uint32 RoomCfgData::m_roomlevel() const {
  // @@protoc_insertion_point(field_get:RoomCfgData.m_roomLevel)
  return m_roomlevel_;
}
inline void RoomCfgData::set_m_roomlevel(::google::protobuf::uint32 value) {
  
  m_roomlevel_ = value;
  // @@protoc_insertion_point(field_set:RoomCfgData.m_roomLevel)
}

// -------------------------------------------------------------------

// GameConfigResponse

// optional .ResponseHeader head = 1;
inline bool GameConfigResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void GameConfigResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& GameConfigResponse::head() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* GameConfigResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:GameConfigResponse.head)
  return head_;
}
inline ::ResponseHeader* GameConfigResponse::release_head() {
  // @@protoc_insertion_point(field_release:GameConfigResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void GameConfigResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:GameConfigResponse.head)
}

// optional uint64 primary_chips = 2;
inline void GameConfigResponse::clear_primary_chips() {
  primary_chips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameConfigResponse::primary_chips() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.primary_chips)
  return primary_chips_;
}
inline void GameConfigResponse::set_primary_chips(::google::protobuf::uint64 value) {
  
  primary_chips_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.primary_chips)
}

// optional uint64 middle_chips = 3;
inline void GameConfigResponse::clear_middle_chips() {
  middle_chips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameConfigResponse::middle_chips() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.middle_chips)
  return middle_chips_;
}
inline void GameConfigResponse::set_middle_chips(::google::protobuf::uint64 value) {
  
  middle_chips_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.middle_chips)
}

// optional uint64 hight_chips = 4;
inline void GameConfigResponse::clear_hight_chips() {
  hight_chips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GameConfigResponse::hight_chips() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.hight_chips)
  return hight_chips_;
}
inline void GameConfigResponse::set_hight_chips(::google::protobuf::uint64 value) {
  
  hight_chips_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.hight_chips)
}

// map<string, .RoomCfgData> roomlimit = 5;
inline int GameConfigResponse::roomlimit_size() const {
  return roomlimit_.size();
}
inline void GameConfigResponse::clear_roomlimit() {
  roomlimit_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::RoomCfgData >&
GameConfigResponse::roomlimit() const {
  // @@protoc_insertion_point(field_map:GameConfigResponse.roomlimit)
  return roomlimit_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::RoomCfgData >*
GameConfigResponse::mutable_roomlimit() {
  // @@protoc_insertion_point(field_mutable_map:GameConfigResponse.roomlimit)
  return roomlimit_.MutableMap();
}

// map<uint32, string> room_title = 6;
inline int GameConfigResponse::room_title_size() const {
  return room_title_.size();
}
inline void GameConfigResponse::clear_room_title() {
  room_title_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >&
GameConfigResponse::room_title() const {
  // @@protoc_insertion_point(field_map:GameConfigResponse.room_title)
  return room_title_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::std::string >*
GameConfigResponse::mutable_room_title() {
  // @@protoc_insertion_point(field_mutable_map:GameConfigResponse.room_title)
  return room_title_.MutableMap();
}

// optional uint32 face_cost_ratio = 7;
inline void GameConfigResponse::clear_face_cost_ratio() {
  face_cost_ratio_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigResponse::face_cost_ratio() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.face_cost_ratio)
  return face_cost_ratio_;
}
inline void GameConfigResponse::set_face_cost_ratio(::google::protobuf::uint32 value) {
  
  face_cost_ratio_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.face_cost_ratio)
}

// optional uint32 loginTimes = 8;
inline void GameConfigResponse::clear_logintimes() {
  logintimes_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigResponse::logintimes() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.loginTimes)
  return logintimes_;
}
inline void GameConfigResponse::set_logintimes(::google::protobuf::uint32 value) {
  
  logintimes_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.loginTimes)
}

// optional bool openPing = 9;
inline void GameConfigResponse::clear_openping() {
  openping_ = false;
}
inline bool GameConfigResponse::openping() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.openPing)
  return openping_;
}
inline void GameConfigResponse::set_openping(bool value) {
  
  openping_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.openPing)
}

// optional bool openBoxAward = 10;
inline void GameConfigResponse::clear_openboxaward() {
  openboxaward_ = false;
}
inline bool GameConfigResponse::openboxaward() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.openBoxAward)
  return openboxaward_;
}
inline void GameConfigResponse::set_openboxaward(bool value) {
  
  openboxaward_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.openBoxAward)
}

// optional bytes rulesVer = 11;
inline void GameConfigResponse::clear_rulesver() {
  rulesver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameConfigResponse::rulesver() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.rulesVer)
  return rulesver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfigResponse::set_rulesver(const ::std::string& value) {
  
  rulesver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GameConfigResponse.rulesVer)
}
inline void GameConfigResponse::set_rulesver(const char* value) {
  
  rulesver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GameConfigResponse.rulesVer)
}
inline void GameConfigResponse::set_rulesver(const void* value, size_t size) {
  
  rulesver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GameConfigResponse.rulesVer)
}
inline ::std::string* GameConfigResponse::mutable_rulesver() {
  
  // @@protoc_insertion_point(field_mutable:GameConfigResponse.rulesVer)
  return rulesver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameConfigResponse::release_rulesver() {
  // @@protoc_insertion_point(field_release:GameConfigResponse.rulesVer)
  
  return rulesver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameConfigResponse::set_allocated_rulesver(::std::string* rulesver) {
  if (rulesver != NULL) {
    
  } else {
    
  }
  rulesver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulesver);
  // @@protoc_insertion_point(field_set_allocated:GameConfigResponse.rulesVer)
}

// optional uint32 shareSc = 12;
inline void GameConfigResponse::clear_sharesc() {
  sharesc_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigResponse::sharesc() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.shareSc)
  return sharesc_;
}
inline void GameConfigResponse::set_sharesc(::google::protobuf::uint32 value) {
  
  sharesc_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.shareSc)
}

// optional uint32 maxFriendnum = 13;
inline void GameConfigResponse::clear_maxfriendnum() {
  maxfriendnum_ = 0u;
}
inline ::google::protobuf::uint32 GameConfigResponse::maxfriendnum() const {
  // @@protoc_insertion_point(field_get:GameConfigResponse.maxFriendnum)
  return maxfriendnum_;
}
inline void GameConfigResponse::set_maxfriendnum(::google::protobuf::uint32 value) {
  
  maxfriendnum_ = value;
  // @@protoc_insertion_point(field_set:GameConfigResponse.maxFriendnum)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Login_2eproto__INCLUDED
