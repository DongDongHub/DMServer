// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef PROTOBUF_User_2eproto__INCLUDED
#define PROTOBUF_User_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Basic.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_User_2eproto();
void protobuf_AssignDesc_User_2eproto();
void protobuf_ShutdownFile_User_2eproto();

class FriendBaseInfo;
class MyAllInfo;
class MyAllInfoResponse;
class MyBaseInfo;
class MyBaseInfoResponse;
class Online_Info;
class PlayerInfoRequest;
class PlayerInfoResponse;
class Poker;
class StatusResponse;
class UserBaseInfo;
class UserExtInfo;

enum User_role {
  unkwown = 0,
  player = 1,
  admin = 2,
  User_role_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  User_role_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool User_role_IsValid(int value);
const User_role User_role_MIN = unkwown;
const User_role User_role_MAX = admin;
const int User_role_ARRAYSIZE = User_role_MAX + 1;

const ::google::protobuf::EnumDescriptor* User_role_descriptor();
inline const ::std::string& User_role_Name(User_role value) {
  return ::google::protobuf::internal::NameOfEnum(
    User_role_descriptor(), value);
}
inline bool User_role_Parse(
    const ::std::string& name, User_role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<User_role>(
    User_role_descriptor(), name, value);
}
enum ONLINE_STATUS {
  USER_OFF_LINE = 0,
  USER_ON_LINE = 1,
  USER_IN_GAME = 2,
  USER_IN_WATCH = 3,
  ONLINE_STATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ONLINE_STATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ONLINE_STATUS_IsValid(int value);
const ONLINE_STATUS ONLINE_STATUS_MIN = USER_OFF_LINE;
const ONLINE_STATUS ONLINE_STATUS_MAX = USER_IN_WATCH;
const int ONLINE_STATUS_ARRAYSIZE = ONLINE_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* ONLINE_STATUS_descriptor();
inline const ::std::string& ONLINE_STATUS_Name(ONLINE_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    ONLINE_STATUS_descriptor(), value);
}
inline bool ONLINE_STATUS_Parse(
    const ::std::string& name, ONLINE_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ONLINE_STATUS>(
    ONLINE_STATUS_descriptor(), name, value);
}
// ===================================================================

class Poker : public ::google::protobuf::Message {
 public:
  Poker();
  virtual ~Poker();

  Poker(const Poker& from);

  inline Poker& operator=(const Poker& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Poker& default_instance();

  void Swap(Poker* other);

  // implements Message ----------------------------------------------

  inline Poker* New() const { return New(NULL); }

  Poker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Poker& from);
  void MergeFrom(const Poker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Poker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes color = 1;
  void clear_color();
  static const int kColorFieldNumber = 1;
  const ::std::string& color() const;
  void set_color(const ::std::string& value);
  void set_color(const char* value);
  void set_color(const void* value, size_t size);
  ::std::string* mutable_color();
  ::std::string* release_color();
  void set_allocated_color(::std::string* color);

  // optional bytes point = 2;
  void clear_point();
  static const int kPointFieldNumber = 2;
  const ::std::string& point() const;
  void set_point(const ::std::string& value);
  void set_point(const char* value);
  void set_point(const void* value, size_t size);
  ::std::string* mutable_point();
  ::std::string* release_point();
  void set_allocated_point(::std::string* point);

  // @@protoc_insertion_point(class_scope:Poker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr color_;
  ::google::protobuf::internal::ArenaStringPtr point_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Poker* default_instance_;
};
// -------------------------------------------------------------------

class UserExtInfo : public ::google::protobuf::Message {
 public:
  UserExtInfo();
  virtual ~UserExtInfo();

  UserExtInfo(const UserExtInfo& from);

  inline UserExtInfo& operator=(const UserExtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserExtInfo& default_instance();

  void Swap(UserExtInfo* other);

  // implements Message ----------------------------------------------

  inline UserExtInfo* New() const { return New(NULL); }

  UserExtInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserExtInfo& from);
  void MergeFrom(const UserExtInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserExtInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 5;
  void clear_email();
  static const int kEmailFieldNumber = 5;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional uint64 user_out_roochips = 9;
  void clear_user_out_roochips();
  static const int kUserOutRoochipsFieldNumber = 9;
  ::google::protobuf::uint64 user_out_roochips() const;
  void set_user_out_roochips(::google::protobuf::uint64 value);

  // optional uint64 user_exp = 12;
  void clear_user_exp();
  static const int kUserExpFieldNumber = 12;
  ::google::protobuf::uint64 user_exp() const;
  void set_user_exp(::google::protobuf::uint64 value);

  // optional uint64 user_exp_upgrade = 13;
  void clear_user_exp_upgrade();
  static const int kUserExpUpgradeFieldNumber = 13;
  ::google::protobuf::uint64 user_exp_upgrade() const;
  void set_user_exp_upgrade(::google::protobuf::uint64 value);

  // optional bytes user_vip_level = 14;
  void clear_user_vip_level();
  static const int kUserVipLevelFieldNumber = 14;
  const ::std::string& user_vip_level() const;
  void set_user_vip_level(const ::std::string& value);
  void set_user_vip_level(const char* value);
  void set_user_vip_level(const void* value, size_t size);
  ::std::string* mutable_user_vip_level();
  ::std::string* release_user_vip_level();
  void set_allocated_user_vip_level(::std::string* user_vip_level);

  // optional uint32 user_charlevel = 15;
  void clear_user_charlevel();
  static const int kUserCharlevelFieldNumber = 15;
  ::google::protobuf::uint32 user_charlevel() const;
  void set_user_charlevel(::google::protobuf::uint32 value);

  // optional uint64 user_charm = 16;
  void clear_user_charm();
  static const int kUserCharmFieldNumber = 16;
  ::google::protobuf::uint64 user_charm() const;
  void set_user_charm(::google::protobuf::uint64 value);

  // optional uint64 user_charupgrade = 17;
  void clear_user_charupgrade();
  static const int kUserCharupgradeFieldNumber = 17;
  ::google::protobuf::uint64 user_charupgrade() const;
  void set_user_charupgrade(::google::protobuf::uint64 value);

  // optional uint64 user_max_chips = 22;
  void clear_user_max_chips();
  static const int kUserMaxChipsFieldNumber = 22;
  ::google::protobuf::uint64 user_max_chips() const;
  void set_user_max_chips(::google::protobuf::uint64 value);

  // optional uint64 user_max_winpot = 23;
  void clear_user_max_winpot();
  static const int kUserMaxWinpotFieldNumber = 23;
  ::google::protobuf::uint64 user_max_winpot() const;
  void set_user_max_winpot(::google::protobuf::uint64 value);

  // optional uint64 user_escape_count = 24;
  void clear_user_escape_count();
  static const int kUserEscapeCountFieldNumber = 24;
  ::google::protobuf::uint64 user_escape_count() const;
  void set_user_escape_count(::google::protobuf::uint64 value);

  // repeated .Poker user_best_cards = 25;
  int user_best_cards_size() const;
  void clear_user_best_cards();
  static const int kUserBestCardsFieldNumber = 25;
  const ::Poker& user_best_cards(int index) const;
  ::Poker* mutable_user_best_cards(int index);
  ::Poker* add_user_best_cards();
  ::google::protobuf::RepeatedPtrField< ::Poker >*
      mutable_user_best_cards();
  const ::google::protobuf::RepeatedPtrField< ::Poker >&
      user_best_cards() const;

  // optional uint32 user_mtt_wins = 26;
  void clear_user_mtt_wins();
  static const int kUserMttWinsFieldNumber = 26;
  ::google::protobuf::uint32 user_mtt_wins() const;
  void set_user_mtt_wins(::google::protobuf::uint32 value);

  // optional uint32 user_sng_wins = 27;
  void clear_user_sng_wins();
  static const int kUserSngWinsFieldNumber = 27;
  ::google::protobuf::uint32 user_sng_wins() const;
  void set_user_sng_wins(::google::protobuf::uint32 value);

  // optional uint64 user_bank_chips = 28;
  void clear_user_bank_chips();
  static const int kUserBankChipsFieldNumber = 28;
  ::google::protobuf::uint64 user_bank_chips() const;
  void set_user_bank_chips(::google::protobuf::uint64 value);

  // optional uint64 user_last_login_time = 29;
  void clear_user_last_login_time();
  static const int kUserLastLoginTimeFieldNumber = 29;
  ::google::protobuf::uint64 user_last_login_time() const;
  void set_user_last_login_time(::google::protobuf::uint64 value);

  // optional bool user_have_new_msg = 30;
  void clear_user_have_new_msg();
  static const int kUserHaveNewMsgFieldNumber = 30;
  bool user_have_new_msg() const;
  void set_user_have_new_msg(bool value);

  // optional uint32 user_total_bankrupt_times = 31;
  void clear_user_total_bankrupt_times();
  static const int kUserTotalBankruptTimesFieldNumber = 31;
  ::google::protobuf::uint32 user_total_bankrupt_times() const;
  void set_user_total_bankrupt_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:UserExtInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::uint64 user_out_roochips_;
  ::google::protobuf::uint64 user_exp_;
  ::google::protobuf::uint64 user_exp_upgrade_;
  ::google::protobuf::internal::ArenaStringPtr user_vip_level_;
  ::google::protobuf::uint64 user_charm_;
  ::google::protobuf::uint64 user_charupgrade_;
  ::google::protobuf::uint64 user_max_chips_;
  ::google::protobuf::uint32 user_charlevel_;
  ::google::protobuf::uint32 user_mtt_wins_;
  ::google::protobuf::uint64 user_max_winpot_;
  ::google::protobuf::uint64 user_escape_count_;
  ::google::protobuf::RepeatedPtrField< ::Poker > user_best_cards_;
  ::google::protobuf::uint64 user_bank_chips_;
  ::google::protobuf::uint32 user_sng_wins_;
  bool user_have_new_msg_;
  ::google::protobuf::uint64 user_last_login_time_;
  ::google::protobuf::uint32 user_total_bankrupt_times_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UserExtInfo* default_instance_;
};
// -------------------------------------------------------------------

class Online_Info : public ::google::protobuf::Message {
 public:
  Online_Info();
  virtual ~Online_Info();

  Online_Info(const Online_Info& from);

  inline Online_Info& operator=(const Online_Info& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Online_Info& default_instance();

  void Swap(Online_Info* other);

  // implements Message ----------------------------------------------

  inline Online_Info* New() const { return New(NULL); }

  Online_Info* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Online_Info& from);
  void MergeFrom(const Online_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Online_Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ONLINE_STATUS online_status = 1;
  void clear_online_status();
  static const int kOnlineStatusFieldNumber = 1;
  ::ONLINE_STATUS online_status() const;
  void set_online_status(::ONLINE_STATUS value);

  // optional string game_host_svrid = 2;
  void clear_game_host_svrid();
  static const int kGameHostSvridFieldNumber = 2;
  const ::std::string& game_host_svrid() const;
  void set_game_host_svrid(const ::std::string& value);
  void set_game_host_svrid(const char* value);
  void set_game_host_svrid(const char* value, size_t size);
  ::std::string* mutable_game_host_svrid();
  ::std::string* release_game_host_svrid();
  void set_allocated_game_host_svrid(::std::string* game_host_svrid);

  // optional int32 cur_rooid = 3;
  void clear_cur_rooid();
  static const int kCurRooidFieldNumber = 3;
  ::google::protobuf::int32 cur_rooid() const;
  void set_cur_rooid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Online_Info)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr game_host_svrid_;
  int online_status_;
  ::google::protobuf::int32 cur_rooid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static Online_Info* default_instance_;
};
// -------------------------------------------------------------------

class UserBaseInfo : public ::google::protobuf::Message {
 public:
  UserBaseInfo();
  virtual ~UserBaseInfo();

  UserBaseInfo(const UserBaseInfo& from);

  inline UserBaseInfo& operator=(const UserBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBaseInfo& default_instance();

  void Swap(UserBaseInfo* other);

  // implements Message ----------------------------------------------

  inline UserBaseInfo* New() const { return New(NULL); }

  UserBaseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBaseInfo& from);
  void MergeFrom(const UserBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // optional bytes user_type = 2;
  void clear_user_type();
  static const int kUserTypeFieldNumber = 2;
  const ::std::string& user_type() const;
  void set_user_type(const ::std::string& value);
  void set_user_type(const char* value);
  void set_user_type(const void* value, size_t size);
  ::std::string* mutable_user_type();
  ::std::string* release_user_type();
  void set_allocated_user_type(::std::string* user_type);

  // optional string user_name = 4;
  void clear_user_name();
  static const int kUserNameFieldNumber = 4;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // optional .UserSex user_sex = 7;
  void clear_user_sex();
  static const int kUserSexFieldNumber = 7;
  ::UserSex user_sex() const;
  void set_user_sex(::UserSex value);

  // optional int32 user_img_id = 6;
  void clear_user_img_id();
  static const int kUserImgIdFieldNumber = 6;
  ::google::protobuf::int32 user_img_id() const;
  void set_user_img_id(::google::protobuf::int32 value);

  // optional string user_head_url = 35;
  void clear_user_head_url();
  static const int kUserHeadUrlFieldNumber = 35;
  const ::std::string& user_head_url() const;
  void set_user_head_url(const ::std::string& value);
  void set_user_head_url(const char* value);
  void set_user_head_url(const char* value, size_t size);
  ::std::string* mutable_user_head_url();
  ::std::string* release_user_head_url();
  void set_allocated_user_head_url(::std::string* user_head_url);

  // optional uint64 user_total_chips = 8;
  void clear_user_total_chips();
  static const int kUserTotalChipsFieldNumber = 8;
  ::google::protobuf::uint64 user_total_chips() const;
  void set_user_total_chips(::google::protobuf::uint64 value);

  // optional uint64 user_total_coins = 10;
  void clear_user_total_coins();
  static const int kUserTotalCoinsFieldNumber = 10;
  ::google::protobuf::uint64 user_total_coins() const;
  void set_user_total_coins(::google::protobuf::uint64 value);

  // optional bytes user_level = 11;
  void clear_user_level();
  static const int kUserLevelFieldNumber = 11;
  const ::std::string& user_level() const;
  void set_user_level(const ::std::string& value);
  void set_user_level(const char* value);
  void set_user_level(const void* value, size_t size);
  ::std::string* mutable_user_level();
  ::std::string* release_user_level();
  void set_allocated_user_level(::std::string* user_level);

  // optional uint32 user_total_win_rounds = 18;
  void clear_user_total_win_rounds();
  static const int kUserTotalWinRoundsFieldNumber = 18;
  ::google::protobuf::uint32 user_total_win_rounds() const;
  void set_user_total_win_rounds(::google::protobuf::uint32 value);

  // optional uint32 user_total_lost_rounds = 19;
  void clear_user_total_lost_rounds();
  static const int kUserTotalLostRoundsFieldNumber = 19;
  ::google::protobuf::uint32 user_total_lost_rounds() const;
  void set_user_total_lost_rounds(::google::protobuf::uint32 value);

  // optional uint32 giftimg_onuse = 20;
  void clear_giftimg_onuse();
  static const int kGiftimgOnuseFieldNumber = 20;
  ::google::protobuf::uint32 giftimg_onuse() const;
  void set_giftimg_onuse(::google::protobuf::uint32 value);

  // optional string giftImg_url = 21;
  void clear_giftimg_url();
  static const int kGiftImgUrlFieldNumber = 21;
  const ::std::string& giftimg_url() const;
  void set_giftimg_url(const ::std::string& value);
  void set_giftimg_url(const char* value);
  void set_giftimg_url(const char* value, size_t size);
  ::std::string* mutable_giftimg_url();
  ::std::string* release_giftimg_url();
  void set_allocated_giftimg_url(::std::string* giftimg_url);

  // optional bool chat_enable = 36;
  void clear_chat_enable();
  static const int kChatEnableFieldNumber = 36;
  bool chat_enable() const;
  void set_chat_enable(bool value);

  // optional .User_role user_is_admin = 38;
  void clear_user_is_admin();
  static const int kUserIsAdminFieldNumber = 38;
  ::User_role user_is_admin() const;
  void set_user_is_admin(::User_role value);

  // @@protoc_insertion_point(class_scope:UserBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr user_type_;
  ::google::protobuf::uint32 user_id_;
  int user_sex_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr user_head_url_;
  ::google::protobuf::uint64 user_total_chips_;
  ::google::protobuf::int32 user_img_id_;
  ::google::protobuf::uint32 user_total_win_rounds_;
  ::google::protobuf::uint64 user_total_coins_;
  ::google::protobuf::internal::ArenaStringPtr user_level_;
  ::google::protobuf::uint32 user_total_lost_rounds_;
  ::google::protobuf::uint32 giftimg_onuse_;
  ::google::protobuf::internal::ArenaStringPtr giftimg_url_;
  bool chat_enable_;
  int user_is_admin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static UserBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class MyBaseInfo : public ::google::protobuf::Message {
 public:
  MyBaseInfo();
  virtual ~MyBaseInfo();

  MyBaseInfo(const MyBaseInfo& from);

  inline MyBaseInfo& operator=(const MyBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyBaseInfo& default_instance();

  void Swap(MyBaseInfo* other);

  // implements Message ----------------------------------------------

  inline MyBaseInfo* New() const { return New(NULL); }

  MyBaseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyBaseInfo& from);
  void MergeFrom(const MyBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserBaseInfo baseInfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  const ::UserBaseInfo& baseinfo() const;
  ::UserBaseInfo* mutable_baseinfo();
  ::UserBaseInfo* release_baseinfo();
  void set_allocated_baseinfo(::UserBaseInfo* baseinfo);

  // optional .Online_Info onlineInfo = 2;
  bool has_onlineinfo() const;
  void clear_onlineinfo();
  static const int kOnlineInfoFieldNumber = 2;
  const ::Online_Info& onlineinfo() const;
  ::Online_Info* mutable_onlineinfo();
  ::Online_Info* release_onlineinfo();
  void set_allocated_onlineinfo(::Online_Info* onlineinfo);

  // @@protoc_insertion_point(class_scope:MyBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::UserBaseInfo* baseinfo_;
  ::Online_Info* onlineinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static MyBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class MyAllInfo : public ::google::protobuf::Message {
 public:
  MyAllInfo();
  virtual ~MyAllInfo();

  MyAllInfo(const MyAllInfo& from);

  inline MyAllInfo& operator=(const MyAllInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyAllInfo& default_instance();

  void Swap(MyAllInfo* other);

  // implements Message ----------------------------------------------

  inline MyAllInfo* New() const { return New(NULL); }

  MyAllInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyAllInfo& from);
  void MergeFrom(const MyAllInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyAllInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserBaseInfo baseInfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  const ::UserBaseInfo& baseinfo() const;
  ::UserBaseInfo* mutable_baseinfo();
  ::UserBaseInfo* release_baseinfo();
  void set_allocated_baseinfo(::UserBaseInfo* baseinfo);

  // optional .Online_Info onlineInfo = 2;
  bool has_onlineinfo() const;
  void clear_onlineinfo();
  static const int kOnlineInfoFieldNumber = 2;
  const ::Online_Info& onlineinfo() const;
  ::Online_Info* mutable_onlineinfo();
  ::Online_Info* release_onlineinfo();
  void set_allocated_onlineinfo(::Online_Info* onlineinfo);

  // optional .UserExtInfo extInfo = 3;
  bool has_extinfo() const;
  void clear_extinfo();
  static const int kExtInfoFieldNumber = 3;
  const ::UserExtInfo& extinfo() const;
  ::UserExtInfo* mutable_extinfo();
  ::UserExtInfo* release_extinfo();
  void set_allocated_extinfo(::UserExtInfo* extinfo);

  // @@protoc_insertion_point(class_scope:MyAllInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::UserBaseInfo* baseinfo_;
  ::Online_Info* onlineinfo_;
  ::UserExtInfo* extinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static MyAllInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendBaseInfo : public ::google::protobuf::Message {
 public:
  FriendBaseInfo();
  virtual ~FriendBaseInfo();

  FriendBaseInfo(const FriendBaseInfo& from);

  inline FriendBaseInfo& operator=(const FriendBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendBaseInfo& default_instance();

  void Swap(FriendBaseInfo* other);

  // implements Message ----------------------------------------------

  inline FriendBaseInfo* New() const { return New(NULL); }

  FriendBaseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendBaseInfo& from);
  void MergeFrom(const FriendBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FriendBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .UserBaseInfo baseInfo = 1;
  bool has_baseinfo() const;
  void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 1;
  const ::UserBaseInfo& baseinfo() const;
  ::UserBaseInfo* mutable_baseinfo();
  ::UserBaseInfo* release_baseinfo();
  void set_allocated_baseinfo(::UserBaseInfo* baseinfo);

  // optional .Online_Info onlineInfo = 2;
  bool has_onlineinfo() const;
  void clear_onlineinfo();
  static const int kOnlineInfoFieldNumber = 2;
  const ::Online_Info& onlineinfo() const;
  ::Online_Info* mutable_onlineinfo();
  ::Online_Info* release_onlineinfo();
  void set_allocated_onlineinfo(::Online_Info* onlineinfo);

  // @@protoc_insertion_point(class_scope:FriendBaseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::UserBaseInfo* baseinfo_;
  ::Online_Info* onlineinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static FriendBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class StatusResponse : public ::google::protobuf::Message {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse& default_instance();

  void Swap(StatusResponse* other);

  // implements Message ----------------------------------------------

  inline StatusResponse* New() const { return New(NULL); }

  StatusResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional bytes status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  void set_status(const char* value);
  void set_status(const void* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // optional string ext1 = 3;
  void clear_ext1();
  static const int kExt1FieldNumber = 3;
  const ::std::string& ext1() const;
  void set_ext1(const ::std::string& value);
  void set_ext1(const char* value);
  void set_ext1(const char* value, size_t size);
  ::std::string* mutable_ext1();
  ::std::string* release_ext1();
  void set_allocated_ext1(::std::string* ext1);

  // @@protoc_insertion_point(class_scope:StatusResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr ext1_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static StatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class MyBaseInfoResponse : public ::google::protobuf::Message {
 public:
  MyBaseInfoResponse();
  virtual ~MyBaseInfoResponse();

  MyBaseInfoResponse(const MyBaseInfoResponse& from);

  inline MyBaseInfoResponse& operator=(const MyBaseInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyBaseInfoResponse& default_instance();

  void Swap(MyBaseInfoResponse* other);

  // implements Message ----------------------------------------------

  inline MyBaseInfoResponse* New() const { return New(NULL); }

  MyBaseInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyBaseInfoResponse& from);
  void MergeFrom(const MyBaseInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyBaseInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional .MyBaseInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::MyBaseInfo& info() const;
  ::MyBaseInfo* mutable_info();
  ::MyBaseInfo* release_info();
  void set_allocated_info(::MyBaseInfo* info);

  // @@protoc_insertion_point(class_scope:MyBaseInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::MyBaseInfo* info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static MyBaseInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class MyAllInfoResponse : public ::google::protobuf::Message {
 public:
  MyAllInfoResponse();
  virtual ~MyAllInfoResponse();

  MyAllInfoResponse(const MyAllInfoResponse& from);

  inline MyAllInfoResponse& operator=(const MyAllInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyAllInfoResponse& default_instance();

  void Swap(MyAllInfoResponse* other);

  // implements Message ----------------------------------------------

  inline MyAllInfoResponse* New() const { return New(NULL); }

  MyAllInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyAllInfoResponse& from);
  void MergeFrom(const MyAllInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MyAllInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional .MyAllInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::MyAllInfo& info() const;
  ::MyAllInfo* mutable_info();
  ::MyAllInfo* release_info();
  void set_allocated_info(::MyAllInfo* info);

  // @@protoc_insertion_point(class_scope:MyAllInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::MyAllInfo* info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static MyAllInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfoRequest : public ::google::protobuf::Message {
 public:
  PlayerInfoRequest();
  virtual ~PlayerInfoRequest();

  PlayerInfoRequest(const PlayerInfoRequest& from);

  inline PlayerInfoRequest& operator=(const PlayerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfoRequest& default_instance();

  void Swap(PlayerInfoRequest* other);

  // implements Message ----------------------------------------------

  inline PlayerInfoRequest* New() const { return New(NULL); }

  PlayerInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfoRequest& from);
  void MergeFrom(const PlayerInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommonRequest basic = 1;
  bool has_basic() const;
  void clear_basic();
  static const int kBasicFieldNumber = 1;
  const ::CommonRequest& basic() const;
  ::CommonRequest* mutable_basic();
  ::CommonRequest* release_basic();
  void set_allocated_basic(::CommonRequest* basic);

  // optional uint32 playeruid = 2;
  void clear_playeruid();
  static const int kPlayeruidFieldNumber = 2;
  ::google::protobuf::uint32 playeruid() const;
  void set_playeruid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::CommonRequest* basic_;
  ::google::protobuf::uint32 playeruid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerInfoResponse : public ::google::protobuf::Message {
 public:
  PlayerInfoResponse();
  virtual ~PlayerInfoResponse();

  PlayerInfoResponse(const PlayerInfoResponse& from);

  inline PlayerInfoResponse& operator=(const PlayerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInfoResponse& default_instance();

  void Swap(PlayerInfoResponse* other);

  // implements Message ----------------------------------------------

  inline PlayerInfoResponse* New() const { return New(NULL); }

  PlayerInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerInfoResponse& from);
  void MergeFrom(const PlayerInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ResponseHeader head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::ResponseHeader& head() const;
  ::ResponseHeader* mutable_head();
  ::ResponseHeader* release_head();
  void set_allocated_head(::ResponseHeader* head);

  // optional .UserBaseInfo info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::UserBaseInfo& info() const;
  ::UserBaseInfo* mutable_info();
  ::UserBaseInfo* release_info();
  void set_allocated_info(::UserBaseInfo* info);

  // @@protoc_insertion_point(class_scope:PlayerInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ResponseHeader* head_;
  ::UserBaseInfo* info_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_User_2eproto();
  friend void protobuf_AssignDesc_User_2eproto();
  friend void protobuf_ShutdownFile_User_2eproto();

  void InitAsDefaultInstance();
  static PlayerInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Poker

// optional bytes color = 1;
inline void Poker::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Poker::color() const {
  // @@protoc_insertion_point(field_get:Poker.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poker::set_color(const ::std::string& value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Poker.color)
}
inline void Poker::set_color(const char* value) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Poker.color)
}
inline void Poker::set_color(const void* value, size_t size) {
  
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Poker.color)
}
inline ::std::string* Poker::mutable_color() {
  
  // @@protoc_insertion_point(field_mutable:Poker.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Poker::release_color() {
  // @@protoc_insertion_point(field_release:Poker.color)
  
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poker::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:Poker.color)
}

// optional bytes point = 2;
inline void Poker::clear_point() {
  point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Poker::point() const {
  // @@protoc_insertion_point(field_get:Poker.point)
  return point_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poker::set_point(const ::std::string& value) {
  
  point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Poker.point)
}
inline void Poker::set_point(const char* value) {
  
  point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Poker.point)
}
inline void Poker::set_point(const void* value, size_t size) {
  
  point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Poker.point)
}
inline ::std::string* Poker::mutable_point() {
  
  // @@protoc_insertion_point(field_mutable:Poker.point)
  return point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Poker::release_point() {
  // @@protoc_insertion_point(field_release:Poker.point)
  
  return point_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Poker::set_allocated_point(::std::string* point) {
  if (point != NULL) {
    
  } else {
    
  }
  point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), point);
  // @@protoc_insertion_point(field_set_allocated:Poker.point)
}

// -------------------------------------------------------------------

// UserExtInfo

// optional string email = 5;
inline void UserExtInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserExtInfo::email() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserExtInfo::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserExtInfo.email)
}
inline void UserExtInfo::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserExtInfo.email)
}
inline void UserExtInfo::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserExtInfo.email)
}
inline ::std::string* UserExtInfo::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:UserExtInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserExtInfo::release_email() {
  // @@protoc_insertion_point(field_release:UserExtInfo.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserExtInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:UserExtInfo.email)
}

// optional uint64 user_out_roochips = 9;
inline void UserExtInfo::clear_user_out_roochips() {
  user_out_roochips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_out_roochips() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_out_roochips)
  return user_out_roochips_;
}
inline void UserExtInfo::set_user_out_roochips(::google::protobuf::uint64 value) {
  
  user_out_roochips_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_out_roochips)
}

// optional uint64 user_exp = 12;
inline void UserExtInfo::clear_user_exp() {
  user_exp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_exp() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_exp)
  return user_exp_;
}
inline void UserExtInfo::set_user_exp(::google::protobuf::uint64 value) {
  
  user_exp_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_exp)
}

// optional uint64 user_exp_upgrade = 13;
inline void UserExtInfo::clear_user_exp_upgrade() {
  user_exp_upgrade_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_exp_upgrade() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_exp_upgrade)
  return user_exp_upgrade_;
}
inline void UserExtInfo::set_user_exp_upgrade(::google::protobuf::uint64 value) {
  
  user_exp_upgrade_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_exp_upgrade)
}

// optional bytes user_vip_level = 14;
inline void UserExtInfo::clear_user_vip_level() {
  user_vip_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserExtInfo::user_vip_level() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_vip_level)
  return user_vip_level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserExtInfo::set_user_vip_level(const ::std::string& value) {
  
  user_vip_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserExtInfo.user_vip_level)
}
inline void UserExtInfo::set_user_vip_level(const char* value) {
  
  user_vip_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserExtInfo.user_vip_level)
}
inline void UserExtInfo::set_user_vip_level(const void* value, size_t size) {
  
  user_vip_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserExtInfo.user_vip_level)
}
inline ::std::string* UserExtInfo::mutable_user_vip_level() {
  
  // @@protoc_insertion_point(field_mutable:UserExtInfo.user_vip_level)
  return user_vip_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserExtInfo::release_user_vip_level() {
  // @@protoc_insertion_point(field_release:UserExtInfo.user_vip_level)
  
  return user_vip_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserExtInfo::set_allocated_user_vip_level(::std::string* user_vip_level) {
  if (user_vip_level != NULL) {
    
  } else {
    
  }
  user_vip_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_vip_level);
  // @@protoc_insertion_point(field_set_allocated:UserExtInfo.user_vip_level)
}

// optional uint32 user_charlevel = 15;
inline void UserExtInfo::clear_user_charlevel() {
  user_charlevel_ = 0u;
}
inline ::google::protobuf::uint32 UserExtInfo::user_charlevel() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_charlevel)
  return user_charlevel_;
}
inline void UserExtInfo::set_user_charlevel(::google::protobuf::uint32 value) {
  
  user_charlevel_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_charlevel)
}

// optional uint64 user_charm = 16;
inline void UserExtInfo::clear_user_charm() {
  user_charm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_charm() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_charm)
  return user_charm_;
}
inline void UserExtInfo::set_user_charm(::google::protobuf::uint64 value) {
  
  user_charm_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_charm)
}

// optional uint64 user_charupgrade = 17;
inline void UserExtInfo::clear_user_charupgrade() {
  user_charupgrade_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_charupgrade() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_charupgrade)
  return user_charupgrade_;
}
inline void UserExtInfo::set_user_charupgrade(::google::protobuf::uint64 value) {
  
  user_charupgrade_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_charupgrade)
}

// optional uint64 user_max_chips = 22;
inline void UserExtInfo::clear_user_max_chips() {
  user_max_chips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_max_chips() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_max_chips)
  return user_max_chips_;
}
inline void UserExtInfo::set_user_max_chips(::google::protobuf::uint64 value) {
  
  user_max_chips_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_max_chips)
}

// optional uint64 user_max_winpot = 23;
inline void UserExtInfo::clear_user_max_winpot() {
  user_max_winpot_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_max_winpot() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_max_winpot)
  return user_max_winpot_;
}
inline void UserExtInfo::set_user_max_winpot(::google::protobuf::uint64 value) {
  
  user_max_winpot_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_max_winpot)
}

// optional uint64 user_escape_count = 24;
inline void UserExtInfo::clear_user_escape_count() {
  user_escape_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_escape_count() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_escape_count)
  return user_escape_count_;
}
inline void UserExtInfo::set_user_escape_count(::google::protobuf::uint64 value) {
  
  user_escape_count_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_escape_count)
}

// repeated .Poker user_best_cards = 25;
inline int UserExtInfo::user_best_cards_size() const {
  return user_best_cards_.size();
}
inline void UserExtInfo::clear_user_best_cards() {
  user_best_cards_.Clear();
}
inline const ::Poker& UserExtInfo::user_best_cards(int index) const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_best_cards)
  return user_best_cards_.Get(index);
}
inline ::Poker* UserExtInfo::mutable_user_best_cards(int index) {
  // @@protoc_insertion_point(field_mutable:UserExtInfo.user_best_cards)
  return user_best_cards_.Mutable(index);
}
inline ::Poker* UserExtInfo::add_user_best_cards() {
  // @@protoc_insertion_point(field_add:UserExtInfo.user_best_cards)
  return user_best_cards_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Poker >*
UserExtInfo::mutable_user_best_cards() {
  // @@protoc_insertion_point(field_mutable_list:UserExtInfo.user_best_cards)
  return &user_best_cards_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Poker >&
UserExtInfo::user_best_cards() const {
  // @@protoc_insertion_point(field_list:UserExtInfo.user_best_cards)
  return user_best_cards_;
}

// optional uint32 user_mtt_wins = 26;
inline void UserExtInfo::clear_user_mtt_wins() {
  user_mtt_wins_ = 0u;
}
inline ::google::protobuf::uint32 UserExtInfo::user_mtt_wins() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_mtt_wins)
  return user_mtt_wins_;
}
inline void UserExtInfo::set_user_mtt_wins(::google::protobuf::uint32 value) {
  
  user_mtt_wins_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_mtt_wins)
}

// optional uint32 user_sng_wins = 27;
inline void UserExtInfo::clear_user_sng_wins() {
  user_sng_wins_ = 0u;
}
inline ::google::protobuf::uint32 UserExtInfo::user_sng_wins() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_sng_wins)
  return user_sng_wins_;
}
inline void UserExtInfo::set_user_sng_wins(::google::protobuf::uint32 value) {
  
  user_sng_wins_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_sng_wins)
}

// optional uint64 user_bank_chips = 28;
inline void UserExtInfo::clear_user_bank_chips() {
  user_bank_chips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_bank_chips() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_bank_chips)
  return user_bank_chips_;
}
inline void UserExtInfo::set_user_bank_chips(::google::protobuf::uint64 value) {
  
  user_bank_chips_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_bank_chips)
}

// optional uint64 user_last_login_time = 29;
inline void UserExtInfo::clear_user_last_login_time() {
  user_last_login_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserExtInfo::user_last_login_time() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_last_login_time)
  return user_last_login_time_;
}
inline void UserExtInfo::set_user_last_login_time(::google::protobuf::uint64 value) {
  
  user_last_login_time_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_last_login_time)
}

// optional bool user_have_new_msg = 30;
inline void UserExtInfo::clear_user_have_new_msg() {
  user_have_new_msg_ = false;
}
inline bool UserExtInfo::user_have_new_msg() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_have_new_msg)
  return user_have_new_msg_;
}
inline void UserExtInfo::set_user_have_new_msg(bool value) {
  
  user_have_new_msg_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_have_new_msg)
}

// optional uint32 user_total_bankrupt_times = 31;
inline void UserExtInfo::clear_user_total_bankrupt_times() {
  user_total_bankrupt_times_ = 0u;
}
inline ::google::protobuf::uint32 UserExtInfo::user_total_bankrupt_times() const {
  // @@protoc_insertion_point(field_get:UserExtInfo.user_total_bankrupt_times)
  return user_total_bankrupt_times_;
}
inline void UserExtInfo::set_user_total_bankrupt_times(::google::protobuf::uint32 value) {
  
  user_total_bankrupt_times_ = value;
  // @@protoc_insertion_point(field_set:UserExtInfo.user_total_bankrupt_times)
}

// -------------------------------------------------------------------

// Online_Info

// optional .ONLINE_STATUS online_status = 1;
inline void Online_Info::clear_online_status() {
  online_status_ = 0;
}
inline ::ONLINE_STATUS Online_Info::online_status() const {
  // @@protoc_insertion_point(field_get:Online_Info.online_status)
  return static_cast< ::ONLINE_STATUS >(online_status_);
}
inline void Online_Info::set_online_status(::ONLINE_STATUS value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:Online_Info.online_status)
}

// optional string game_host_svrid = 2;
inline void Online_Info::clear_game_host_svrid() {
  game_host_svrid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Online_Info::game_host_svrid() const {
  // @@protoc_insertion_point(field_get:Online_Info.game_host_svrid)
  return game_host_svrid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Online_Info::set_game_host_svrid(const ::std::string& value) {
  
  game_host_svrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Online_Info.game_host_svrid)
}
inline void Online_Info::set_game_host_svrid(const char* value) {
  
  game_host_svrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Online_Info.game_host_svrid)
}
inline void Online_Info::set_game_host_svrid(const char* value, size_t size) {
  
  game_host_svrid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Online_Info.game_host_svrid)
}
inline ::std::string* Online_Info::mutable_game_host_svrid() {
  
  // @@protoc_insertion_point(field_mutable:Online_Info.game_host_svrid)
  return game_host_svrid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Online_Info::release_game_host_svrid() {
  // @@protoc_insertion_point(field_release:Online_Info.game_host_svrid)
  
  return game_host_svrid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Online_Info::set_allocated_game_host_svrid(::std::string* game_host_svrid) {
  if (game_host_svrid != NULL) {
    
  } else {
    
  }
  game_host_svrid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_host_svrid);
  // @@protoc_insertion_point(field_set_allocated:Online_Info.game_host_svrid)
}

// optional int32 cur_rooid = 3;
inline void Online_Info::clear_cur_rooid() {
  cur_rooid_ = 0;
}
inline ::google::protobuf::int32 Online_Info::cur_rooid() const {
  // @@protoc_insertion_point(field_get:Online_Info.cur_rooid)
  return cur_rooid_;
}
inline void Online_Info::set_cur_rooid(::google::protobuf::int32 value) {
  
  cur_rooid_ = value;
  // @@protoc_insertion_point(field_set:Online_Info.cur_rooid)
}

// -------------------------------------------------------------------

// UserBaseInfo

// optional uint32 user_id = 1;
inline void UserBaseInfo::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 UserBaseInfo::user_id() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_id)
  return user_id_;
}
inline void UserBaseInfo::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_id)
}

// optional bytes user_type = 2;
inline void UserBaseInfo::clear_user_type() {
  user_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserBaseInfo::user_type() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_type)
  return user_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_user_type(const ::std::string& value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_type)
}
inline void UserBaseInfo::set_user_type(const char* value) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_type)
}
inline void UserBaseInfo::set_user_type(const void* value, size_t size) {
  
  user_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_type)
}
inline ::std::string* UserBaseInfo::mutable_user_type() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_type)
  return user_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserBaseInfo::release_user_type() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_type)
  
  return user_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_user_type(::std::string* user_type) {
  if (user_type != NULL) {
    
  } else {
    
  }
  user_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_type);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_type)
}

// optional string user_name = 4;
inline void UserBaseInfo::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserBaseInfo::user_name() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_name)
}
inline void UserBaseInfo::set_user_name(const char* value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_name)
}
inline void UserBaseInfo::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_name)
}
inline ::std::string* UserBaseInfo::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserBaseInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_name)
}

// optional .UserSex user_sex = 7;
inline void UserBaseInfo::clear_user_sex() {
  user_sex_ = 0;
}
inline ::UserSex UserBaseInfo::user_sex() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_sex)
  return static_cast< ::UserSex >(user_sex_);
}
inline void UserBaseInfo::set_user_sex(::UserSex value) {
  
  user_sex_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_sex)
}

// optional int32 user_img_id = 6;
inline void UserBaseInfo::clear_user_img_id() {
  user_img_id_ = 0;
}
inline ::google::protobuf::int32 UserBaseInfo::user_img_id() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_img_id)
  return user_img_id_;
}
inline void UserBaseInfo::set_user_img_id(::google::protobuf::int32 value) {
  
  user_img_id_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_img_id)
}

// optional string user_head_url = 35;
inline void UserBaseInfo::clear_user_head_url() {
  user_head_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserBaseInfo::user_head_url() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_head_url)
  return user_head_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_user_head_url(const ::std::string& value) {
  
  user_head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_head_url)
}
inline void UserBaseInfo::set_user_head_url(const char* value) {
  
  user_head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_head_url)
}
inline void UserBaseInfo::set_user_head_url(const char* value, size_t size) {
  
  user_head_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_head_url)
}
inline ::std::string* UserBaseInfo::mutable_user_head_url() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_head_url)
  return user_head_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserBaseInfo::release_user_head_url() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_head_url)
  
  return user_head_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_user_head_url(::std::string* user_head_url) {
  if (user_head_url != NULL) {
    
  } else {
    
  }
  user_head_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_head_url);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_head_url)
}

// optional uint64 user_total_chips = 8;
inline void UserBaseInfo::clear_user_total_chips() {
  user_total_chips_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserBaseInfo::user_total_chips() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_chips)
  return user_total_chips_;
}
inline void UserBaseInfo::set_user_total_chips(::google::protobuf::uint64 value) {
  
  user_total_chips_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_chips)
}

// optional uint64 user_total_coins = 10;
inline void UserBaseInfo::clear_user_total_coins() {
  user_total_coins_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 UserBaseInfo::user_total_coins() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_coins)
  return user_total_coins_;
}
inline void UserBaseInfo::set_user_total_coins(::google::protobuf::uint64 value) {
  
  user_total_coins_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_coins)
}

// optional bytes user_level = 11;
inline void UserBaseInfo::clear_user_level() {
  user_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserBaseInfo::user_level() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_level)
  return user_level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_user_level(const ::std::string& value) {
  
  user_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_level)
}
inline void UserBaseInfo::set_user_level(const char* value) {
  
  user_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.user_level)
}
inline void UserBaseInfo::set_user_level(const void* value, size_t size) {
  
  user_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.user_level)
}
inline ::std::string* UserBaseInfo::mutable_user_level() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.user_level)
  return user_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserBaseInfo::release_user_level() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.user_level)
  
  return user_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_user_level(::std::string* user_level) {
  if (user_level != NULL) {
    
  } else {
    
  }
  user_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_level);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.user_level)
}

// optional uint32 user_total_win_rounds = 18;
inline void UserBaseInfo::clear_user_total_win_rounds() {
  user_total_win_rounds_ = 0u;
}
inline ::google::protobuf::uint32 UserBaseInfo::user_total_win_rounds() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_win_rounds)
  return user_total_win_rounds_;
}
inline void UserBaseInfo::set_user_total_win_rounds(::google::protobuf::uint32 value) {
  
  user_total_win_rounds_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_win_rounds)
}

// optional uint32 user_total_lost_rounds = 19;
inline void UserBaseInfo::clear_user_total_lost_rounds() {
  user_total_lost_rounds_ = 0u;
}
inline ::google::protobuf::uint32 UserBaseInfo::user_total_lost_rounds() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_total_lost_rounds)
  return user_total_lost_rounds_;
}
inline void UserBaseInfo::set_user_total_lost_rounds(::google::protobuf::uint32 value) {
  
  user_total_lost_rounds_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_total_lost_rounds)
}

// optional uint32 giftimg_onuse = 20;
inline void UserBaseInfo::clear_giftimg_onuse() {
  giftimg_onuse_ = 0u;
}
inline ::google::protobuf::uint32 UserBaseInfo::giftimg_onuse() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.giftimg_onuse)
  return giftimg_onuse_;
}
inline void UserBaseInfo::set_giftimg_onuse(::google::protobuf::uint32 value) {
  
  giftimg_onuse_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.giftimg_onuse)
}

// optional string giftImg_url = 21;
inline void UserBaseInfo::clear_giftimg_url() {
  giftimg_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserBaseInfo::giftimg_url() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.giftImg_url)
  return giftimg_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_giftimg_url(const ::std::string& value) {
  
  giftimg_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserBaseInfo.giftImg_url)
}
inline void UserBaseInfo::set_giftimg_url(const char* value) {
  
  giftimg_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserBaseInfo.giftImg_url)
}
inline void UserBaseInfo::set_giftimg_url(const char* value, size_t size) {
  
  giftimg_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserBaseInfo.giftImg_url)
}
inline ::std::string* UserBaseInfo::mutable_giftimg_url() {
  
  // @@protoc_insertion_point(field_mutable:UserBaseInfo.giftImg_url)
  return giftimg_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserBaseInfo::release_giftimg_url() {
  // @@protoc_insertion_point(field_release:UserBaseInfo.giftImg_url)
  
  return giftimg_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserBaseInfo::set_allocated_giftimg_url(::std::string* giftimg_url) {
  if (giftimg_url != NULL) {
    
  } else {
    
  }
  giftimg_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), giftimg_url);
  // @@protoc_insertion_point(field_set_allocated:UserBaseInfo.giftImg_url)
}

// optional bool chat_enable = 36;
inline void UserBaseInfo::clear_chat_enable() {
  chat_enable_ = false;
}
inline bool UserBaseInfo::chat_enable() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.chat_enable)
  return chat_enable_;
}
inline void UserBaseInfo::set_chat_enable(bool value) {
  
  chat_enable_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.chat_enable)
}

// optional .User_role user_is_admin = 38;
inline void UserBaseInfo::clear_user_is_admin() {
  user_is_admin_ = 0;
}
inline ::User_role UserBaseInfo::user_is_admin() const {
  // @@protoc_insertion_point(field_get:UserBaseInfo.user_is_admin)
  return static_cast< ::User_role >(user_is_admin_);
}
inline void UserBaseInfo::set_user_is_admin(::User_role value) {
  
  user_is_admin_ = value;
  // @@protoc_insertion_point(field_set:UserBaseInfo.user_is_admin)
}

// -------------------------------------------------------------------

// MyBaseInfo

// optional .UserBaseInfo baseInfo = 1;
inline bool MyBaseInfo::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
inline void MyBaseInfo::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
inline const ::UserBaseInfo& MyBaseInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:MyBaseInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserBaseInfo* MyBaseInfo::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfo.baseInfo)
  return baseinfo_;
}
inline ::UserBaseInfo* MyBaseInfo::release_baseinfo() {
  // @@protoc_insertion_point(field_release:MyBaseInfo.baseInfo)
  
  ::UserBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void MyBaseInfo::set_allocated_baseinfo(::UserBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfo.baseInfo)
}

// optional .Online_Info onlineInfo = 2;
inline bool MyBaseInfo::has_onlineinfo() const {
  return !_is_default_instance_ && onlineinfo_ != NULL;
}
inline void MyBaseInfo::clear_onlineinfo() {
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}
inline const ::Online_Info& MyBaseInfo::onlineinfo() const {
  // @@protoc_insertion_point(field_get:MyBaseInfo.onlineInfo)
  return onlineinfo_ != NULL ? *onlineinfo_ : *default_instance_->onlineinfo_;
}
inline ::Online_Info* MyBaseInfo::mutable_onlineinfo() {
  
  if (onlineinfo_ == NULL) {
    onlineinfo_ = new ::Online_Info;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfo.onlineInfo)
  return onlineinfo_;
}
inline ::Online_Info* MyBaseInfo::release_onlineinfo() {
  // @@protoc_insertion_point(field_release:MyBaseInfo.onlineInfo)
  
  ::Online_Info* temp = onlineinfo_;
  onlineinfo_ = NULL;
  return temp;
}
inline void MyBaseInfo::set_allocated_onlineinfo(::Online_Info* onlineinfo) {
  delete onlineinfo_;
  onlineinfo_ = onlineinfo;
  if (onlineinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfo.onlineInfo)
}

// -------------------------------------------------------------------

// MyAllInfo

// optional .UserBaseInfo baseInfo = 1;
inline bool MyAllInfo::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
inline void MyAllInfo::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
inline const ::UserBaseInfo& MyAllInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:MyAllInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserBaseInfo* MyAllInfo::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfo.baseInfo)
  return baseinfo_;
}
inline ::UserBaseInfo* MyAllInfo::release_baseinfo() {
  // @@protoc_insertion_point(field_release:MyAllInfo.baseInfo)
  
  ::UserBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void MyAllInfo::set_allocated_baseinfo(::UserBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfo.baseInfo)
}

// optional .Online_Info onlineInfo = 2;
inline bool MyAllInfo::has_onlineinfo() const {
  return !_is_default_instance_ && onlineinfo_ != NULL;
}
inline void MyAllInfo::clear_onlineinfo() {
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}
inline const ::Online_Info& MyAllInfo::onlineinfo() const {
  // @@protoc_insertion_point(field_get:MyAllInfo.onlineInfo)
  return onlineinfo_ != NULL ? *onlineinfo_ : *default_instance_->onlineinfo_;
}
inline ::Online_Info* MyAllInfo::mutable_onlineinfo() {
  
  if (onlineinfo_ == NULL) {
    onlineinfo_ = new ::Online_Info;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfo.onlineInfo)
  return onlineinfo_;
}
inline ::Online_Info* MyAllInfo::release_onlineinfo() {
  // @@protoc_insertion_point(field_release:MyAllInfo.onlineInfo)
  
  ::Online_Info* temp = onlineinfo_;
  onlineinfo_ = NULL;
  return temp;
}
inline void MyAllInfo::set_allocated_onlineinfo(::Online_Info* onlineinfo) {
  delete onlineinfo_;
  onlineinfo_ = onlineinfo;
  if (onlineinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfo.onlineInfo)
}

// optional .UserExtInfo extInfo = 3;
inline bool MyAllInfo::has_extinfo() const {
  return !_is_default_instance_ && extinfo_ != NULL;
}
inline void MyAllInfo::clear_extinfo() {
  if (GetArenaNoVirtual() == NULL && extinfo_ != NULL) delete extinfo_;
  extinfo_ = NULL;
}
inline const ::UserExtInfo& MyAllInfo::extinfo() const {
  // @@protoc_insertion_point(field_get:MyAllInfo.extInfo)
  return extinfo_ != NULL ? *extinfo_ : *default_instance_->extinfo_;
}
inline ::UserExtInfo* MyAllInfo::mutable_extinfo() {
  
  if (extinfo_ == NULL) {
    extinfo_ = new ::UserExtInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfo.extInfo)
  return extinfo_;
}
inline ::UserExtInfo* MyAllInfo::release_extinfo() {
  // @@protoc_insertion_point(field_release:MyAllInfo.extInfo)
  
  ::UserExtInfo* temp = extinfo_;
  extinfo_ = NULL;
  return temp;
}
inline void MyAllInfo::set_allocated_extinfo(::UserExtInfo* extinfo) {
  delete extinfo_;
  extinfo_ = extinfo;
  if (extinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfo.extInfo)
}

// -------------------------------------------------------------------

// FriendBaseInfo

// optional .UserBaseInfo baseInfo = 1;
inline bool FriendBaseInfo::has_baseinfo() const {
  return !_is_default_instance_ && baseinfo_ != NULL;
}
inline void FriendBaseInfo::clear_baseinfo() {
  if (GetArenaNoVirtual() == NULL && baseinfo_ != NULL) delete baseinfo_;
  baseinfo_ = NULL;
}
inline const ::UserBaseInfo& FriendBaseInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:FriendBaseInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::UserBaseInfo* FriendBaseInfo::mutable_baseinfo() {
  
  if (baseinfo_ == NULL) {
    baseinfo_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:FriendBaseInfo.baseInfo)
  return baseinfo_;
}
inline ::UserBaseInfo* FriendBaseInfo::release_baseinfo() {
  // @@protoc_insertion_point(field_release:FriendBaseInfo.baseInfo)
  
  ::UserBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void FriendBaseInfo::set_allocated_baseinfo(::UserBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FriendBaseInfo.baseInfo)
}

// optional .Online_Info onlineInfo = 2;
inline bool FriendBaseInfo::has_onlineinfo() const {
  return !_is_default_instance_ && onlineinfo_ != NULL;
}
inline void FriendBaseInfo::clear_onlineinfo() {
  if (GetArenaNoVirtual() == NULL && onlineinfo_ != NULL) delete onlineinfo_;
  onlineinfo_ = NULL;
}
inline const ::Online_Info& FriendBaseInfo::onlineinfo() const {
  // @@protoc_insertion_point(field_get:FriendBaseInfo.onlineInfo)
  return onlineinfo_ != NULL ? *onlineinfo_ : *default_instance_->onlineinfo_;
}
inline ::Online_Info* FriendBaseInfo::mutable_onlineinfo() {
  
  if (onlineinfo_ == NULL) {
    onlineinfo_ = new ::Online_Info;
  }
  // @@protoc_insertion_point(field_mutable:FriendBaseInfo.onlineInfo)
  return onlineinfo_;
}
inline ::Online_Info* FriendBaseInfo::release_onlineinfo() {
  // @@protoc_insertion_point(field_release:FriendBaseInfo.onlineInfo)
  
  ::Online_Info* temp = onlineinfo_;
  onlineinfo_ = NULL;
  return temp;
}
inline void FriendBaseInfo::set_allocated_onlineinfo(::Online_Info* onlineinfo) {
  delete onlineinfo_;
  onlineinfo_ = onlineinfo;
  if (onlineinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:FriendBaseInfo.onlineInfo)
}

// -------------------------------------------------------------------

// StatusResponse

// optional .ResponseHeader head = 1;
inline bool StatusResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void StatusResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& StatusResponse::head() const {
  // @@protoc_insertion_point(field_get:StatusResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* StatusResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:StatusResponse.head)
  return head_;
}
inline ::ResponseHeader* StatusResponse::release_head() {
  // @@protoc_insertion_point(field_release:StatusResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void StatusResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.head)
}

// optional bytes status = 2;
inline void StatusResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:StatusResponse.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusResponse.status)
}
inline void StatusResponse::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusResponse.status)
}
inline void StatusResponse::set_status(const void* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusResponse.status)
}
inline ::std::string* StatusResponse::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:StatusResponse.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:StatusResponse.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.status)
}

// optional string ext1 = 3;
inline void StatusResponse::clear_ext1() {
  ext1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusResponse::ext1() const {
  // @@protoc_insertion_point(field_get:StatusResponse.ext1)
  return ext1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse::set_ext1(const ::std::string& value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StatusResponse.ext1)
}
inline void StatusResponse::set_ext1(const char* value) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StatusResponse.ext1)
}
inline void StatusResponse::set_ext1(const char* value, size_t size) {
  
  ext1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StatusResponse.ext1)
}
inline ::std::string* StatusResponse::mutable_ext1() {
  
  // @@protoc_insertion_point(field_mutable:StatusResponse.ext1)
  return ext1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusResponse::release_ext1() {
  // @@protoc_insertion_point(field_release:StatusResponse.ext1)
  
  return ext1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusResponse::set_allocated_ext1(::std::string* ext1) {
  if (ext1 != NULL) {
    
  } else {
    
  }
  ext1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ext1);
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.ext1)
}

// -------------------------------------------------------------------

// MyBaseInfoResponse

// optional .ResponseHeader head = 1;
inline bool MyBaseInfoResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void MyBaseInfoResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& MyBaseInfoResponse::head() const {
  // @@protoc_insertion_point(field_get:MyBaseInfoResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* MyBaseInfoResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfoResponse.head)
  return head_;
}
inline ::ResponseHeader* MyBaseInfoResponse::release_head() {
  // @@protoc_insertion_point(field_release:MyBaseInfoResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void MyBaseInfoResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfoResponse.head)
}

// optional .MyBaseInfo info = 2;
inline bool MyBaseInfoResponse::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void MyBaseInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::MyBaseInfo& MyBaseInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:MyBaseInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::MyBaseInfo* MyBaseInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::MyBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyBaseInfoResponse.info)
  return info_;
}
inline ::MyBaseInfo* MyBaseInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:MyBaseInfoResponse.info)
  
  ::MyBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MyBaseInfoResponse::set_allocated_info(::MyBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyBaseInfoResponse.info)
}

// -------------------------------------------------------------------

// MyAllInfoResponse

// optional .ResponseHeader head = 1;
inline bool MyAllInfoResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void MyAllInfoResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& MyAllInfoResponse::head() const {
  // @@protoc_insertion_point(field_get:MyAllInfoResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* MyAllInfoResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfoResponse.head)
  return head_;
}
inline ::ResponseHeader* MyAllInfoResponse::release_head() {
  // @@protoc_insertion_point(field_release:MyAllInfoResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void MyAllInfoResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfoResponse.head)
}

// optional .MyAllInfo info = 2;
inline bool MyAllInfoResponse::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void MyAllInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::MyAllInfo& MyAllInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:MyAllInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::MyAllInfo* MyAllInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::MyAllInfo;
  }
  // @@protoc_insertion_point(field_mutable:MyAllInfoResponse.info)
  return info_;
}
inline ::MyAllInfo* MyAllInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:MyAllInfoResponse.info)
  
  ::MyAllInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MyAllInfoResponse::set_allocated_info(::MyAllInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:MyAllInfoResponse.info)
}

// -------------------------------------------------------------------

// PlayerInfoRequest

// optional .CommonRequest basic = 1;
inline bool PlayerInfoRequest::has_basic() const {
  return !_is_default_instance_ && basic_ != NULL;
}
inline void PlayerInfoRequest::clear_basic() {
  if (GetArenaNoVirtual() == NULL && basic_ != NULL) delete basic_;
  basic_ = NULL;
}
inline const ::CommonRequest& PlayerInfoRequest::basic() const {
  // @@protoc_insertion_point(field_get:PlayerInfoRequest.basic)
  return basic_ != NULL ? *basic_ : *default_instance_->basic_;
}
inline ::CommonRequest* PlayerInfoRequest::mutable_basic() {
  
  if (basic_ == NULL) {
    basic_ = new ::CommonRequest;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoRequest.basic)
  return basic_;
}
inline ::CommonRequest* PlayerInfoRequest::release_basic() {
  // @@protoc_insertion_point(field_release:PlayerInfoRequest.basic)
  
  ::CommonRequest* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline void PlayerInfoRequest::set_allocated_basic(::CommonRequest* basic) {
  delete basic_;
  basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoRequest.basic)
}

// optional uint32 playeruid = 2;
inline void PlayerInfoRequest::clear_playeruid() {
  playeruid_ = 0u;
}
inline ::google::protobuf::uint32 PlayerInfoRequest::playeruid() const {
  // @@protoc_insertion_point(field_get:PlayerInfoRequest.playeruid)
  return playeruid_;
}
inline void PlayerInfoRequest::set_playeruid(::google::protobuf::uint32 value) {
  
  playeruid_ = value;
  // @@protoc_insertion_point(field_set:PlayerInfoRequest.playeruid)
}

// -------------------------------------------------------------------

// PlayerInfoResponse

// optional .ResponseHeader head = 1;
inline bool PlayerInfoResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
inline void PlayerInfoResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
inline const ::ResponseHeader& PlayerInfoResponse::head() const {
  // @@protoc_insertion_point(field_get:PlayerInfoResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::ResponseHeader* PlayerInfoResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoResponse.head)
  return head_;
}
inline ::ResponseHeader* PlayerInfoResponse::release_head() {
  // @@protoc_insertion_point(field_release:PlayerInfoResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void PlayerInfoResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoResponse.head)
}

// optional .UserBaseInfo info = 2;
inline bool PlayerInfoResponse::has_info() const {
  return !_is_default_instance_ && info_ != NULL;
}
inline void PlayerInfoResponse::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::UserBaseInfo& PlayerInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:PlayerInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::UserBaseInfo* PlayerInfoResponse::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::UserBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:PlayerInfoResponse.info)
  return info_;
}
inline ::UserBaseInfo* PlayerInfoResponse::release_info() {
  // @@protoc_insertion_point(field_release:PlayerInfoResponse.info)
  
  ::UserBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void PlayerInfoResponse::set_allocated_info(::UserBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PlayerInfoResponse.info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::User_role> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::User_role>() {
  return ::User_role_descriptor();
}
template <> struct is_proto_enum< ::ONLINE_STATUS> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ONLINE_STATUS>() {
  return ::ONLINE_STATUS_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_User_2eproto__INCLUDED
