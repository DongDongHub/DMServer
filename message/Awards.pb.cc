// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Awards.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Awards.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LoginAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* signAwardImageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  signAwardImageInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* signAwardImageInfo_signAwardImageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* seriesDaysAwardImageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  seriesDaysAwardImageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterAwardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAwardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterOneDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterOneDay_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountBoxAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountBoxAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountBoxAward_AwardCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountBoxAward_AwardCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreechipStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreechipStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllAwardsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllAwardsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Awards_2eproto() {
  protobuf_AddDesc_Awards_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Awards.proto");
  GOOGLE_CHECK(file != NULL);
  LoginAward_descriptor_ = file->message_type(0);
  static const int LoginAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAward, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAward, award_next_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAward, award_counttime_),
  };
  LoginAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginAward_descriptor_,
      LoginAward::default_instance_,
      LoginAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAward, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginAward, _is_default_instance_));
  signAwardImageInfo_descriptor_ = file->message_type(1);
  static const int signAwardImageInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, imageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, signawardimagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, bsignaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, signawardimageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, signawardimagebgcolor_),
  };
  signAwardImageInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      signAwardImageInfo_descriptor_,
      signAwardImageInfo::default_instance_,
      signAwardImageInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(signAwardImageInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(signAwardImageInfo, _is_default_instance_));
  signAwardImageInfo_signAwardImageType_descriptor_ = signAwardImageInfo_descriptor_->enum_type(0);
  seriesDaysAwardImageInfo_descriptor_ = file->message_type(2);
  static const int seriesDaysAwardImageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seriesDaysAwardImageInfo, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seriesDaysAwardImageInfo, signawardimageinfo_),
  };
  seriesDaysAwardImageInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      seriesDaysAwardImageInfo_descriptor_,
      seriesDaysAwardImageInfo::default_instance_,
      seriesDaysAwardImageInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(seriesDaysAwardImageInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seriesDaysAwardImageInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(seriesDaysAwardImageInfo, _is_default_instance_));
  SignAward_descriptor_ = file->message_type(3);
  static const int SignAward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, issignedflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, isaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, commontotalawards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, extawards_),
  };
  SignAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignAward_descriptor_,
      SignAward::default_instance_,
      SignAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(SignAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignAward, _is_default_instance_));
  RegisterAwardItem_descriptor_ = file->message_type(4);
  static const int RegisterAwardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAwardItem, prop_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAwardItem, prop_count_),
  };
  RegisterAwardItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterAwardItem_descriptor_,
      RegisterAwardItem::default_instance_,
      RegisterAwardItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterAwardItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAwardItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAwardItem, _is_default_instance_));
  RegisterOneDay_descriptor_ = file->message_type(5);
  static const int RegisterOneDay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterOneDay, is_award_getted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterOneDay, one_day_award_),
  };
  RegisterOneDay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterOneDay_descriptor_,
      RegisterOneDay::default_instance_,
      RegisterOneDay_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterOneDay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterOneDay, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterOneDay, _is_default_instance_));
  RegisterAward_descriptor_ = file->message_type(6);
  static const int RegisterAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAward, is_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAward, todayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAward, total_days_),
  };
  RegisterAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterAward_descriptor_,
      RegisterAward::default_instance_,
      RegisterAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAward, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterAward, _is_default_instance_));
  CountBoxAward_descriptor_ = file->message_type(7);
  static const int CountBoxAward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward, awardconfigs_),
  };
  CountBoxAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CountBoxAward_descriptor_,
      CountBoxAward::default_instance_,
      CountBoxAward_offsets_,
      -1,
      -1,
      -1,
      sizeof(CountBoxAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward, _is_default_instance_));
  CountBoxAward_AwardCfg_descriptor_ = CountBoxAward_descriptor_->nested_type(0);
  static const int CountBoxAward_AwardCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward_AwardCfg, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward_AwardCfg, amount_),
  };
  CountBoxAward_AwardCfg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CountBoxAward_AwardCfg_descriptor_,
      CountBoxAward_AwardCfg::default_instance_,
      CountBoxAward_AwardCfg_offsets_,
      -1,
      -1,
      -1,
      sizeof(CountBoxAward_AwardCfg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward_AwardCfg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountBoxAward_AwardCfg, _is_default_instance_));
  FreechipStatus_descriptor_ = file->message_type(8);
  static const int FreechipStatus_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, daily_sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, login_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, daily_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, activity_center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, counting_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, register_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, activity_gamecount_),
  };
  FreechipStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FreechipStatus_descriptor_,
      FreechipStatus::default_instance_,
      FreechipStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(FreechipStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreechipStatus, _is_default_instance_));
  AllAwardsResponse_descriptor_ = file->message_type(9);
  static const int AllAwardsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, loginaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, registeraward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, signaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, countboxaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, freechipstatus_),
  };
  AllAwardsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AllAwardsResponse_descriptor_,
      AllAwardsResponse::default_instance_,
      AllAwardsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AllAwardsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllAwardsResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Awards_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginAward_descriptor_, &LoginAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      signAwardImageInfo_descriptor_, &signAwardImageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      seriesDaysAwardImageInfo_descriptor_, &seriesDaysAwardImageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignAward_descriptor_, &SignAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterAwardItem_descriptor_, &RegisterAwardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterOneDay_descriptor_, &RegisterOneDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterAward_descriptor_, &RegisterAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CountBoxAward_descriptor_, &CountBoxAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CountBoxAward_AwardCfg_descriptor_, &CountBoxAward_AwardCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FreechipStatus_descriptor_, &FreechipStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AllAwardsResponse_descriptor_, &AllAwardsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Awards_2eproto() {
  delete LoginAward::default_instance_;
  delete LoginAward_reflection_;
  delete signAwardImageInfo::default_instance_;
  delete signAwardImageInfo_reflection_;
  delete seriesDaysAwardImageInfo::default_instance_;
  delete seriesDaysAwardImageInfo_reflection_;
  delete SignAward::default_instance_;
  delete SignAward_reflection_;
  delete RegisterAwardItem::default_instance_;
  delete RegisterAwardItem_reflection_;
  delete RegisterOneDay::default_instance_;
  delete RegisterOneDay_reflection_;
  delete RegisterAward::default_instance_;
  delete RegisterAward_reflection_;
  delete CountBoxAward::default_instance_;
  delete CountBoxAward_reflection_;
  delete CountBoxAward_AwardCfg::default_instance_;
  delete CountBoxAward_AwardCfg_reflection_;
  delete FreechipStatus::default_instance_;
  delete FreechipStatus_reflection_;
  delete AllAwardsResponse::default_instance_;
  delete AllAwardsResponse_reflection_;
}

void protobuf_AddDesc_Awards_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Basic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Awards.proto\032\013Basic.proto\"M\n\nLoginAwar"
    "d\022\014\n\004step\030\001 \001(\014\022\030\n\020award_next_money\030\002 \001("
    "\004\022\027\n\017award_counttime\030\003 \001(\r\"\254\002\n\022signAward"
    "ImageInfo\0224\n\004type\030\001 \001(\0162&.signAwardImage"
    "Info.signAwardImageType\022\017\n\007imageId\030\002 \001(\r"
    "\022\031\n\021signAwardImageNum\030\003 \001(\004\022\022\n\nbSignAwar"
    "d\030\004 \001(\r\022\031\n\021signAwardImageUrl\030\005 \001(\t\022\035\n\025si"
    "gnAwardImageBgColor\030\006 \001(\r\"f\n\022signAwardIm"
    "ageType\022\013\n\007unkwown\020\000\022\024\n\020InteractiveProps"
    "\020\001\022\014\n\010ChipsBox\020\002\022\t\n\005Chips\020\003\022\t\n\005Coins\020\004\022\t"
    "\n\005Gifts\020\005\"Y\n\030seriesDaysAwardImageInfo\022\014\n"
    "\004days\030\001 \001(\r\022/\n\022signAwardImageInfo\030\002 \001(\0132"
    "\023.signAwardImageInfo\"\237\001\n\tSignAward\022\014\n\004we"
    "ek\030\001 \001(\r\022\025\n\risSignedFlags\030\002 \003(\r\022\017\n\007isawa"
    "rd\030\003 \001(\r\022.\n\021commonTotalAwards\030\004 \003(\0132\023.si"
    "gnAwardImageInfo\022,\n\textAwards\030\005 \003(\0132\031.se"
    "riesDaysAwardImageInfo\"8\n\021RegisterAwardI"
    "tem\022\017\n\007prop_id\030\001 \001(\r\022\022\n\nprop_count\030\002 \001(\r"
    "\"T\n\016RegisterOneDay\022\027\n\017is_award_getted\030\001 "
    "\001(\010\022)\n\rone_day_award\030\002 \003(\0132\022.RegisterAwa"
    "rdItem\"Z\n\rRegisterAward\022\020\n\010is_award\030\001 \001("
    "\r\022\022\n\ntodayIndex\030\002 \001(\r\022#\n\ntotal_days\030\003 \003("
    "\0132\017.RegisterOneDay\"\210\001\n\rCountBoxAward\022\020\n\010"
    "duration\030\001 \001(\r\022\014\n\004step\030\002 \001(\r\022-\n\014AwardCon"
    "figs\030\003 \003(\0132\027.CountBoxAward.AwardCfg\032(\n\010A"
    "wardCfg\022\014\n\004time\030\001 \001(\r\022\016\n\006amount\030\002 \001(\004\"\260\001"
    "\n\016FreechipStatus\022\022\n\ndaily_sign\030\001 \001(\r\022\023\n\013"
    "login_award\030\002 \001(\r\022\022\n\ndaily_task\030\003 \001(\r\022\027\n"
    "\017activity_center\030\004 \001(\r\022\024\n\014counting_box\030\005"
    " \001(\r\022\026\n\016register_award\030\006 \001(\r\022\032\n\022activity"
    "_gamecount\030\007 \001(\r\"\351\001\n\021AllAwardsResponse\022\035"
    "\n\004head\030\001 \001(\0132\017.ResponseHeader\022\037\n\nloginAw"
    "ard\030\002 \001(\0132\013.LoginAward\022%\n\rregisterAward\030"
    "\003 \001(\0132\016.RegisterAward\022\035\n\tsignAward\030\004 \001(\013"
    "2\n.SignAward\022%\n\rcountBoxAward\030\005 \001(\0132\016.Co"
    "untBoxAward\022\'\n\016freechipStatus\030\006 \001(\0132\017.Fr"
    "eechipStatusb\006proto3", 1460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Awards.proto", &protobuf_RegisterTypes);
  LoginAward::default_instance_ = new LoginAward();
  signAwardImageInfo::default_instance_ = new signAwardImageInfo();
  seriesDaysAwardImageInfo::default_instance_ = new seriesDaysAwardImageInfo();
  SignAward::default_instance_ = new SignAward();
  RegisterAwardItem::default_instance_ = new RegisterAwardItem();
  RegisterOneDay::default_instance_ = new RegisterOneDay();
  RegisterAward::default_instance_ = new RegisterAward();
  CountBoxAward::default_instance_ = new CountBoxAward();
  CountBoxAward_AwardCfg::default_instance_ = new CountBoxAward_AwardCfg();
  FreechipStatus::default_instance_ = new FreechipStatus();
  AllAwardsResponse::default_instance_ = new AllAwardsResponse();
  LoginAward::default_instance_->InitAsDefaultInstance();
  signAwardImageInfo::default_instance_->InitAsDefaultInstance();
  seriesDaysAwardImageInfo::default_instance_->InitAsDefaultInstance();
  SignAward::default_instance_->InitAsDefaultInstance();
  RegisterAwardItem::default_instance_->InitAsDefaultInstance();
  RegisterOneDay::default_instance_->InitAsDefaultInstance();
  RegisterAward::default_instance_->InitAsDefaultInstance();
  CountBoxAward::default_instance_->InitAsDefaultInstance();
  CountBoxAward_AwardCfg::default_instance_->InitAsDefaultInstance();
  FreechipStatus::default_instance_->InitAsDefaultInstance();
  AllAwardsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Awards_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Awards_2eproto {
  StaticDescriptorInitializer_Awards_2eproto() {
    protobuf_AddDesc_Awards_2eproto();
  }
} static_descriptor_initializer_Awards_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginAward::kStepFieldNumber;
const int LoginAward::kAwardNextMoneyFieldNumber;
const int LoginAward::kAwardCounttimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginAward::LoginAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginAward)
}

void LoginAward::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginAward::LoginAward(const LoginAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginAward)
}

void LoginAward::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  step_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  award_next_money_ = GOOGLE_ULONGLONG(0);
  award_counttime_ = 0u;
}

LoginAward::~LoginAward() {
  // @@protoc_insertion_point(destructor:LoginAward)
  SharedDtor();
}

void LoginAward::SharedDtor() {
  step_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginAward_descriptor_;
}

const LoginAward& LoginAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

LoginAward* LoginAward::default_instance_ = NULL;

LoginAward* LoginAward::New(::google::protobuf::Arena* arena) const {
  LoginAward* n = new LoginAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginAward::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginAward)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginAward, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginAward*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(award_next_money_, award_counttime_);
  step_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LoginAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes step = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_award_next_money;
        break;
      }

      // optional uint64 award_next_money = 2;
      case 2: {
        if (tag == 16) {
         parse_award_next_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &award_next_money_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_award_counttime;
        break;
      }

      // optional uint32 award_counttime = 3;
      case 3: {
        if (tag == 24) {
         parse_award_counttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &award_counttime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginAward)
  return false;
#undef DO_
}

void LoginAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginAward)
  // optional bytes step = 1;
  if (this->step().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->step(), output);
  }

  // optional uint64 award_next_money = 2;
  if (this->award_next_money() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->award_next_money(), output);
  }

  // optional uint32 award_counttime = 3;
  if (this->award_counttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->award_counttime(), output);
  }

  // @@protoc_insertion_point(serialize_end:LoginAward)
}

::google::protobuf::uint8* LoginAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginAward)
  // optional bytes step = 1;
  if (this->step().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->step(), target);
  }

  // optional uint64 award_next_money = 2;
  if (this->award_next_money() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->award_next_money(), target);
  }

  // optional uint32 award_counttime = 3;
  if (this->award_counttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->award_counttime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LoginAward)
  return target;
}

int LoginAward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LoginAward)
  int total_size = 0;

  // optional bytes step = 1;
  if (this->step().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->step());
  }

  // optional uint64 award_next_money = 2;
  if (this->award_next_money() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->award_next_money());
  }

  // optional uint32 award_counttime = 3;
  if (this->award_counttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->award_counttime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginAward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginAward)
    MergeFrom(*source);
  }
}

void LoginAward::MergeFrom(const LoginAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.step().size() > 0) {

    step_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.step_);
  }
  if (from.award_next_money() != 0) {
    set_award_next_money(from.award_next_money());
  }
  if (from.award_counttime() != 0) {
    set_award_counttime(from.award_counttime());
  }
}

void LoginAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginAward::CopyFrom(const LoginAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginAward::IsInitialized() const {

  return true;
}

void LoginAward::Swap(LoginAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginAward::InternalSwap(LoginAward* other) {
  step_.Swap(&other->step_);
  std::swap(award_next_money_, other->award_next_money_);
  std::swap(award_counttime_, other->award_counttime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginAward_descriptor_;
  metadata.reflection = LoginAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginAward

// optional bytes step = 1;
void LoginAward::clear_step() {
  step_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginAward::step() const {
  // @@protoc_insertion_point(field_get:LoginAward.step)
  return step_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginAward::set_step(const ::std::string& value) {
  
  step_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginAward.step)
}
 void LoginAward::set_step(const char* value) {
  
  step_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginAward.step)
}
 void LoginAward::set_step(const void* value, size_t size) {
  
  step_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginAward.step)
}
 ::std::string* LoginAward::mutable_step() {
  
  // @@protoc_insertion_point(field_mutable:LoginAward.step)
  return step_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginAward::release_step() {
  // @@protoc_insertion_point(field_release:LoginAward.step)
  
  return step_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginAward::set_allocated_step(::std::string* step) {
  if (step != NULL) {
    
  } else {
    
  }
  step_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), step);
  // @@protoc_insertion_point(field_set_allocated:LoginAward.step)
}

// optional uint64 award_next_money = 2;
void LoginAward::clear_award_next_money() {
  award_next_money_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LoginAward::award_next_money() const {
  // @@protoc_insertion_point(field_get:LoginAward.award_next_money)
  return award_next_money_;
}
 void LoginAward::set_award_next_money(::google::protobuf::uint64 value) {
  
  award_next_money_ = value;
  // @@protoc_insertion_point(field_set:LoginAward.award_next_money)
}

// optional uint32 award_counttime = 3;
void LoginAward::clear_award_counttime() {
  award_counttime_ = 0u;
}
 ::google::protobuf::uint32 LoginAward::award_counttime() const {
  // @@protoc_insertion_point(field_get:LoginAward.award_counttime)
  return award_counttime_;
}
 void LoginAward::set_award_counttime(::google::protobuf::uint32 value) {
  
  award_counttime_ = value;
  // @@protoc_insertion_point(field_set:LoginAward.award_counttime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* signAwardImageInfo_signAwardImageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signAwardImageInfo_signAwardImageType_descriptor_;
}
bool signAwardImageInfo_signAwardImageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const signAwardImageInfo_signAwardImageType signAwardImageInfo::unkwown;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::InteractiveProps;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::ChipsBox;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::Chips;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::Coins;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::Gifts;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::signAwardImageType_MIN;
const signAwardImageInfo_signAwardImageType signAwardImageInfo::signAwardImageType_MAX;
const int signAwardImageInfo::signAwardImageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int signAwardImageInfo::kTypeFieldNumber;
const int signAwardImageInfo::kImageIdFieldNumber;
const int signAwardImageInfo::kSignAwardImageNumFieldNumber;
const int signAwardImageInfo::kBSignAwardFieldNumber;
const int signAwardImageInfo::kSignAwardImageUrlFieldNumber;
const int signAwardImageInfo::kSignAwardImageBgColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

signAwardImageInfo::signAwardImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signAwardImageInfo)
}

void signAwardImageInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

signAwardImageInfo::signAwardImageInfo(const signAwardImageInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:signAwardImageInfo)
}

void signAwardImageInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  imageid_ = 0u;
  signawardimagenum_ = GOOGLE_ULONGLONG(0);
  bsignaward_ = 0u;
  signawardimageurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signawardimagebgcolor_ = 0u;
}

signAwardImageInfo::~signAwardImageInfo() {
  // @@protoc_insertion_point(destructor:signAwardImageInfo)
  SharedDtor();
}

void signAwardImageInfo::SharedDtor() {
  signawardimageurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void signAwardImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* signAwardImageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return signAwardImageInfo_descriptor_;
}

const signAwardImageInfo& signAwardImageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

signAwardImageInfo* signAwardImageInfo::default_instance_ = NULL;

signAwardImageInfo* signAwardImageInfo::New(::google::protobuf::Arena* arena) const {
  signAwardImageInfo* n = new signAwardImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void signAwardImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:signAwardImageInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(signAwardImageInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<signAwardImageInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, signawardimagenum_);
  ZR_(bsignaward_, signawardimagebgcolor_);
  signawardimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool signAwardImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:signAwardImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .signAwardImageInfo.signAwardImageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::signAwardImageInfo_signAwardImageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_imageId;
        break;
      }

      // optional uint32 imageId = 2;
      case 2: {
        if (tag == 16) {
         parse_imageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_signAwardImageNum;
        break;
      }

      // optional uint64 signAwardImageNum = 3;
      case 3: {
        if (tag == 24) {
         parse_signAwardImageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signawardimagenum_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bSignAward;
        break;
      }

      // optional uint32 bSignAward = 4;
      case 4: {
        if (tag == 32) {
         parse_bSignAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bsignaward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_signAwardImageUrl;
        break;
      }

      // optional string signAwardImageUrl = 5;
      case 5: {
        if (tag == 42) {
         parse_signAwardImageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signawardimageurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signawardimageurl().data(), this->signawardimageurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "signAwardImageInfo.signAwardImageUrl"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_signAwardImageBgColor;
        break;
      }

      // optional uint32 signAwardImageBgColor = 6;
      case 6: {
        if (tag == 48) {
         parse_signAwardImageBgColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signawardimagebgcolor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:signAwardImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:signAwardImageInfo)
  return false;
#undef DO_
}

void signAwardImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:signAwardImageInfo)
  // optional .signAwardImageInfo.signAwardImageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 imageId = 2;
  if (this->imageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->imageid(), output);
  }

  // optional uint64 signAwardImageNum = 3;
  if (this->signawardimagenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->signawardimagenum(), output);
  }

  // optional uint32 bSignAward = 4;
  if (this->bsignaward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bsignaward(), output);
  }

  // optional string signAwardImageUrl = 5;
  if (this->signawardimageurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signawardimageurl().data(), this->signawardimageurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "signAwardImageInfo.signAwardImageUrl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signawardimageurl(), output);
  }

  // optional uint32 signAwardImageBgColor = 6;
  if (this->signawardimagebgcolor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->signawardimagebgcolor(), output);
  }

  // @@protoc_insertion_point(serialize_end:signAwardImageInfo)
}

::google::protobuf::uint8* signAwardImageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:signAwardImageInfo)
  // optional .signAwardImageInfo.signAwardImageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 imageId = 2;
  if (this->imageid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->imageid(), target);
  }

  // optional uint64 signAwardImageNum = 3;
  if (this->signawardimagenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->signawardimagenum(), target);
  }

  // optional uint32 bSignAward = 4;
  if (this->bsignaward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bsignaward(), target);
  }

  // optional string signAwardImageUrl = 5;
  if (this->signawardimageurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signawardimageurl().data(), this->signawardimageurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "signAwardImageInfo.signAwardImageUrl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signawardimageurl(), target);
  }

  // optional uint32 signAwardImageBgColor = 6;
  if (this->signawardimagebgcolor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->signawardimagebgcolor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:signAwardImageInfo)
  return target;
}

int signAwardImageInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:signAwardImageInfo)
  int total_size = 0;

  // optional .signAwardImageInfo.signAwardImageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint32 imageId = 2;
  if (this->imageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->imageid());
  }

  // optional uint64 signAwardImageNum = 3;
  if (this->signawardimagenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->signawardimagenum());
  }

  // optional uint32 bSignAward = 4;
  if (this->bsignaward() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bsignaward());
  }

  // optional string signAwardImageUrl = 5;
  if (this->signawardimageurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signawardimageurl());
  }

  // optional uint32 signAwardImageBgColor = 6;
  if (this->signawardimagebgcolor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signawardimagebgcolor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void signAwardImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signAwardImageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const signAwardImageInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const signAwardImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signAwardImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signAwardImageInfo)
    MergeFrom(*source);
  }
}

void signAwardImageInfo::MergeFrom(const signAwardImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signAwardImageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.imageid() != 0) {
    set_imageid(from.imageid());
  }
  if (from.signawardimagenum() != 0) {
    set_signawardimagenum(from.signawardimagenum());
  }
  if (from.bsignaward() != 0) {
    set_bsignaward(from.bsignaward());
  }
  if (from.signawardimageurl().size() > 0) {

    signawardimageurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signawardimageurl_);
  }
  if (from.signawardimagebgcolor() != 0) {
    set_signawardimagebgcolor(from.signawardimagebgcolor());
  }
}

void signAwardImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signAwardImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signAwardImageInfo::CopyFrom(const signAwardImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signAwardImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signAwardImageInfo::IsInitialized() const {

  return true;
}

void signAwardImageInfo::Swap(signAwardImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void signAwardImageInfo::InternalSwap(signAwardImageInfo* other) {
  std::swap(type_, other->type_);
  std::swap(imageid_, other->imageid_);
  std::swap(signawardimagenum_, other->signawardimagenum_);
  std::swap(bsignaward_, other->bsignaward_);
  signawardimageurl_.Swap(&other->signawardimageurl_);
  std::swap(signawardimagebgcolor_, other->signawardimagebgcolor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata signAwardImageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = signAwardImageInfo_descriptor_;
  metadata.reflection = signAwardImageInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// signAwardImageInfo

// optional .signAwardImageInfo.signAwardImageType type = 1;
void signAwardImageInfo::clear_type() {
  type_ = 0;
}
 ::signAwardImageInfo_signAwardImageType signAwardImageInfo::type() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.type)
  return static_cast< ::signAwardImageInfo_signAwardImageType >(type_);
}
 void signAwardImageInfo::set_type(::signAwardImageInfo_signAwardImageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.type)
}

// optional uint32 imageId = 2;
void signAwardImageInfo::clear_imageid() {
  imageid_ = 0u;
}
 ::google::protobuf::uint32 signAwardImageInfo::imageid() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.imageId)
  return imageid_;
}
 void signAwardImageInfo::set_imageid(::google::protobuf::uint32 value) {
  
  imageid_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.imageId)
}

// optional uint64 signAwardImageNum = 3;
void signAwardImageInfo::clear_signawardimagenum() {
  signawardimagenum_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 signAwardImageInfo::signawardimagenum() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.signAwardImageNum)
  return signawardimagenum_;
}
 void signAwardImageInfo::set_signawardimagenum(::google::protobuf::uint64 value) {
  
  signawardimagenum_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.signAwardImageNum)
}

// optional uint32 bSignAward = 4;
void signAwardImageInfo::clear_bsignaward() {
  bsignaward_ = 0u;
}
 ::google::protobuf::uint32 signAwardImageInfo::bsignaward() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.bSignAward)
  return bsignaward_;
}
 void signAwardImageInfo::set_bsignaward(::google::protobuf::uint32 value) {
  
  bsignaward_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.bSignAward)
}

// optional string signAwardImageUrl = 5;
void signAwardImageInfo::clear_signawardimageurl() {
  signawardimageurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& signAwardImageInfo::signawardimageurl() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.signAwardImageUrl)
  return signawardimageurl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void signAwardImageInfo::set_signawardimageurl(const ::std::string& value) {
  
  signawardimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:signAwardImageInfo.signAwardImageUrl)
}
 void signAwardImageInfo::set_signawardimageurl(const char* value) {
  
  signawardimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signAwardImageInfo.signAwardImageUrl)
}
 void signAwardImageInfo::set_signawardimageurl(const char* value, size_t size) {
  
  signawardimageurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signAwardImageInfo.signAwardImageUrl)
}
 ::std::string* signAwardImageInfo::mutable_signawardimageurl() {
  
  // @@protoc_insertion_point(field_mutable:signAwardImageInfo.signAwardImageUrl)
  return signawardimageurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* signAwardImageInfo::release_signawardimageurl() {
  // @@protoc_insertion_point(field_release:signAwardImageInfo.signAwardImageUrl)
  
  return signawardimageurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void signAwardImageInfo::set_allocated_signawardimageurl(::std::string* signawardimageurl) {
  if (signawardimageurl != NULL) {
    
  } else {
    
  }
  signawardimageurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signawardimageurl);
  // @@protoc_insertion_point(field_set_allocated:signAwardImageInfo.signAwardImageUrl)
}

// optional uint32 signAwardImageBgColor = 6;
void signAwardImageInfo::clear_signawardimagebgcolor() {
  signawardimagebgcolor_ = 0u;
}
 ::google::protobuf::uint32 signAwardImageInfo::signawardimagebgcolor() const {
  // @@protoc_insertion_point(field_get:signAwardImageInfo.signAwardImageBgColor)
  return signawardimagebgcolor_;
}
 void signAwardImageInfo::set_signawardimagebgcolor(::google::protobuf::uint32 value) {
  
  signawardimagebgcolor_ = value;
  // @@protoc_insertion_point(field_set:signAwardImageInfo.signAwardImageBgColor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int seriesDaysAwardImageInfo::kDaysFieldNumber;
const int seriesDaysAwardImageInfo::kSignAwardImageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

seriesDaysAwardImageInfo::seriesDaysAwardImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seriesDaysAwardImageInfo)
}

void seriesDaysAwardImageInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  signawardimageinfo_ = const_cast< ::signAwardImageInfo*>(&::signAwardImageInfo::default_instance());
}

seriesDaysAwardImageInfo::seriesDaysAwardImageInfo(const seriesDaysAwardImageInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seriesDaysAwardImageInfo)
}

void seriesDaysAwardImageInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  days_ = 0u;
  signawardimageinfo_ = NULL;
}

seriesDaysAwardImageInfo::~seriesDaysAwardImageInfo() {
  // @@protoc_insertion_point(destructor:seriesDaysAwardImageInfo)
  SharedDtor();
}

void seriesDaysAwardImageInfo::SharedDtor() {
  if (this != default_instance_) {
    delete signawardimageinfo_;
  }
}

void seriesDaysAwardImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* seriesDaysAwardImageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return seriesDaysAwardImageInfo_descriptor_;
}

const seriesDaysAwardImageInfo& seriesDaysAwardImageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

seriesDaysAwardImageInfo* seriesDaysAwardImageInfo::default_instance_ = NULL;

seriesDaysAwardImageInfo* seriesDaysAwardImageInfo::New(::google::protobuf::Arena* arena) const {
  seriesDaysAwardImageInfo* n = new seriesDaysAwardImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void seriesDaysAwardImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:seriesDaysAwardImageInfo)
  days_ = 0u;
  if (GetArenaNoVirtual() == NULL && signawardimageinfo_ != NULL) delete signawardimageinfo_;
  signawardimageinfo_ = NULL;
}

bool seriesDaysAwardImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seriesDaysAwardImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 days = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_signAwardImageInfo;
        break;
      }

      // optional .signAwardImageInfo signAwardImageInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_signAwardImageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signawardimageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seriesDaysAwardImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seriesDaysAwardImageInfo)
  return false;
#undef DO_
}

void seriesDaysAwardImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seriesDaysAwardImageInfo)
  // optional uint32 days = 1;
  if (this->days() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->days(), output);
  }

  // optional .signAwardImageInfo signAwardImageInfo = 2;
  if (this->has_signawardimageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->signawardimageinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:seriesDaysAwardImageInfo)
}

::google::protobuf::uint8* seriesDaysAwardImageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seriesDaysAwardImageInfo)
  // optional uint32 days = 1;
  if (this->days() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->days(), target);
  }

  // optional .signAwardImageInfo signAwardImageInfo = 2;
  if (this->has_signawardimageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->signawardimageinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seriesDaysAwardImageInfo)
  return target;
}

int seriesDaysAwardImageInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seriesDaysAwardImageInfo)
  int total_size = 0;

  // optional uint32 days = 1;
  if (this->days() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->days());
  }

  // optional .signAwardImageInfo signAwardImageInfo = 2;
  if (this->has_signawardimageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signawardimageinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void seriesDaysAwardImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seriesDaysAwardImageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const seriesDaysAwardImageInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const seriesDaysAwardImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seriesDaysAwardImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seriesDaysAwardImageInfo)
    MergeFrom(*source);
  }
}

void seriesDaysAwardImageInfo::MergeFrom(const seriesDaysAwardImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seriesDaysAwardImageInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.days() != 0) {
    set_days(from.days());
  }
  if (from.has_signawardimageinfo()) {
    mutable_signawardimageinfo()->::signAwardImageInfo::MergeFrom(from.signawardimageinfo());
  }
}

void seriesDaysAwardImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seriesDaysAwardImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void seriesDaysAwardImageInfo::CopyFrom(const seriesDaysAwardImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seriesDaysAwardImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool seriesDaysAwardImageInfo::IsInitialized() const {

  return true;
}

void seriesDaysAwardImageInfo::Swap(seriesDaysAwardImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void seriesDaysAwardImageInfo::InternalSwap(seriesDaysAwardImageInfo* other) {
  std::swap(days_, other->days_);
  std::swap(signawardimageinfo_, other->signawardimageinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata seriesDaysAwardImageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = seriesDaysAwardImageInfo_descriptor_;
  metadata.reflection = seriesDaysAwardImageInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// seriesDaysAwardImageInfo

// optional uint32 days = 1;
void seriesDaysAwardImageInfo::clear_days() {
  days_ = 0u;
}
 ::google::protobuf::uint32 seriesDaysAwardImageInfo::days() const {
  // @@protoc_insertion_point(field_get:seriesDaysAwardImageInfo.days)
  return days_;
}
 void seriesDaysAwardImageInfo::set_days(::google::protobuf::uint32 value) {
  
  days_ = value;
  // @@protoc_insertion_point(field_set:seriesDaysAwardImageInfo.days)
}

// optional .signAwardImageInfo signAwardImageInfo = 2;
bool seriesDaysAwardImageInfo::has_signawardimageinfo() const {
  return !_is_default_instance_ && signawardimageinfo_ != NULL;
}
void seriesDaysAwardImageInfo::clear_signawardimageinfo() {
  if (GetArenaNoVirtual() == NULL && signawardimageinfo_ != NULL) delete signawardimageinfo_;
  signawardimageinfo_ = NULL;
}
const ::signAwardImageInfo& seriesDaysAwardImageInfo::signawardimageinfo() const {
  // @@protoc_insertion_point(field_get:seriesDaysAwardImageInfo.signAwardImageInfo)
  return signawardimageinfo_ != NULL ? *signawardimageinfo_ : *default_instance_->signawardimageinfo_;
}
::signAwardImageInfo* seriesDaysAwardImageInfo::mutable_signawardimageinfo() {
  
  if (signawardimageinfo_ == NULL) {
    signawardimageinfo_ = new ::signAwardImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:seriesDaysAwardImageInfo.signAwardImageInfo)
  return signawardimageinfo_;
}
::signAwardImageInfo* seriesDaysAwardImageInfo::release_signawardimageinfo() {
  // @@protoc_insertion_point(field_release:seriesDaysAwardImageInfo.signAwardImageInfo)
  
  ::signAwardImageInfo* temp = signawardimageinfo_;
  signawardimageinfo_ = NULL;
  return temp;
}
void seriesDaysAwardImageInfo::set_allocated_signawardimageinfo(::signAwardImageInfo* signawardimageinfo) {
  delete signawardimageinfo_;
  signawardimageinfo_ = signawardimageinfo;
  if (signawardimageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:seriesDaysAwardImageInfo.signAwardImageInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignAward::kWeekFieldNumber;
const int SignAward::kIsSignedFlagsFieldNumber;
const int SignAward::kIsawardFieldNumber;
const int SignAward::kCommonTotalAwardsFieldNumber;
const int SignAward::kExtAwardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignAward::SignAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignAward)
}

void SignAward::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SignAward::SignAward(const SignAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SignAward)
}

void SignAward::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  week_ = 0u;
  isaward_ = 0u;
}

SignAward::~SignAward() {
  // @@protoc_insertion_point(destructor:SignAward)
  SharedDtor();
}

void SignAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignAward_descriptor_;
}

const SignAward& SignAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

SignAward* SignAward::default_instance_ = NULL;

SignAward* SignAward::New(::google::protobuf::Arena* arena) const {
  SignAward* n = new SignAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignAward::Clear() {
// @@protoc_insertion_point(message_clear_start:SignAward)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SignAward, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SignAward*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(week_, isaward_);

#undef ZR_HELPER_
#undef ZR_

  issignedflags_.Clear();
  commontotalawards_.Clear();
  extawards_.Clear();
}

bool SignAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 week = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_isSignedFlags;
        break;
      }

      // repeated uint32 isSignedFlags = 2;
      case 2: {
        if (tag == 18) {
         parse_isSignedFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_issignedflags())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_issignedflags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isaward;
        break;
      }

      // optional uint32 isaward = 3;
      case 3: {
        if (tag == 24) {
         parse_isaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isaward_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_commonTotalAwards;
        break;
      }

      // repeated .signAwardImageInfo commonTotalAwards = 4;
      case 4: {
        if (tag == 34) {
         parse_commonTotalAwards:
          DO_(input->IncrementRecursionDepth());
         parse_loop_commonTotalAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_commontotalawards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_commonTotalAwards;
        if (input->ExpectTag(42)) goto parse_loop_extAwards;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .seriesDaysAwardImageInfo extAwards = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_extAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_extawards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_extAwards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignAward)
  return false;
#undef DO_
}

void SignAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignAward)
  // optional uint32 week = 1;
  if (this->week() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->week(), output);
  }

  // repeated uint32 isSignedFlags = 2;
  if (this->issignedflags_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_issignedflags_cached_byte_size_);
  }
  for (int i = 0; i < this->issignedflags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->issignedflags(i), output);
  }

  // optional uint32 isaward = 3;
  if (this->isaward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isaward(), output);
  }

  // repeated .signAwardImageInfo commonTotalAwards = 4;
  for (unsigned int i = 0, n = this->commontotalawards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->commontotalawards(i), output);
  }

  // repeated .seriesDaysAwardImageInfo extAwards = 5;
  for (unsigned int i = 0, n = this->extawards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->extawards(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SignAward)
}

::google::protobuf::uint8* SignAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SignAward)
  // optional uint32 week = 1;
  if (this->week() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->week(), target);
  }

  // repeated uint32 isSignedFlags = 2;
  if (this->issignedflags_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _issignedflags_cached_byte_size_, target);
  }
  for (int i = 0; i < this->issignedflags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->issignedflags(i), target);
  }

  // optional uint32 isaward = 3;
  if (this->isaward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isaward(), target);
  }

  // repeated .signAwardImageInfo commonTotalAwards = 4;
  for (unsigned int i = 0, n = this->commontotalawards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->commontotalawards(i), target);
  }

  // repeated .seriesDaysAwardImageInfo extAwards = 5;
  for (unsigned int i = 0, n = this->extawards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->extawards(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SignAward)
  return target;
}

int SignAward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SignAward)
  int total_size = 0;

  // optional uint32 week = 1;
  if (this->week() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->week());
  }

  // optional uint32 isaward = 3;
  if (this->isaward() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->isaward());
  }

  // repeated uint32 isSignedFlags = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->issignedflags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->issignedflags(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _issignedflags_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .signAwardImageInfo commonTotalAwards = 4;
  total_size += 1 * this->commontotalawards_size();
  for (int i = 0; i < this->commontotalawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commontotalawards(i));
  }

  // repeated .seriesDaysAwardImageInfo extAwards = 5;
  total_size += 1 * this->extawards_size();
  for (int i = 0; i < this->extawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extawards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignAward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignAward)
    MergeFrom(*source);
  }
}

void SignAward::MergeFrom(const SignAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  issignedflags_.MergeFrom(from.issignedflags_);
  commontotalawards_.MergeFrom(from.commontotalawards_);
  extawards_.MergeFrom(from.extawards_);
  if (from.week() != 0) {
    set_week(from.week());
  }
  if (from.isaward() != 0) {
    set_isaward(from.isaward());
  }
}

void SignAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignAward::CopyFrom(const SignAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignAward::IsInitialized() const {

  return true;
}

void SignAward::Swap(SignAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignAward::InternalSwap(SignAward* other) {
  std::swap(week_, other->week_);
  issignedflags_.UnsafeArenaSwap(&other->issignedflags_);
  std::swap(isaward_, other->isaward_);
  commontotalawards_.UnsafeArenaSwap(&other->commontotalawards_);
  extawards_.UnsafeArenaSwap(&other->extawards_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignAward_descriptor_;
  metadata.reflection = SignAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignAward

// optional uint32 week = 1;
void SignAward::clear_week() {
  week_ = 0u;
}
 ::google::protobuf::uint32 SignAward::week() const {
  // @@protoc_insertion_point(field_get:SignAward.week)
  return week_;
}
 void SignAward::set_week(::google::protobuf::uint32 value) {
  
  week_ = value;
  // @@protoc_insertion_point(field_set:SignAward.week)
}

// repeated uint32 isSignedFlags = 2;
int SignAward::issignedflags_size() const {
  return issignedflags_.size();
}
void SignAward::clear_issignedflags() {
  issignedflags_.Clear();
}
 ::google::protobuf::uint32 SignAward::issignedflags(int index) const {
  // @@protoc_insertion_point(field_get:SignAward.isSignedFlags)
  return issignedflags_.Get(index);
}
 void SignAward::set_issignedflags(int index, ::google::protobuf::uint32 value) {
  issignedflags_.Set(index, value);
  // @@protoc_insertion_point(field_set:SignAward.isSignedFlags)
}
 void SignAward::add_issignedflags(::google::protobuf::uint32 value) {
  issignedflags_.Add(value);
  // @@protoc_insertion_point(field_add:SignAward.isSignedFlags)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SignAward::issignedflags() const {
  // @@protoc_insertion_point(field_list:SignAward.isSignedFlags)
  return issignedflags_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SignAward::mutable_issignedflags() {
  // @@protoc_insertion_point(field_mutable_list:SignAward.isSignedFlags)
  return &issignedflags_;
}

// optional uint32 isaward = 3;
void SignAward::clear_isaward() {
  isaward_ = 0u;
}
 ::google::protobuf::uint32 SignAward::isaward() const {
  // @@protoc_insertion_point(field_get:SignAward.isaward)
  return isaward_;
}
 void SignAward::set_isaward(::google::protobuf::uint32 value) {
  
  isaward_ = value;
  // @@protoc_insertion_point(field_set:SignAward.isaward)
}

// repeated .signAwardImageInfo commonTotalAwards = 4;
int SignAward::commontotalawards_size() const {
  return commontotalawards_.size();
}
void SignAward::clear_commontotalawards() {
  commontotalawards_.Clear();
}
const ::signAwardImageInfo& SignAward::commontotalawards(int index) const {
  // @@protoc_insertion_point(field_get:SignAward.commonTotalAwards)
  return commontotalawards_.Get(index);
}
::signAwardImageInfo* SignAward::mutable_commontotalawards(int index) {
  // @@protoc_insertion_point(field_mutable:SignAward.commonTotalAwards)
  return commontotalawards_.Mutable(index);
}
::signAwardImageInfo* SignAward::add_commontotalawards() {
  // @@protoc_insertion_point(field_add:SignAward.commonTotalAwards)
  return commontotalawards_.Add();
}
::google::protobuf::RepeatedPtrField< ::signAwardImageInfo >*
SignAward::mutable_commontotalawards() {
  // @@protoc_insertion_point(field_mutable_list:SignAward.commonTotalAwards)
  return &commontotalawards_;
}
const ::google::protobuf::RepeatedPtrField< ::signAwardImageInfo >&
SignAward::commontotalawards() const {
  // @@protoc_insertion_point(field_list:SignAward.commonTotalAwards)
  return commontotalawards_;
}

// repeated .seriesDaysAwardImageInfo extAwards = 5;
int SignAward::extawards_size() const {
  return extawards_.size();
}
void SignAward::clear_extawards() {
  extawards_.Clear();
}
const ::seriesDaysAwardImageInfo& SignAward::extawards(int index) const {
  // @@protoc_insertion_point(field_get:SignAward.extAwards)
  return extawards_.Get(index);
}
::seriesDaysAwardImageInfo* SignAward::mutable_extawards(int index) {
  // @@protoc_insertion_point(field_mutable:SignAward.extAwards)
  return extawards_.Mutable(index);
}
::seriesDaysAwardImageInfo* SignAward::add_extawards() {
  // @@protoc_insertion_point(field_add:SignAward.extAwards)
  return extawards_.Add();
}
::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo >*
SignAward::mutable_extawards() {
  // @@protoc_insertion_point(field_mutable_list:SignAward.extAwards)
  return &extawards_;
}
const ::google::protobuf::RepeatedPtrField< ::seriesDaysAwardImageInfo >&
SignAward::extawards() const {
  // @@protoc_insertion_point(field_list:SignAward.extAwards)
  return extawards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAwardItem::kPropIdFieldNumber;
const int RegisterAwardItem::kPropCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAwardItem::RegisterAwardItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterAwardItem)
}

void RegisterAwardItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterAwardItem::RegisterAwardItem(const RegisterAwardItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterAwardItem)
}

void RegisterAwardItem::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  prop_id_ = 0u;
  prop_count_ = 0u;
}

RegisterAwardItem::~RegisterAwardItem() {
  // @@protoc_insertion_point(destructor:RegisterAwardItem)
  SharedDtor();
}

void RegisterAwardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterAwardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAwardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAwardItem_descriptor_;
}

const RegisterAwardItem& RegisterAwardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

RegisterAwardItem* RegisterAwardItem::default_instance_ = NULL;

RegisterAwardItem* RegisterAwardItem::New(::google::protobuf::Arena* arena) const {
  RegisterAwardItem* n = new RegisterAwardItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterAwardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterAwardItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterAwardItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterAwardItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(prop_id_, prop_count_);

#undef ZR_HELPER_
#undef ZR_

}

bool RegisterAwardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterAwardItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prop_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prop_count;
        break;
      }

      // optional uint32 prop_count = 2;
      case 2: {
        if (tag == 16) {
         parse_prop_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prop_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterAwardItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterAwardItem)
  return false;
#undef DO_
}

void RegisterAwardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterAwardItem)
  // optional uint32 prop_id = 1;
  if (this->prop_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prop_id(), output);
  }

  // optional uint32 prop_count = 2;
  if (this->prop_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prop_count(), output);
  }

  // @@protoc_insertion_point(serialize_end:RegisterAwardItem)
}

::google::protobuf::uint8* RegisterAwardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterAwardItem)
  // optional uint32 prop_id = 1;
  if (this->prop_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prop_id(), target);
  }

  // optional uint32 prop_count = 2;
  if (this->prop_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prop_count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RegisterAwardItem)
  return target;
}

int RegisterAwardItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterAwardItem)
  int total_size = 0;

  // optional uint32 prop_id = 1;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prop_id());
  }

  // optional uint32 prop_count = 2;
  if (this->prop_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prop_count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAwardItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterAwardItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterAwardItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAwardItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterAwardItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterAwardItem)
    MergeFrom(*source);
  }
}

void RegisterAwardItem::MergeFrom(const RegisterAwardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterAwardItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.prop_id() != 0) {
    set_prop_id(from.prop_id());
  }
  if (from.prop_count() != 0) {
    set_prop_count(from.prop_count());
  }
}

void RegisterAwardItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAwardItem::CopyFrom(const RegisterAwardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAwardItem::IsInitialized() const {

  return true;
}

void RegisterAwardItem::Swap(RegisterAwardItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterAwardItem::InternalSwap(RegisterAwardItem* other) {
  std::swap(prop_id_, other->prop_id_);
  std::swap(prop_count_, other->prop_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterAwardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAwardItem_descriptor_;
  metadata.reflection = RegisterAwardItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterAwardItem

// optional uint32 prop_id = 1;
void RegisterAwardItem::clear_prop_id() {
  prop_id_ = 0u;
}
 ::google::protobuf::uint32 RegisterAwardItem::prop_id() const {
  // @@protoc_insertion_point(field_get:RegisterAwardItem.prop_id)
  return prop_id_;
}
 void RegisterAwardItem::set_prop_id(::google::protobuf::uint32 value) {
  
  prop_id_ = value;
  // @@protoc_insertion_point(field_set:RegisterAwardItem.prop_id)
}

// optional uint32 prop_count = 2;
void RegisterAwardItem::clear_prop_count() {
  prop_count_ = 0u;
}
 ::google::protobuf::uint32 RegisterAwardItem::prop_count() const {
  // @@protoc_insertion_point(field_get:RegisterAwardItem.prop_count)
  return prop_count_;
}
 void RegisterAwardItem::set_prop_count(::google::protobuf::uint32 value) {
  
  prop_count_ = value;
  // @@protoc_insertion_point(field_set:RegisterAwardItem.prop_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterOneDay::kIsAwardGettedFieldNumber;
const int RegisterOneDay::kOneDayAwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterOneDay::RegisterOneDay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterOneDay)
}

void RegisterOneDay::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterOneDay::RegisterOneDay(const RegisterOneDay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterOneDay)
}

void RegisterOneDay::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_award_getted_ = false;
}

RegisterOneDay::~RegisterOneDay() {
  // @@protoc_insertion_point(destructor:RegisterOneDay)
  SharedDtor();
}

void RegisterOneDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterOneDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterOneDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterOneDay_descriptor_;
}

const RegisterOneDay& RegisterOneDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

RegisterOneDay* RegisterOneDay::default_instance_ = NULL;

RegisterOneDay* RegisterOneDay::New(::google::protobuf::Arena* arena) const {
  RegisterOneDay* n = new RegisterOneDay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterOneDay::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterOneDay)
  is_award_getted_ = false;
  one_day_award_.Clear();
}

bool RegisterOneDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterOneDay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_award_getted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_award_getted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_one_day_award;
        break;
      }

      // repeated .RegisterAwardItem one_day_award = 2;
      case 2: {
        if (tag == 18) {
         parse_one_day_award:
          DO_(input->IncrementRecursionDepth());
         parse_loop_one_day_award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_one_day_award()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_one_day_award;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterOneDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterOneDay)
  return false;
#undef DO_
}

void RegisterOneDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterOneDay)
  // optional bool is_award_getted = 1;
  if (this->is_award_getted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_award_getted(), output);
  }

  // repeated .RegisterAwardItem one_day_award = 2;
  for (unsigned int i = 0, n = this->one_day_award_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->one_day_award(i), output);
  }

  // @@protoc_insertion_point(serialize_end:RegisterOneDay)
}

::google::protobuf::uint8* RegisterOneDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterOneDay)
  // optional bool is_award_getted = 1;
  if (this->is_award_getted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_award_getted(), target);
  }

  // repeated .RegisterAwardItem one_day_award = 2;
  for (unsigned int i = 0, n = this->one_day_award_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->one_day_award(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RegisterOneDay)
  return target;
}

int RegisterOneDay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterOneDay)
  int total_size = 0;

  // optional bool is_award_getted = 1;
  if (this->is_award_getted() != 0) {
    total_size += 1 + 1;
  }

  // repeated .RegisterAwardItem one_day_award = 2;
  total_size += 1 * this->one_day_award_size();
  for (int i = 0; i < this->one_day_award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->one_day_award(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterOneDay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterOneDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterOneDay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterOneDay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterOneDay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterOneDay)
    MergeFrom(*source);
  }
}

void RegisterOneDay::MergeFrom(const RegisterOneDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterOneDay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  one_day_award_.MergeFrom(from.one_day_award_);
  if (from.is_award_getted() != 0) {
    set_is_award_getted(from.is_award_getted());
  }
}

void RegisterOneDay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterOneDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterOneDay::CopyFrom(const RegisterOneDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterOneDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterOneDay::IsInitialized() const {

  return true;
}

void RegisterOneDay::Swap(RegisterOneDay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterOneDay::InternalSwap(RegisterOneDay* other) {
  std::swap(is_award_getted_, other->is_award_getted_);
  one_day_award_.UnsafeArenaSwap(&other->one_day_award_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterOneDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterOneDay_descriptor_;
  metadata.reflection = RegisterOneDay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterOneDay

// optional bool is_award_getted = 1;
void RegisterOneDay::clear_is_award_getted() {
  is_award_getted_ = false;
}
 bool RegisterOneDay::is_award_getted() const {
  // @@protoc_insertion_point(field_get:RegisterOneDay.is_award_getted)
  return is_award_getted_;
}
 void RegisterOneDay::set_is_award_getted(bool value) {
  
  is_award_getted_ = value;
  // @@protoc_insertion_point(field_set:RegisterOneDay.is_award_getted)
}

// repeated .RegisterAwardItem one_day_award = 2;
int RegisterOneDay::one_day_award_size() const {
  return one_day_award_.size();
}
void RegisterOneDay::clear_one_day_award() {
  one_day_award_.Clear();
}
const ::RegisterAwardItem& RegisterOneDay::one_day_award(int index) const {
  // @@protoc_insertion_point(field_get:RegisterOneDay.one_day_award)
  return one_day_award_.Get(index);
}
::RegisterAwardItem* RegisterOneDay::mutable_one_day_award(int index) {
  // @@protoc_insertion_point(field_mutable:RegisterOneDay.one_day_award)
  return one_day_award_.Mutable(index);
}
::RegisterAwardItem* RegisterOneDay::add_one_day_award() {
  // @@protoc_insertion_point(field_add:RegisterOneDay.one_day_award)
  return one_day_award_.Add();
}
::google::protobuf::RepeatedPtrField< ::RegisterAwardItem >*
RegisterOneDay::mutable_one_day_award() {
  // @@protoc_insertion_point(field_mutable_list:RegisterOneDay.one_day_award)
  return &one_day_award_;
}
const ::google::protobuf::RepeatedPtrField< ::RegisterAwardItem >&
RegisterOneDay::one_day_award() const {
  // @@protoc_insertion_point(field_list:RegisterOneDay.one_day_award)
  return one_day_award_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterAward::kIsAwardFieldNumber;
const int RegisterAward::kTodayIndexFieldNumber;
const int RegisterAward::kTotalDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterAward::RegisterAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterAward)
}

void RegisterAward::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterAward::RegisterAward(const RegisterAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegisterAward)
}

void RegisterAward::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_award_ = 0u;
  todayindex_ = 0u;
}

RegisterAward::~RegisterAward() {
  // @@protoc_insertion_point(destructor:RegisterAward)
  SharedDtor();
}

void RegisterAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterAward_descriptor_;
}

const RegisterAward& RegisterAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

RegisterAward* RegisterAward::default_instance_ = NULL;

RegisterAward* RegisterAward::New(::google::protobuf::Arena* arena) const {
  RegisterAward* n = new RegisterAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterAward::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterAward)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterAward, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterAward*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_award_, todayindex_);

#undef ZR_HELPER_
#undef ZR_

  total_days_.Clear();
}

bool RegisterAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_award = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_award_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_todayIndex;
        break;
      }

      // optional uint32 todayIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_todayIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_total_days;
        break;
      }

      // repeated .RegisterOneDay total_days = 3;
      case 3: {
        if (tag == 26) {
         parse_total_days:
          DO_(input->IncrementRecursionDepth());
         parse_loop_total_days:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_total_days()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_total_days;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterAward)
  return false;
#undef DO_
}

void RegisterAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterAward)
  // optional uint32 is_award = 1;
  if (this->is_award() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_award(), output);
  }

  // optional uint32 todayIndex = 2;
  if (this->todayindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todayindex(), output);
  }

  // repeated .RegisterOneDay total_days = 3;
  for (unsigned int i = 0, n = this->total_days_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->total_days(i), output);
  }

  // @@protoc_insertion_point(serialize_end:RegisterAward)
}

::google::protobuf::uint8* RegisterAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterAward)
  // optional uint32 is_award = 1;
  if (this->is_award() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_award(), target);
  }

  // optional uint32 todayIndex = 2;
  if (this->todayindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->todayindex(), target);
  }

  // repeated .RegisterOneDay total_days = 3;
  for (unsigned int i = 0, n = this->total_days_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->total_days(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RegisterAward)
  return target;
}

int RegisterAward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterAward)
  int total_size = 0;

  // optional uint32 is_award = 1;
  if (this->is_award() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->is_award());
  }

  // optional uint32 todayIndex = 2;
  if (this->todayindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->todayindex());
  }

  // repeated .RegisterOneDay total_days = 3;
  total_size += 1 * this->total_days_size();
  for (int i = 0; i < this->total_days_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->total_days(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterAward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterAward)
    MergeFrom(*source);
  }
}

void RegisterAward::MergeFrom(const RegisterAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  total_days_.MergeFrom(from.total_days_);
  if (from.is_award() != 0) {
    set_is_award(from.is_award());
  }
  if (from.todayindex() != 0) {
    set_todayindex(from.todayindex());
  }
}

void RegisterAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterAward::CopyFrom(const RegisterAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterAward::IsInitialized() const {

  return true;
}

void RegisterAward::Swap(RegisterAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterAward::InternalSwap(RegisterAward* other) {
  std::swap(is_award_, other->is_award_);
  std::swap(todayindex_, other->todayindex_);
  total_days_.UnsafeArenaSwap(&other->total_days_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterAward_descriptor_;
  metadata.reflection = RegisterAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterAward

// optional uint32 is_award = 1;
void RegisterAward::clear_is_award() {
  is_award_ = 0u;
}
 ::google::protobuf::uint32 RegisterAward::is_award() const {
  // @@protoc_insertion_point(field_get:RegisterAward.is_award)
  return is_award_;
}
 void RegisterAward::set_is_award(::google::protobuf::uint32 value) {
  
  is_award_ = value;
  // @@protoc_insertion_point(field_set:RegisterAward.is_award)
}

// optional uint32 todayIndex = 2;
void RegisterAward::clear_todayindex() {
  todayindex_ = 0u;
}
 ::google::protobuf::uint32 RegisterAward::todayindex() const {
  // @@protoc_insertion_point(field_get:RegisterAward.todayIndex)
  return todayindex_;
}
 void RegisterAward::set_todayindex(::google::protobuf::uint32 value) {
  
  todayindex_ = value;
  // @@protoc_insertion_point(field_set:RegisterAward.todayIndex)
}

// repeated .RegisterOneDay total_days = 3;
int RegisterAward::total_days_size() const {
  return total_days_.size();
}
void RegisterAward::clear_total_days() {
  total_days_.Clear();
}
const ::RegisterOneDay& RegisterAward::total_days(int index) const {
  // @@protoc_insertion_point(field_get:RegisterAward.total_days)
  return total_days_.Get(index);
}
::RegisterOneDay* RegisterAward::mutable_total_days(int index) {
  // @@protoc_insertion_point(field_mutable:RegisterAward.total_days)
  return total_days_.Mutable(index);
}
::RegisterOneDay* RegisterAward::add_total_days() {
  // @@protoc_insertion_point(field_add:RegisterAward.total_days)
  return total_days_.Add();
}
::google::protobuf::RepeatedPtrField< ::RegisterOneDay >*
RegisterAward::mutable_total_days() {
  // @@protoc_insertion_point(field_mutable_list:RegisterAward.total_days)
  return &total_days_;
}
const ::google::protobuf::RepeatedPtrField< ::RegisterOneDay >&
RegisterAward::total_days() const {
  // @@protoc_insertion_point(field_list:RegisterAward.total_days)
  return total_days_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountBoxAward_AwardCfg::kTimeFieldNumber;
const int CountBoxAward_AwardCfg::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountBoxAward_AwardCfg::CountBoxAward_AwardCfg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CountBoxAward.AwardCfg)
}

void CountBoxAward_AwardCfg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CountBoxAward_AwardCfg::CountBoxAward_AwardCfg(const CountBoxAward_AwardCfg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CountBoxAward.AwardCfg)
}

void CountBoxAward_AwardCfg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = 0u;
  amount_ = GOOGLE_ULONGLONG(0);
}

CountBoxAward_AwardCfg::~CountBoxAward_AwardCfg() {
  // @@protoc_insertion_point(destructor:CountBoxAward.AwardCfg)
  SharedDtor();
}

void CountBoxAward_AwardCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountBoxAward_AwardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountBoxAward_AwardCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountBoxAward_AwardCfg_descriptor_;
}

const CountBoxAward_AwardCfg& CountBoxAward_AwardCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

CountBoxAward_AwardCfg* CountBoxAward_AwardCfg::default_instance_ = NULL;

CountBoxAward_AwardCfg* CountBoxAward_AwardCfg::New(::google::protobuf::Arena* arena) const {
  CountBoxAward_AwardCfg* n = new CountBoxAward_AwardCfg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CountBoxAward_AwardCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:CountBoxAward.AwardCfg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CountBoxAward_AwardCfg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CountBoxAward_AwardCfg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, time_);

#undef ZR_HELPER_
#undef ZR_

}

bool CountBoxAward_AwardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CountBoxAward.AwardCfg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CountBoxAward.AwardCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CountBoxAward.AwardCfg)
  return false;
#undef DO_
}

void CountBoxAward_AwardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CountBoxAward.AwardCfg)
  // optional uint32 time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // @@protoc_insertion_point(serialize_end:CountBoxAward.AwardCfg)
}

::google::protobuf::uint8* CountBoxAward_AwardCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CountBoxAward.AwardCfg)
  // optional uint32 time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CountBoxAward.AwardCfg)
  return target;
}

int CountBoxAward_AwardCfg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CountBoxAward.AwardCfg)
  int total_size = 0;

  // optional uint32 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time());
  }

  // optional uint64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountBoxAward_AwardCfg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CountBoxAward.AwardCfg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CountBoxAward_AwardCfg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CountBoxAward_AwardCfg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CountBoxAward.AwardCfg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CountBoxAward.AwardCfg)
    MergeFrom(*source);
  }
}

void CountBoxAward_AwardCfg::MergeFrom(const CountBoxAward_AwardCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CountBoxAward.AwardCfg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
}

void CountBoxAward_AwardCfg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CountBoxAward.AwardCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountBoxAward_AwardCfg::CopyFrom(const CountBoxAward_AwardCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CountBoxAward.AwardCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountBoxAward_AwardCfg::IsInitialized() const {

  return true;
}

void CountBoxAward_AwardCfg::Swap(CountBoxAward_AwardCfg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountBoxAward_AwardCfg::InternalSwap(CountBoxAward_AwardCfg* other) {
  std::swap(time_, other->time_);
  std::swap(amount_, other->amount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CountBoxAward_AwardCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountBoxAward_AwardCfg_descriptor_;
  metadata.reflection = CountBoxAward_AwardCfg_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CountBoxAward::kDurationFieldNumber;
const int CountBoxAward::kStepFieldNumber;
const int CountBoxAward::kAwardConfigsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CountBoxAward::CountBoxAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CountBoxAward)
}

void CountBoxAward::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CountBoxAward::CountBoxAward(const CountBoxAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CountBoxAward)
}

void CountBoxAward::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  duration_ = 0u;
  step_ = 0u;
}

CountBoxAward::~CountBoxAward() {
  // @@protoc_insertion_point(destructor:CountBoxAward)
  SharedDtor();
}

void CountBoxAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountBoxAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountBoxAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountBoxAward_descriptor_;
}

const CountBoxAward& CountBoxAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

CountBoxAward* CountBoxAward::default_instance_ = NULL;

CountBoxAward* CountBoxAward::New(::google::protobuf::Arena* arena) const {
  CountBoxAward* n = new CountBoxAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CountBoxAward::Clear() {
// @@protoc_insertion_point(message_clear_start:CountBoxAward)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CountBoxAward, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CountBoxAward*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(duration_, step_);

#undef ZR_HELPER_
#undef ZR_

  awardconfigs_.Clear();
}

bool CountBoxAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CountBoxAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional uint32 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AwardConfigs;
        break;
      }

      // repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
      case 3: {
        if (tag == 26) {
         parse_AwardConfigs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_AwardConfigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_awardconfigs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_AwardConfigs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CountBoxAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CountBoxAward)
  return false;
#undef DO_
}

void CountBoxAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CountBoxAward)
  // optional uint32 duration = 1;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }

  // optional uint32 step = 2;
  if (this->step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step(), output);
  }

  // repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
  for (unsigned int i = 0, n = this->awardconfigs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->awardconfigs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CountBoxAward)
}

::google::protobuf::uint8* CountBoxAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CountBoxAward)
  // optional uint32 duration = 1;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  // optional uint32 step = 2;
  if (this->step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step(), target);
  }

  // repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
  for (unsigned int i = 0, n = this->awardconfigs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->awardconfigs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CountBoxAward)
  return target;
}

int CountBoxAward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CountBoxAward)
  int total_size = 0;

  // optional uint32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // optional uint32 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->step());
  }

  // repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
  total_size += 1 * this->awardconfigs_size();
  for (int i = 0; i < this->awardconfigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardconfigs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountBoxAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CountBoxAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CountBoxAward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CountBoxAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CountBoxAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CountBoxAward)
    MergeFrom(*source);
  }
}

void CountBoxAward::MergeFrom(const CountBoxAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CountBoxAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  awardconfigs_.MergeFrom(from.awardconfigs_);
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.step() != 0) {
    set_step(from.step());
  }
}

void CountBoxAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CountBoxAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountBoxAward::CopyFrom(const CountBoxAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CountBoxAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountBoxAward::IsInitialized() const {

  return true;
}

void CountBoxAward::Swap(CountBoxAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CountBoxAward::InternalSwap(CountBoxAward* other) {
  std::swap(duration_, other->duration_);
  std::swap(step_, other->step_);
  awardconfigs_.UnsafeArenaSwap(&other->awardconfigs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CountBoxAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountBoxAward_descriptor_;
  metadata.reflection = CountBoxAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CountBoxAward_AwardCfg

// optional uint32 time = 1;
void CountBoxAward_AwardCfg::clear_time() {
  time_ = 0u;
}
 ::google::protobuf::uint32 CountBoxAward_AwardCfg::time() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.AwardCfg.time)
  return time_;
}
 void CountBoxAward_AwardCfg::set_time(::google::protobuf::uint32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.AwardCfg.time)
}

// optional uint64 amount = 2;
void CountBoxAward_AwardCfg::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CountBoxAward_AwardCfg::amount() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.AwardCfg.amount)
  return amount_;
}
 void CountBoxAward_AwardCfg::set_amount(::google::protobuf::uint64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.AwardCfg.amount)
}

// -------------------------------------------------------------------

// CountBoxAward

// optional uint32 duration = 1;
void CountBoxAward::clear_duration() {
  duration_ = 0u;
}
 ::google::protobuf::uint32 CountBoxAward::duration() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.duration)
  return duration_;
}
 void CountBoxAward::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.duration)
}

// optional uint32 step = 2;
void CountBoxAward::clear_step() {
  step_ = 0u;
}
 ::google::protobuf::uint32 CountBoxAward::step() const {
  // @@protoc_insertion_point(field_get:CountBoxAward.step)
  return step_;
}
 void CountBoxAward::set_step(::google::protobuf::uint32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:CountBoxAward.step)
}

// repeated .CountBoxAward.AwardCfg AwardConfigs = 3;
int CountBoxAward::awardconfigs_size() const {
  return awardconfigs_.size();
}
void CountBoxAward::clear_awardconfigs() {
  awardconfigs_.Clear();
}
const ::CountBoxAward_AwardCfg& CountBoxAward::awardconfigs(int index) const {
  // @@protoc_insertion_point(field_get:CountBoxAward.AwardConfigs)
  return awardconfigs_.Get(index);
}
::CountBoxAward_AwardCfg* CountBoxAward::mutable_awardconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:CountBoxAward.AwardConfigs)
  return awardconfigs_.Mutable(index);
}
::CountBoxAward_AwardCfg* CountBoxAward::add_awardconfigs() {
  // @@protoc_insertion_point(field_add:CountBoxAward.AwardConfigs)
  return awardconfigs_.Add();
}
::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg >*
CountBoxAward::mutable_awardconfigs() {
  // @@protoc_insertion_point(field_mutable_list:CountBoxAward.AwardConfigs)
  return &awardconfigs_;
}
const ::google::protobuf::RepeatedPtrField< ::CountBoxAward_AwardCfg >&
CountBoxAward::awardconfigs() const {
  // @@protoc_insertion_point(field_list:CountBoxAward.AwardConfigs)
  return awardconfigs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FreechipStatus::kDailySignFieldNumber;
const int FreechipStatus::kLoginAwardFieldNumber;
const int FreechipStatus::kDailyTaskFieldNumber;
const int FreechipStatus::kActivityCenterFieldNumber;
const int FreechipStatus::kCountingBoxFieldNumber;
const int FreechipStatus::kRegisterAwardFieldNumber;
const int FreechipStatus::kActivityGamecountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FreechipStatus::FreechipStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FreechipStatus)
}

void FreechipStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FreechipStatus::FreechipStatus(const FreechipStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FreechipStatus)
}

void FreechipStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  daily_sign_ = 0u;
  login_award_ = 0u;
  daily_task_ = 0u;
  activity_center_ = 0u;
  counting_box_ = 0u;
  register_award_ = 0u;
  activity_gamecount_ = 0u;
}

FreechipStatus::~FreechipStatus() {
  // @@protoc_insertion_point(destructor:FreechipStatus)
  SharedDtor();
}

void FreechipStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreechipStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreechipStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreechipStatus_descriptor_;
}

const FreechipStatus& FreechipStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

FreechipStatus* FreechipStatus::default_instance_ = NULL;

FreechipStatus* FreechipStatus::New(::google::protobuf::Arena* arena) const {
  FreechipStatus* n = new FreechipStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FreechipStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:FreechipStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FreechipStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FreechipStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(daily_sign_, activity_gamecount_);

#undef ZR_HELPER_
#undef ZR_

}

bool FreechipStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FreechipStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 daily_sign = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_sign_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_login_award;
        break;
      }

      // optional uint32 login_award = 2;
      case 2: {
        if (tag == 16) {
         parse_login_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_award_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_daily_task;
        break;
      }

      // optional uint32 daily_task = 3;
      case 3: {
        if (tag == 24) {
         parse_daily_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_task_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_activity_center;
        break;
      }

      // optional uint32 activity_center = 4;
      case 4: {
        if (tag == 32) {
         parse_activity_center:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_center_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_counting_box;
        break;
      }

      // optional uint32 counting_box = 5;
      case 5: {
        if (tag == 40) {
         parse_counting_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counting_box_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_register_award;
        break;
      }

      // optional uint32 register_award = 6;
      case 6: {
        if (tag == 48) {
         parse_register_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &register_award_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_activity_gamecount;
        break;
      }

      // optional uint32 activity_gamecount = 7;
      case 7: {
        if (tag == 56) {
         parse_activity_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_gamecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FreechipStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FreechipStatus)
  return false;
#undef DO_
}

void FreechipStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FreechipStatus)
  // optional uint32 daily_sign = 1;
  if (this->daily_sign() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->daily_sign(), output);
  }

  // optional uint32 login_award = 2;
  if (this->login_award() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_award(), output);
  }

  // optional uint32 daily_task = 3;
  if (this->daily_task() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daily_task(), output);
  }

  // optional uint32 activity_center = 4;
  if (this->activity_center() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->activity_center(), output);
  }

  // optional uint32 counting_box = 5;
  if (this->counting_box() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->counting_box(), output);
  }

  // optional uint32 register_award = 6;
  if (this->register_award() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->register_award(), output);
  }

  // optional uint32 activity_gamecount = 7;
  if (this->activity_gamecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->activity_gamecount(), output);
  }

  // @@protoc_insertion_point(serialize_end:FreechipStatus)
}

::google::protobuf::uint8* FreechipStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FreechipStatus)
  // optional uint32 daily_sign = 1;
  if (this->daily_sign() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->daily_sign(), target);
  }

  // optional uint32 login_award = 2;
  if (this->login_award() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_award(), target);
  }

  // optional uint32 daily_task = 3;
  if (this->daily_task() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daily_task(), target);
  }

  // optional uint32 activity_center = 4;
  if (this->activity_center() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->activity_center(), target);
  }

  // optional uint32 counting_box = 5;
  if (this->counting_box() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->counting_box(), target);
  }

  // optional uint32 register_award = 6;
  if (this->register_award() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->register_award(), target);
  }

  // optional uint32 activity_gamecount = 7;
  if (this->activity_gamecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->activity_gamecount(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FreechipStatus)
  return target;
}

int FreechipStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:FreechipStatus)
  int total_size = 0;

  // optional uint32 daily_sign = 1;
  if (this->daily_sign() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->daily_sign());
  }

  // optional uint32 login_award = 2;
  if (this->login_award() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->login_award());
  }

  // optional uint32 daily_task = 3;
  if (this->daily_task() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->daily_task());
  }

  // optional uint32 activity_center = 4;
  if (this->activity_center() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_center());
  }

  // optional uint32 counting_box = 5;
  if (this->counting_box() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->counting_box());
  }

  // optional uint32 register_award = 6;
  if (this->register_award() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->register_award());
  }

  // optional uint32 activity_gamecount = 7;
  if (this->activity_gamecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->activity_gamecount());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreechipStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FreechipStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FreechipStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FreechipStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FreechipStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FreechipStatus)
    MergeFrom(*source);
  }
}

void FreechipStatus::MergeFrom(const FreechipStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FreechipStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.daily_sign() != 0) {
    set_daily_sign(from.daily_sign());
  }
  if (from.login_award() != 0) {
    set_login_award(from.login_award());
  }
  if (from.daily_task() != 0) {
    set_daily_task(from.daily_task());
  }
  if (from.activity_center() != 0) {
    set_activity_center(from.activity_center());
  }
  if (from.counting_box() != 0) {
    set_counting_box(from.counting_box());
  }
  if (from.register_award() != 0) {
    set_register_award(from.register_award());
  }
  if (from.activity_gamecount() != 0) {
    set_activity_gamecount(from.activity_gamecount());
  }
}

void FreechipStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FreechipStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreechipStatus::CopyFrom(const FreechipStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FreechipStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreechipStatus::IsInitialized() const {

  return true;
}

void FreechipStatus::Swap(FreechipStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FreechipStatus::InternalSwap(FreechipStatus* other) {
  std::swap(daily_sign_, other->daily_sign_);
  std::swap(login_award_, other->login_award_);
  std::swap(daily_task_, other->daily_task_);
  std::swap(activity_center_, other->activity_center_);
  std::swap(counting_box_, other->counting_box_);
  std::swap(register_award_, other->register_award_);
  std::swap(activity_gamecount_, other->activity_gamecount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FreechipStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreechipStatus_descriptor_;
  metadata.reflection = FreechipStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FreechipStatus

// optional uint32 daily_sign = 1;
void FreechipStatus::clear_daily_sign() {
  daily_sign_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::daily_sign() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.daily_sign)
  return daily_sign_;
}
 void FreechipStatus::set_daily_sign(::google::protobuf::uint32 value) {
  
  daily_sign_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.daily_sign)
}

// optional uint32 login_award = 2;
void FreechipStatus::clear_login_award() {
  login_award_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::login_award() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.login_award)
  return login_award_;
}
 void FreechipStatus::set_login_award(::google::protobuf::uint32 value) {
  
  login_award_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.login_award)
}

// optional uint32 daily_task = 3;
void FreechipStatus::clear_daily_task() {
  daily_task_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::daily_task() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.daily_task)
  return daily_task_;
}
 void FreechipStatus::set_daily_task(::google::protobuf::uint32 value) {
  
  daily_task_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.daily_task)
}

// optional uint32 activity_center = 4;
void FreechipStatus::clear_activity_center() {
  activity_center_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::activity_center() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.activity_center)
  return activity_center_;
}
 void FreechipStatus::set_activity_center(::google::protobuf::uint32 value) {
  
  activity_center_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.activity_center)
}

// optional uint32 counting_box = 5;
void FreechipStatus::clear_counting_box() {
  counting_box_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::counting_box() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.counting_box)
  return counting_box_;
}
 void FreechipStatus::set_counting_box(::google::protobuf::uint32 value) {
  
  counting_box_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.counting_box)
}

// optional uint32 register_award = 6;
void FreechipStatus::clear_register_award() {
  register_award_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::register_award() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.register_award)
  return register_award_;
}
 void FreechipStatus::set_register_award(::google::protobuf::uint32 value) {
  
  register_award_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.register_award)
}

// optional uint32 activity_gamecount = 7;
void FreechipStatus::clear_activity_gamecount() {
  activity_gamecount_ = 0u;
}
 ::google::protobuf::uint32 FreechipStatus::activity_gamecount() const {
  // @@protoc_insertion_point(field_get:FreechipStatus.activity_gamecount)
  return activity_gamecount_;
}
 void FreechipStatus::set_activity_gamecount(::google::protobuf::uint32 value) {
  
  activity_gamecount_ = value;
  // @@protoc_insertion_point(field_set:FreechipStatus.activity_gamecount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllAwardsResponse::kHeadFieldNumber;
const int AllAwardsResponse::kLoginAwardFieldNumber;
const int AllAwardsResponse::kRegisterAwardFieldNumber;
const int AllAwardsResponse::kSignAwardFieldNumber;
const int AllAwardsResponse::kCountBoxAwardFieldNumber;
const int AllAwardsResponse::kFreechipStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllAwardsResponse::AllAwardsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AllAwardsResponse)
}

void AllAwardsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  head_ = const_cast< ::ResponseHeader*>(&::ResponseHeader::default_instance());
  loginaward_ = const_cast< ::LoginAward*>(&::LoginAward::default_instance());
  registeraward_ = const_cast< ::RegisterAward*>(&::RegisterAward::default_instance());
  signaward_ = const_cast< ::SignAward*>(&::SignAward::default_instance());
  countboxaward_ = const_cast< ::CountBoxAward*>(&::CountBoxAward::default_instance());
  freechipstatus_ = const_cast< ::FreechipStatus*>(&::FreechipStatus::default_instance());
}

AllAwardsResponse::AllAwardsResponse(const AllAwardsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AllAwardsResponse)
}

void AllAwardsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  head_ = NULL;
  loginaward_ = NULL;
  registeraward_ = NULL;
  signaward_ = NULL;
  countboxaward_ = NULL;
  freechipstatus_ = NULL;
}

AllAwardsResponse::~AllAwardsResponse() {
  // @@protoc_insertion_point(destructor:AllAwardsResponse)
  SharedDtor();
}

void AllAwardsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
    delete loginaward_;
    delete registeraward_;
    delete signaward_;
    delete countboxaward_;
    delete freechipstatus_;
  }
}

void AllAwardsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllAwardsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllAwardsResponse_descriptor_;
}

const AllAwardsResponse& AllAwardsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Awards_2eproto();
  return *default_instance_;
}

AllAwardsResponse* AllAwardsResponse::default_instance_ = NULL;

AllAwardsResponse* AllAwardsResponse::New(::google::protobuf::Arena* arena) const {
  AllAwardsResponse* n = new AllAwardsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllAwardsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AllAwardsResponse)
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
  if (GetArenaNoVirtual() == NULL && loginaward_ != NULL) delete loginaward_;
  loginaward_ = NULL;
  if (GetArenaNoVirtual() == NULL && registeraward_ != NULL) delete registeraward_;
  registeraward_ = NULL;
  if (GetArenaNoVirtual() == NULL && signaward_ != NULL) delete signaward_;
  signaward_ = NULL;
  if (GetArenaNoVirtual() == NULL && countboxaward_ != NULL) delete countboxaward_;
  countboxaward_ = NULL;
  if (GetArenaNoVirtual() == NULL && freechipstatus_ != NULL) delete freechipstatus_;
  freechipstatus_ = NULL;
}

bool AllAwardsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AllAwardsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ResponseHeader head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginAward;
        break;
      }

      // optional .LoginAward loginAward = 2;
      case 2: {
        if (tag == 18) {
         parse_loginAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginaward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_registerAward;
        break;
      }

      // optional .RegisterAward registerAward = 3;
      case 3: {
        if (tag == 26) {
         parse_registerAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registeraward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signAward;
        break;
      }

      // optional .SignAward signAward = 4;
      case 4: {
        if (tag == 34) {
         parse_signAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signaward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_countBoxAward;
        break;
      }

      // optional .CountBoxAward countBoxAward = 5;
      case 5: {
        if (tag == 42) {
         parse_countBoxAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_countboxaward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_freechipStatus;
        break;
      }

      // optional .FreechipStatus freechipStatus = 6;
      case 6: {
        if (tag == 50) {
         parse_freechipStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freechipstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AllAwardsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AllAwardsResponse)
  return false;
#undef DO_
}

void AllAwardsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AllAwardsResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional .LoginAward loginAward = 2;
  if (this->has_loginaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->loginaward_, output);
  }

  // optional .RegisterAward registerAward = 3;
  if (this->has_registeraward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->registeraward_, output);
  }

  // optional .SignAward signAward = 4;
  if (this->has_signaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->signaward_, output);
  }

  // optional .CountBoxAward countBoxAward = 5;
  if (this->has_countboxaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->countboxaward_, output);
  }

  // optional .FreechipStatus freechipStatus = 6;
  if (this->has_freechipstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->freechipstatus_, output);
  }

  // @@protoc_insertion_point(serialize_end:AllAwardsResponse)
}

::google::protobuf::uint8* AllAwardsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AllAwardsResponse)
  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->head_, target);
  }

  // optional .LoginAward loginAward = 2;
  if (this->has_loginaward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->loginaward_, target);
  }

  // optional .RegisterAward registerAward = 3;
  if (this->has_registeraward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->registeraward_, target);
  }

  // optional .SignAward signAward = 4;
  if (this->has_signaward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->signaward_, target);
  }

  // optional .CountBoxAward countBoxAward = 5;
  if (this->has_countboxaward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->countboxaward_, target);
  }

  // optional .FreechipStatus freechipStatus = 6;
  if (this->has_freechipstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, *this->freechipstatus_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AllAwardsResponse)
  return target;
}

int AllAwardsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AllAwardsResponse)
  int total_size = 0;

  // optional .ResponseHeader head = 1;
  if (this->has_head()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  // optional .LoginAward loginAward = 2;
  if (this->has_loginaward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loginaward_);
  }

  // optional .RegisterAward registerAward = 3;
  if (this->has_registeraward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->registeraward_);
  }

  // optional .SignAward signAward = 4;
  if (this->has_signaward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signaward_);
  }

  // optional .CountBoxAward countBoxAward = 5;
  if (this->has_countboxaward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->countboxaward_);
  }

  // optional .FreechipStatus freechipStatus = 6;
  if (this->has_freechipstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->freechipstatus_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllAwardsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AllAwardsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AllAwardsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AllAwardsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AllAwardsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AllAwardsResponse)
    MergeFrom(*source);
  }
}

void AllAwardsResponse::MergeFrom(const AllAwardsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AllAwardsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_head()) {
    mutable_head()->::ResponseHeader::MergeFrom(from.head());
  }
  if (from.has_loginaward()) {
    mutable_loginaward()->::LoginAward::MergeFrom(from.loginaward());
  }
  if (from.has_registeraward()) {
    mutable_registeraward()->::RegisterAward::MergeFrom(from.registeraward());
  }
  if (from.has_signaward()) {
    mutable_signaward()->::SignAward::MergeFrom(from.signaward());
  }
  if (from.has_countboxaward()) {
    mutable_countboxaward()->::CountBoxAward::MergeFrom(from.countboxaward());
  }
  if (from.has_freechipstatus()) {
    mutable_freechipstatus()->::FreechipStatus::MergeFrom(from.freechipstatus());
  }
}

void AllAwardsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AllAwardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllAwardsResponse::CopyFrom(const AllAwardsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AllAwardsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllAwardsResponse::IsInitialized() const {

  return true;
}

void AllAwardsResponse::Swap(AllAwardsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllAwardsResponse::InternalSwap(AllAwardsResponse* other) {
  std::swap(head_, other->head_);
  std::swap(loginaward_, other->loginaward_);
  std::swap(registeraward_, other->registeraward_);
  std::swap(signaward_, other->signaward_);
  std::swap(countboxaward_, other->countboxaward_);
  std::swap(freechipstatus_, other->freechipstatus_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllAwardsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllAwardsResponse_descriptor_;
  metadata.reflection = AllAwardsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllAwardsResponse

// optional .ResponseHeader head = 1;
bool AllAwardsResponse::has_head() const {
  return !_is_default_instance_ && head_ != NULL;
}
void AllAwardsResponse::clear_head() {
  if (GetArenaNoVirtual() == NULL && head_ != NULL) delete head_;
  head_ = NULL;
}
const ::ResponseHeader& AllAwardsResponse::head() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ResponseHeader* AllAwardsResponse::mutable_head() {
  
  if (head_ == NULL) {
    head_ = new ::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.head)
  return head_;
}
::ResponseHeader* AllAwardsResponse::release_head() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.head)
  
  ::ResponseHeader* temp = head_;
  head_ = NULL;
  return temp;
}
void AllAwardsResponse::set_allocated_head(::ResponseHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.head)
}

// optional .LoginAward loginAward = 2;
bool AllAwardsResponse::has_loginaward() const {
  return !_is_default_instance_ && loginaward_ != NULL;
}
void AllAwardsResponse::clear_loginaward() {
  if (GetArenaNoVirtual() == NULL && loginaward_ != NULL) delete loginaward_;
  loginaward_ = NULL;
}
const ::LoginAward& AllAwardsResponse::loginaward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.loginAward)
  return loginaward_ != NULL ? *loginaward_ : *default_instance_->loginaward_;
}
::LoginAward* AllAwardsResponse::mutable_loginaward() {
  
  if (loginaward_ == NULL) {
    loginaward_ = new ::LoginAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.loginAward)
  return loginaward_;
}
::LoginAward* AllAwardsResponse::release_loginaward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.loginAward)
  
  ::LoginAward* temp = loginaward_;
  loginaward_ = NULL;
  return temp;
}
void AllAwardsResponse::set_allocated_loginaward(::LoginAward* loginaward) {
  delete loginaward_;
  loginaward_ = loginaward;
  if (loginaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.loginAward)
}

// optional .RegisterAward registerAward = 3;
bool AllAwardsResponse::has_registeraward() const {
  return !_is_default_instance_ && registeraward_ != NULL;
}
void AllAwardsResponse::clear_registeraward() {
  if (GetArenaNoVirtual() == NULL && registeraward_ != NULL) delete registeraward_;
  registeraward_ = NULL;
}
const ::RegisterAward& AllAwardsResponse::registeraward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.registerAward)
  return registeraward_ != NULL ? *registeraward_ : *default_instance_->registeraward_;
}
::RegisterAward* AllAwardsResponse::mutable_registeraward() {
  
  if (registeraward_ == NULL) {
    registeraward_ = new ::RegisterAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.registerAward)
  return registeraward_;
}
::RegisterAward* AllAwardsResponse::release_registeraward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.registerAward)
  
  ::RegisterAward* temp = registeraward_;
  registeraward_ = NULL;
  return temp;
}
void AllAwardsResponse::set_allocated_registeraward(::RegisterAward* registeraward) {
  delete registeraward_;
  registeraward_ = registeraward;
  if (registeraward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.registerAward)
}

// optional .SignAward signAward = 4;
bool AllAwardsResponse::has_signaward() const {
  return !_is_default_instance_ && signaward_ != NULL;
}
void AllAwardsResponse::clear_signaward() {
  if (GetArenaNoVirtual() == NULL && signaward_ != NULL) delete signaward_;
  signaward_ = NULL;
}
const ::SignAward& AllAwardsResponse::signaward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.signAward)
  return signaward_ != NULL ? *signaward_ : *default_instance_->signaward_;
}
::SignAward* AllAwardsResponse::mutable_signaward() {
  
  if (signaward_ == NULL) {
    signaward_ = new ::SignAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.signAward)
  return signaward_;
}
::SignAward* AllAwardsResponse::release_signaward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.signAward)
  
  ::SignAward* temp = signaward_;
  signaward_ = NULL;
  return temp;
}
void AllAwardsResponse::set_allocated_signaward(::SignAward* signaward) {
  delete signaward_;
  signaward_ = signaward;
  if (signaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.signAward)
}

// optional .CountBoxAward countBoxAward = 5;
bool AllAwardsResponse::has_countboxaward() const {
  return !_is_default_instance_ && countboxaward_ != NULL;
}
void AllAwardsResponse::clear_countboxaward() {
  if (GetArenaNoVirtual() == NULL && countboxaward_ != NULL) delete countboxaward_;
  countboxaward_ = NULL;
}
const ::CountBoxAward& AllAwardsResponse::countboxaward() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.countBoxAward)
  return countboxaward_ != NULL ? *countboxaward_ : *default_instance_->countboxaward_;
}
::CountBoxAward* AllAwardsResponse::mutable_countboxaward() {
  
  if (countboxaward_ == NULL) {
    countboxaward_ = new ::CountBoxAward;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.countBoxAward)
  return countboxaward_;
}
::CountBoxAward* AllAwardsResponse::release_countboxaward() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.countBoxAward)
  
  ::CountBoxAward* temp = countboxaward_;
  countboxaward_ = NULL;
  return temp;
}
void AllAwardsResponse::set_allocated_countboxaward(::CountBoxAward* countboxaward) {
  delete countboxaward_;
  countboxaward_ = countboxaward;
  if (countboxaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.countBoxAward)
}

// optional .FreechipStatus freechipStatus = 6;
bool AllAwardsResponse::has_freechipstatus() const {
  return !_is_default_instance_ && freechipstatus_ != NULL;
}
void AllAwardsResponse::clear_freechipstatus() {
  if (GetArenaNoVirtual() == NULL && freechipstatus_ != NULL) delete freechipstatus_;
  freechipstatus_ = NULL;
}
const ::FreechipStatus& AllAwardsResponse::freechipstatus() const {
  // @@protoc_insertion_point(field_get:AllAwardsResponse.freechipStatus)
  return freechipstatus_ != NULL ? *freechipstatus_ : *default_instance_->freechipstatus_;
}
::FreechipStatus* AllAwardsResponse::mutable_freechipstatus() {
  
  if (freechipstatus_ == NULL) {
    freechipstatus_ = new ::FreechipStatus;
  }
  // @@protoc_insertion_point(field_mutable:AllAwardsResponse.freechipStatus)
  return freechipstatus_;
}
::FreechipStatus* AllAwardsResponse::release_freechipstatus() {
  // @@protoc_insertion_point(field_release:AllAwardsResponse.freechipStatus)
  
  ::FreechipStatus* temp = freechipstatus_;
  freechipstatus_ = NULL;
  return temp;
}
void AllAwardsResponse::set_allocated_freechipstatus(::FreechipStatus* freechipstatus) {
  delete freechipstatus_;
  freechipstatus_ = freechipstatus;
  if (freechipstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AllAwardsResponse.freechipStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
